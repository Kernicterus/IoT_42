Release "gitlab" has been upgraded. Happy Helming!
NAME: gitlab
LAST DEPLOYED: Sat Feb  8 20:21:54 2025
NAMESPACE: gitlab
STATUS: pending-upgrade
REVISION: 2
USER-SUPPLIED VALUES:
certmanager:
  install: false
gitlab:
  toolbox:
    enabled: true
    persistence:
      enabled: true
      existingClaim: pvc-vol-gitlab
gitlab-runner:
  install: false
global:
  hosts:
    domain: localhost
    https: false
  ingress:
    class: nginx
    configureCertmanager: false
    tls:
      enabled: false
  rails:
    bootsnap:
      enabled: false
  service:
    ports:
      metrics: 30505
      webservice: 30305
      workhorse: 30405
    type: NodePort
nginx-ingress:
  enabled: false
postgresql:
  persistence:
    enabled: true
    existingClaim: pvc-vol-gitlab
    size: 256Mi
prometheus:
  install: false
redis:
  persistence:
    enabled: true
    existingClaim: pvc-vol-gitlab

COMPUTED VALUES:
certmanager:
  install: false
  installCRDs: true
  nameOverride: certmanager
  rbac:
    create: true
certmanager-issuer:
  common:
    labels: {}
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    runAsGroup: 65534
    runAsNonRoot: true
    runAsUser: 65534
  global:
    affinity:
      nodeAffinity:
        key: topology.kubernetes.io/zone
        values: []
      podAntiAffinity:
        topologyKey: kubernetes.io/hostname
    antiAffinity: soft
    appConfig:
      applicationSettingsCacheSeconds: 60
      artifacts:
        bucket: gitlab-artifacts
        connection: {}
        enabled: true
        proxy_download: true
      backups:
        bucket: gitlab-backups
        tmpBucket: tmp
      ciSecureFiles:
        bucket: gitlab-ci-secure-files
        connection: {}
        enabled: false
      contentSecurityPolicy:
        enabled: false
        report_only: true
      cron_jobs: {}
      defaultColorMode: null
      defaultProjectsFeatures:
        builds: true
        issues: true
        mergeRequests: true
        snippets: true
        wiki: true
      defaultSyntaxHighlightingTheme: null
      defaultTheme: null
      dependencyProxy:
        bucket: gitlab-dependency-proxy
        connection: {}
        enabled: false
        proxy_download: true
      duoAuth:
        enabled: false
      enableImpersonation: null
      enableSeatLink: true
      enableUsagePing: true
      externalDiffs:
        bucket: gitlab-mr-diffs
        connection: {}
        enabled: false
        proxy_download: true
        when: null
      extra:
        bizible: null
        googleAnalyticsId: null
        googleTagManagerNonceId: null
        matomoDisableCookies: null
        matomoSiteId: null
        matomoUrl: null
        oneTrustId: null
      gitlab_docs:
        enabled: false
        host: ""
      gitlab_kas: {}
      graphQlTimeout: null
      gravatar:
        plainUrl: null
        sslUrl: null
      incomingEmail:
        address: ""
        authToken:
          key: authToken
          secret: ""
        clientSecret:
          key: secret
        deleteAfterDelivery: true
        deliveryMethod: webhook
        enabled: false
        expungeDeleted: false
        host: imap.gmail.com
        idleTimeout: 60
        inboxMethod: imap
        logger:
          logPath: /dev/stdout
        mailbox: inbox
        password:
          key: password
          secret: ""
        pollInterval: 60
        port: 993
        ssl: true
        startTls: false
        user: ""
      initialDefaults: {}
      issueClosingPattern: null
      kerberos:
        dedicatedPort:
          enabled: false
          https: true
          port: 8443
        enabled: false
        keytab:
          key: keytab
        krb5Config: ""
        servicePrincipalName: ""
        simpleLdapLinkingAllowedRealms: []
      ldap:
        preventSignin: false
        servers: {}
      lfs:
        bucket: git-lfs
        connection: {}
        enabled: true
        proxy_download: true
      maxRequestDurationSeconds: null
      microsoft_graph_mailer:
        azure_ad_endpoint: https://login.microsoftonline.com
        client_id: ""
        client_secret:
          key: secret
          secret: ""
        enabled: false
        graph_endpoint: https://graph.microsoft.com
        tenant: ""
        user_id: ""
      object_store:
        connection: {}
        enabled: false
        proxy_download: true
        storage_options: {}
      omniauth:
        allowBypassTwoFactor: []
        allowSingleSignOn:
        - saml
        autoLinkLdapUser: false
        autoLinkSamlUser: false
        autoLinkUser: []
        autoSignInWithProvider: null
        blockAutoCreatedUsers: true
        enabled: false
        externalProviders: []
        providers: []
        syncProfileAttributes:
        - email
        syncProfileFromProvider: []
      packages:
        bucket: gitlab-packages
        connection: {}
        enabled: true
        proxy_download: true
      sentry:
        clientside_dsn: null
        dsn: null
        enabled: false
        environment: null
      serviceDeskEmail:
        address: ""
        authToken:
          key: authToken
          secret: ""
        clientSecret:
          key: secret
        deleteAfterDelivery: true
        deliveryMethod: webhook
        enabled: false
        expungeDeleted: false
        host: imap.gmail.com
        idleTimeout: 60
        inboxMethod: imap
        logger:
          logPath: /dev/stdout
        mailbox: inbox
        password:
          key: password
          secret: ""
        pollInterval: 60
        port: 993
        ssl: true
        startTls: false
        user: ""
      sidekiq:
        routingRules: []
      smartcard:
        CASecret: null
        clientCertificateRequiredHost: null
        enabled: false
        requiredForGitAccess: false
        sanExtensions: false
      suggested_reviewers: {}
      terraformState:
        bucket: gitlab-terraform-state
        connection: {}
        enabled: false
      uploads:
        bucket: gitlab-uploads
        connection: {}
        enabled: true
        proxy_download: true
      usernameChangingEnabled: true
      webhookTimeout: null
    application:
      allowClusterRoles: true
      create: false
      links: []
    batch:
      cronJob:
        apiVersion: ""
    certificates:
      customCAs: []
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/certificates
    common:
      labels: {}
    deployment:
      annotations: {}
    edition: ee
    email:
      display_name: GitLab
      from: ""
      reply_to: ""
      smime:
        certName: tls.crt
        enabled: false
        keyName: tls.key
        secretName: ""
      subject_suffix: ""
    extraEnv: {}
    extraEnvFrom: {}
    geo:
      enabled: false
      nodeName: null
      psql:
        password: {}
      registry:
        replication:
          enabled: false
          primaryApiUrl: null
      role: primary
    gitaly:
      authToken: {}
      enabled: true
      external: []
      internal:
        names:
        - default
      service:
        externalPort: 8075
        internalPort: 8075
        name: gitaly
        tls:
          externalPort: 8076
          internalPort: 8076
        type: ClusterIP
      tls:
        enabled: false
    gitlab:
      license: {}
    gitlabBase:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
    gitlabVersion: 17.8.1
    hosts:
      domain: localhost
      externalIP: null
      gitlab: {}
      hostSuffix: null
      https: false
      kas: {}
      minio: {}
      pages: {}
      registry: {}
      smartcard: {}
      ssh: null
      tls: {}
    hpa:
      apiVersion: ""
    image: {}
    ingress:
      annotations: {}
      apiVersion: ""
      class: nginx
      configureCertmanager: false
      enabled: true
      path: /
      pathType: Prefix
      provider: nginx
      tls:
        enabled: false
      useNewIngressForCerts: false
    initialRootPassword: {}
    job:
      nameSuffixOverride: null
    kas:
      enabled: true
      service:
        apiExternalPort: 8153
      tls:
        enabled: false
        verify: true
    keda:
      enabled: false
    kubectl:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
      securityContext:
        fsGroup: 65534
        runAsUser: 65534
        seccompProfile:
          type: RuntimeDefault
    minio:
      credentials: {}
      enabled: true
    monitoring:
      enabled: false
    nodeAffinity: null
    oauth:
      gitlab-pages: {}
    pages:
      accessControl: false
      apiSecret: {}
      artifactsServer: true
      authSecret: {}
      enabled: false
      externalHttp: []
      externalHttps: []
      host: null
      https: null
      localStore:
        enabled: false
      namespaceInPath: false
      objectStore:
        bucket: gitlab-pages
        connection: {}
        enabled: true
      path: null
      port: null
    pdb:
      apiVersion: ""
    pod:
      labels: {}
    praefect:
      authToken: {}
      autoMigrate: true
      dbSecret: {}
      enabled: false
      ntpHost: pool.ntp.org
      psql:
        sslMode: disable
      replaceInternalGitaly: true
      service:
        externalPort: 8075
        internalPort: 8075
        name: praefect
        tls:
          externalPort: 8076
          internalPort: 8076
        type: ClusterIP
      tls:
        enabled: false
      virtualStorages:
      - gitalyReplicas: 3
        maxUnavailable: 1
        name: default
    priorityClassName: ""
    psql:
      ci: {}
      connectTimeout: null
      keepalives: null
      keepalivesCount: null
      keepalivesIdle: null
      keepalivesInterval: null
      main: {}
      password: {}
      tcpUserTimeout: null
    rails:
      bootsnap:
        enabled: false
      sessionStore:
        sessionCookieTokenPrefix: ""
    railsSecrets: {}
    redis:
      auth:
        enabled: true
      sentinelAuth:
        enabled: false
    registry:
      api:
        port: 5000
        protocol: http
        serviceName: registry
      bucket: registry
      certificate: {}
      enabled: true
      host: null
      httpSecret: {}
      notificationSecret: {}
      notifications: {}
      redis:
        cache:
          password: {}
        rateLimiting:
          password: {}
      tls:
        enabled: false
      tokenIssuer: gitlab-issuer
    runner:
      registrationToken: {}
    service:
      annotations: {}
      labels: {}
      ports:
        metrics: 30505
        webservice: 30305
        workhorse: 30405
      type: NodePort
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: false
      create: true
      enabled: false
    shell:
      authToken: {}
      hostKeys: {}
      tcp:
        proxyProtocol: false
    smtp:
      address: smtp.mailgun.org
      authentication: plain
      enabled: false
      open_timeout: 30
      openssl_verify_mode: peer
      password:
        key: password
        secret: ""
      pool: false
      port: 2525
      read_timeout: 60
      starttls_auto: false
      user_name: ""
    spamcheck:
      enabled: false
    time_zone: UTC
    tracing:
      connection:
        string: ""
      urlTemplate: ""
    traefik:
      apiVersion: ""
    webservice:
      workerTimeout: 60
    workhorse:
      serviceName: webservice-default
      tls:
        enabled: false
    zoekt:
      gateway:
        basicAuth: {}
      indexer:
        internalApi: {}
  priorityClassName: ""
  rbac:
    create: true
  resources:
    requests:
      cpu: 50m
  server: https://acme-v02.api.letsencrypt.org/directory
  ttlSecondsAfterFinished: 1800
  useNewIngressForCerts: false
gitlab:
  geo-logcursor:
    affinity:
      nodeAffinity: {}
      podAntiAffinity: {}
    common:
      labels: {}
    containerSecurityContext:
      runAsUser: 1000
    deployment:
      livenessProbe:
        failureThreshold: 3
        initialDelaySeconds: 20
        periodSeconds: 60
        successThreshold: 1
        timeoutSeconds: 30
      readinessProbe:
        failureThreshold: 3
        initialDelaySeconds: 0
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 2
      strategy: {}
    enabled: true
    gitaly:
      authToken: {}
    global:
      affinity:
        nodeAffinity:
          key: topology.kubernetes.io/zone
          values: []
        podAntiAffinity:
          topologyKey: kubernetes.io/hostname
      antiAffinity: soft
      appConfig:
        applicationSettingsCacheSeconds: 60
        artifacts:
          bucket: gitlab-artifacts
          connection: {}
          enabled: true
          proxy_download: true
        backups:
          bucket: gitlab-backups
          tmpBucket: tmp
        ciSecureFiles:
          bucket: gitlab-ci-secure-files
          connection: {}
          enabled: false
        contentSecurityPolicy:
          enabled: false
          report_only: true
        cron_jobs: {}
        defaultColorMode: null
        defaultProjectsFeatures:
          builds: true
          issues: true
          mergeRequests: true
          snippets: true
          wiki: true
        defaultSyntaxHighlightingTheme: null
        defaultTheme: null
        dependencyProxy:
          bucket: gitlab-dependency-proxy
          connection: {}
          enabled: false
          proxy_download: true
        duoAuth:
          enabled: false
        enableImpersonation: null
        enableSeatLink: true
        enableUsagePing: true
        externalDiffs:
          bucket: gitlab-mr-diffs
          connection: {}
          enabled: false
          proxy_download: true
          when: null
        extra:
          bizible: null
          googleAnalyticsId: null
          googleTagManagerNonceId: null
          matomoDisableCookies: null
          matomoSiteId: null
          matomoUrl: null
          oneTrustId: null
        gitlab_docs:
          enabled: false
          host: ""
        gitlab_kas: {}
        graphQlTimeout: null
        gravatar:
          plainUrl: null
          sslUrl: null
        incomingEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        initialDefaults: {}
        issueClosingPattern: null
        kerberos:
          dedicatedPort:
            enabled: false
            https: true
            port: 8443
          enabled: false
          keytab:
            key: keytab
          krb5Config: ""
          servicePrincipalName: ""
          simpleLdapLinkingAllowedRealms: []
        ldap:
          preventSignin: false
          servers: {}
        lfs:
          bucket: git-lfs
          connection: {}
          enabled: true
          proxy_download: true
        maxRequestDurationSeconds: null
        microsoft_graph_mailer:
          azure_ad_endpoint: https://login.microsoftonline.com
          client_id: ""
          client_secret:
            key: secret
            secret: ""
          enabled: false
          graph_endpoint: https://graph.microsoft.com
          tenant: ""
          user_id: ""
        object_store:
          connection: {}
          enabled: false
          proxy_download: true
          storage_options: {}
        omniauth:
          allowBypassTwoFactor: []
          allowSingleSignOn:
          - saml
          autoLinkLdapUser: false
          autoLinkSamlUser: false
          autoLinkUser: []
          autoSignInWithProvider: null
          blockAutoCreatedUsers: true
          enabled: false
          externalProviders: []
          providers: []
          syncProfileAttributes:
          - email
          syncProfileFromProvider: []
        packages:
          bucket: gitlab-packages
          connection: {}
          enabled: true
          proxy_download: true
        sentry:
          clientside_dsn: null
          dsn: null
          enabled: false
          environment: null
        serviceDeskEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        sidekiq:
          routingRules: []
        smartcard:
          CASecret: null
          clientCertificateRequiredHost: null
          enabled: false
          requiredForGitAccess: false
          sanExtensions: false
        suggested_reviewers: {}
        terraformState:
          bucket: gitlab-terraform-state
          connection: {}
          enabled: false
        uploads:
          bucket: gitlab-uploads
          connection: {}
          enabled: true
          proxy_download: true
        usernameChangingEnabled: true
        webhookTimeout: null
      application:
        allowClusterRoles: true
        create: false
        links: []
      batch:
        cronJob:
          apiVersion: ""
      certificates:
        customCAs: []
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/certificates
      clickhouse:
        enabled: false
      common:
        labels: {}
      communityImages:
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ce
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ce
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ce
      deployment:
        annotations: {}
      edition: ee
      email:
        display_name: GitLab
        from: ""
        reply_to: ""
        smime:
          certName: tls.crt
          enabled: false
          keyName: tls.key
          secretName: ""
        subject_suffix: ""
      enterpriseImages:
        geo-logcursor:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-geo-logcursor
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ee
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ee
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ee
      extraEnv: {}
      extraEnvFrom: {}
      geo:
        enabled: false
        psql:
          password: {}
        registry:
          replication:
            enabled: false
            primaryApiUrl: null
        role: primary
      gitaly:
        authToken: {}
        enabled: true
        external: []
        internal:
          names:
          - default
        service:
          externalPort: 8075
          internalPort: 8075
          name: gitaly
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
      gitlab:
        license: {}
      gitlabBase:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
      gitlabVersion: 17.8.1
      hosts:
        domain: localhost
        externalIP: null
        gitlab: {}
        https: false
        kas: {}
        minio: {}
        pages: {}
        registry: {}
        smartcard: {}
        ssh: null
        tls: {}
      hpa:
        apiVersion: ""
      image: {}
      ingress:
        annotations: {}
        apiVersion: ""
        class: nginx
        configureCertmanager: false
        enabled: true
        path: /
        pathType: Prefix
        provider: nginx
        tls:
          enabled: false
        useNewIngressForCerts: false
      initialRootPassword: {}
      job:
        nameSuffixOverride: null
      kas:
        enabled: true
        service:
          apiExternalPort: 8153
        tls:
          enabled: false
          verify: true
      keda:
        enabled: false
      kubectl:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
        securityContext:
          fsGroup: 65534
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
      minio:
        credentials: {}
        enabled: true
      monitoring:
        enabled: false
      nodeAffinity: null
      oauth:
        gitlab-pages: {}
      pages:
        accessControl: false
        apiSecret: {}
        artifactsServer: true
        authSecret: {}
        enabled: false
        externalHttp: []
        externalHttps: []
        host: null
        https: null
        localStore:
          enabled: false
        namespaceInPath: false
        objectStore:
          bucket: gitlab-pages
          connection: {}
          enabled: true
        path: null
        port: null
      pdb:
        apiVersion: ""
      pod:
        labels: {}
      praefect:
        authToken: {}
        autoMigrate: true
        dbSecret: {}
        enabled: false
        ntpHost: pool.ntp.org
        psql:
          sslMode: disable
        replaceInternalGitaly: true
        service:
          externalPort: 8075
          internalPort: 8075
          name: praefect
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
        virtualStorages:
        - gitalyReplicas: 3
          maxUnavailable: 1
          name: default
      priorityClassName: ""
      psql:
        ci: {}
        connectTimeout: null
        keepalives: null
        keepalivesCount: null
        keepalivesIdle: null
        keepalivesInterval: null
        knownDecompositions:
        - main
        - ci
        - embedding
        main: {}
        password: {}
        tcpUserTimeout: null
      rails:
        bootsnap:
          enabled: false
        sessionStore:
          sessionCookieTokenPrefix: ""
      railsSecrets: {}
      redis:
        auth:
          enabled: true
        sentinelAuth:
          enabled: false
      registry:
        api:
          port: 5000
          protocol: http
          serviceName: registry
        bucket: registry
        certificate: {}
        enabled: true
        host: null
        httpSecret: {}
        notificationSecret: {}
        notifications: {}
        redis:
          cache:
            password: {}
          rateLimiting:
            password: {}
        tls:
          enabled: false
        tokenIssuer: gitlab-issuer
      runner:
        registrationToken: {}
      service:
        annotations: {}
        labels: {}
        ports:
          metrics: 30505
          webservice: 30305
          workhorse: 30405
        type: NodePort
      serviceAccount:
        annotations: {}
        automountServiceAccountToken: false
        create: true
        enabled: false
      shell:
        authToken: {}
        hostKeys: {}
        tcp:
          proxyProtocol: false
      smtp:
        address: smtp.mailgun.org
        authentication: plain
        enabled: false
        open_timeout: 30
        openssl_verify_mode: peer
        password:
          key: password
          secret: ""
        pool: false
        port: 2525
        read_timeout: 60
        starttls_auto: false
        user_name: ""
      spamcheck:
        enabled: false
      time_zone: UTC
      tracing:
        connection:
          string: ""
        urlTemplate: ""
      traefik:
        apiVersion: ""
      webservice:
        workerTimeout: 60
      workhorse:
        serviceName: webservice-default
        tls:
          enabled: false
      zoekt:
        gateway:
          basicAuth: {}
        indexer:
          internalApi: {}
    image: {}
    init:
      containerSecurityContext: {}
      image: {}
      resources:
        requests:
          cpu: 50m
    minio:
      port: 9000
      serviceName: minio-svc
    nodeSelector: {}
    podLabels: {}
    priorityClassName: ""
    psql: {}
    redis:
      auth: {}
    replicaCount: 1
    resources:
      requests:
        cpu: 300m
        memory: 700M
    securityContext:
      fsGroup: 1000
      runAsUser: 1000
    serviceAccount:
      annotations: {}
      create: false
      enabled: false
    tolerations: []
  gitaly:
    affinity:
      nodeAffinity: {}
      podAntiAffinity: {}
    annotations: {}
    backup: {}
    cgroups:
      enabled: false
      hierarchyRoot: gitaly
      initContainer:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitaly-init-cgroups
        securityContext:
          runAsGroup: 0
          runAsUser: 0
      mountpoint: '{% file.Read "/etc/gitlab-secrets/gitaly-pod-cgroup" | strings.TrimSpace
        %}'
      repositories: {}
    common:
      labels: {}
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      runAsNonRoot: true
      runAsUser: 1000
    git: {}
    gitaly: {}
    global:
      affinity:
        nodeAffinity:
          key: topology.kubernetes.io/zone
          values: []
        podAntiAffinity:
          topologyKey: kubernetes.io/hostname
      antiAffinity: soft
      appConfig:
        applicationSettingsCacheSeconds: 60
        artifacts:
          bucket: gitlab-artifacts
          connection: {}
          enabled: true
          proxy_download: true
        backups:
          bucket: gitlab-backups
          tmpBucket: tmp
        ciSecureFiles:
          bucket: gitlab-ci-secure-files
          connection: {}
          enabled: false
        contentSecurityPolicy:
          enabled: false
          report_only: true
        cron_jobs: {}
        defaultColorMode: null
        defaultProjectsFeatures:
          builds: true
          issues: true
          mergeRequests: true
          snippets: true
          wiki: true
        defaultSyntaxHighlightingTheme: null
        defaultTheme: null
        dependencyProxy:
          bucket: gitlab-dependency-proxy
          connection: {}
          enabled: false
          proxy_download: true
        duoAuth:
          enabled: false
        enableImpersonation: null
        enableSeatLink: true
        enableUsagePing: true
        externalDiffs:
          bucket: gitlab-mr-diffs
          connection: {}
          enabled: false
          proxy_download: true
          when: null
        extra:
          bizible: null
          googleAnalyticsId: null
          googleTagManagerNonceId: null
          matomoDisableCookies: null
          matomoSiteId: null
          matomoUrl: null
          oneTrustId: null
        gitlab_docs:
          enabled: false
          host: ""
        gitlab_kas: {}
        graphQlTimeout: null
        gravatar:
          plainUrl: null
          sslUrl: null
        incomingEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        initialDefaults: {}
        issueClosingPattern: null
        kerberos:
          dedicatedPort:
            enabled: false
            https: true
            port: 8443
          enabled: false
          keytab:
            key: keytab
          krb5Config: ""
          servicePrincipalName: ""
          simpleLdapLinkingAllowedRealms: []
        ldap:
          preventSignin: false
          servers: {}
        lfs:
          bucket: git-lfs
          connection: {}
          enabled: true
          proxy_download: true
        maxRequestDurationSeconds: null
        microsoft_graph_mailer:
          azure_ad_endpoint: https://login.microsoftonline.com
          client_id: ""
          client_secret:
            key: secret
            secret: ""
          enabled: false
          graph_endpoint: https://graph.microsoft.com
          tenant: ""
          user_id: ""
        object_store:
          connection: {}
          enabled: false
          proxy_download: true
          storage_options: {}
        omniauth:
          allowBypassTwoFactor: []
          allowSingleSignOn:
          - saml
          autoLinkLdapUser: false
          autoLinkSamlUser: false
          autoLinkUser: []
          autoSignInWithProvider: null
          blockAutoCreatedUsers: true
          enabled: false
          externalProviders: []
          providers: []
          syncProfileAttributes:
          - email
          syncProfileFromProvider: []
        packages:
          bucket: gitlab-packages
          connection: {}
          enabled: true
          proxy_download: true
        sentry:
          clientside_dsn: null
          dsn: null
          enabled: false
          environment: null
        serviceDeskEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        sidekiq:
          routingRules: []
        smartcard:
          CASecret: null
          clientCertificateRequiredHost: null
          enabled: false
          requiredForGitAccess: false
          sanExtensions: false
        suggested_reviewers: {}
        terraformState:
          bucket: gitlab-terraform-state
          connection: {}
          enabled: false
        uploads:
          bucket: gitlab-uploads
          connection: {}
          enabled: true
          proxy_download: true
        usernameChangingEnabled: true
        webhookTimeout: null
      application:
        allowClusterRoles: true
        create: false
        links: []
      batch:
        cronJob:
          apiVersion: ""
      certificates:
        customCAs: []
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/certificates
      clickhouse:
        enabled: false
      common:
        labels: {}
      communityImages:
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ce
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ce
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ce
      deployment:
        annotations: {}
      edition: ee
      email:
        display_name: GitLab
        from: ""
        reply_to: ""
        smime:
          certName: tls.crt
          enabled: false
          keyName: tls.key
          secretName: ""
        subject_suffix: ""
      enterpriseImages:
        geo-logcursor:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-geo-logcursor
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ee
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ee
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ee
      extraEnv: {}
      extraEnvFrom: {}
      geo:
        enabled: false
        nodeName: null
        psql:
          password: {}
        registry:
          replication:
            enabled: false
            primaryApiUrl: null
        role: primary
      gitaly:
        authToken: {}
        enabled: true
        external: []
        hooks: {}
        internal:
          names:
          - default
        service:
          externalPort: 8075
          internalPort: 8075
          name: gitaly
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
      gitlab:
        license: {}
      gitlabBase:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
      gitlabVersion: 17.8.1
      hosts:
        domain: localhost
        externalIP: null
        gitlab: {}
        hostSuffix: null
        https: false
        kas: {}
        minio: {}
        pages: {}
        registry: {}
        smartcard: {}
        ssh: null
        tls: {}
      hpa:
        apiVersion: ""
      image: {}
      ingress:
        annotations: {}
        apiVersion: ""
        class: nginx
        configureCertmanager: false
        enabled: true
        path: /
        pathType: Prefix
        provider: nginx
        tls:
          enabled: false
        useNewIngressForCerts: false
      initialRootPassword: {}
      job:
        nameSuffixOverride: null
      kas:
        enabled: true
        service:
          apiExternalPort: 8153
        tls:
          enabled: false
          verify: true
      keda:
        enabled: false
      kubectl:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
        securityContext:
          fsGroup: 65534
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
      minio:
        credentials: {}
        enabled: true
      monitoring:
        enabled: false
      nodeAffinity: null
      oauth:
        gitlab-pages: {}
      pages:
        accessControl: false
        apiSecret: {}
        artifactsServer: true
        authSecret: {}
        enabled: false
        externalHttp: []
        externalHttps: []
        host: null
        https: null
        localStore:
          enabled: false
        namespaceInPath: false
        objectStore:
          bucket: gitlab-pages
          connection: {}
          enabled: true
        path: null
        port: null
      pdb:
        apiVersion: ""
      pod:
        labels: {}
      praefect:
        authToken: {}
        autoMigrate: true
        dbSecret: {}
        enabled: false
        ntpHost: pool.ntp.org
        psql:
          sslMode: disable
        replaceInternalGitaly: true
        service:
          externalPort: 8075
          internalPort: 8075
          name: praefect
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
        virtualStorages:
        - gitalyReplicas: 3
          maxUnavailable: 1
          name: default
      priorityClassName: ""
      psql:
        ci: {}
        connectTimeout: null
        keepalives: null
        keepalivesCount: null
        keepalivesIdle: null
        keepalivesInterval: null
        knownDecompositions:
        - main
        - ci
        - embedding
        main: {}
        password: {}
        tcpUserTimeout: null
      rails:
        bootsnap:
          enabled: false
        sessionStore:
          sessionCookieTokenPrefix: ""
      railsSecrets: {}
      redis:
        auth:
          enabled: true
        sentinelAuth:
          enabled: false
      registry:
        api:
          port: 5000
          protocol: http
          serviceName: registry
        bucket: registry
        certificate: {}
        enabled: true
        host: null
        httpSecret: {}
        notificationSecret: {}
        notifications: {}
        redis:
          cache:
            password: {}
          rateLimiting:
            password: {}
        tls:
          enabled: false
        tokenIssuer: gitlab-issuer
      runner:
        registrationToken: {}
      service:
        annotations: {}
        labels: {}
        ports:
          metrics: 30505
          webservice: 30305
          workhorse: 30405
        type: NodePort
      serviceAccount:
        annotations: {}
        automountServiceAccountToken: false
        create: true
        enabled: false
      shell:
        authToken: {}
        hostKeys: {}
        tcp:
          proxyProtocol: false
      smtp:
        address: smtp.mailgun.org
        authentication: plain
        enabled: false
        open_timeout: 30
        openssl_verify_mode: peer
        password:
          key: password
          secret: ""
        pool: false
        port: 2525
        read_timeout: 60
        starttls_auto: false
        user_name: ""
      spamcheck:
        enabled: false
      time_zone: UTC
      tracing:
        connection:
          string: ""
        urlTemplate: ""
      traefik:
        apiVersion: ""
      webservice:
        workerTimeout: 60
      workhorse:
        serviceName: webservice-default
        tls:
          enabled: false
      zoekt:
        gateway:
          basicAuth: {}
        indexer:
          internalApi: {}
    gomemlimit:
      enabled: true
    gpgSigning: {}
    gracefulRestartTimeout: 25
    image:
      repository: registry.gitlab.com/gitlab-org/build/cng/gitaly
    init:
      containerSecurityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        runAsNonRoot: true
      image: {}
      resources:
        requests:
          cpu: 50m
    internal: {}
    logging:
      format: json
    maxUnavailable: 1
    metrics:
      enabled: true
      path: /metrics
      port: 9236
      serviceMonitor:
        additionalLabels: {}
        enabled: false
        endpointConfig: {}
    packObjectsCache: {}
    persistence:
      accessMode: ReadWriteOnce
      annotations: {}
      enabled: true
      labels: {}
      matchExpressions: []
      matchLabels: {}
      size: 50Gi
      subPath: ""
    podLabels: {}
    prometheus: {}
    resources:
      requests:
        cpu: 100m
        memory: 200Mi
    securityContext:
      fsGroup: 1000
      runAsUser: 1000
    service:
      clusterIP: None
      tls: {}
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: false
      enabled: false
    serviceLabels: {}
    shareProcessNamespace: false
    shell:
      authToken: {}
      concurrency: []
    statefulset:
      livenessProbe:
        failureThreshold: 3
        initialDelaySeconds: 0
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 3
      readinessProbe:
        failureThreshold: 3
        initialDelaySeconds: 0
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 3
      startupProbe:
        enabled: true
        failureThreshold: 60
        initialDelaySeconds: 1
        periodSeconds: 1
        successThreshold: 1
        timeoutSeconds: 1
      strategy: {}
    tolerations: []
    workhorse: {}
  gitlab-exporter:
    affinity:
      nodeAffinity: {}
      podAntiAffinity: {}
    annotations: {}
    common:
      labels: {}
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      runAsNonRoot: true
      runAsUser: 1000
    deployment:
      strategy: {}
    enabled: true
    extraEnv:
      MALLOC_CONF: dirty_decay_ms:0,muzzy_decay_ms:0
      RUBY_GC_HEAP_FREE_SLOTS_MAX_RATIO: 0.111
      RUBY_GC_HEAP_FREE_SLOTS_MIN_RATIO: 0.055
      RUBY_GC_HEAP_INIT_SLOTS: 80000
    global:
      affinity:
        nodeAffinity:
          key: topology.kubernetes.io/zone
          values: []
        podAntiAffinity:
          topologyKey: kubernetes.io/hostname
      antiAffinity: soft
      appConfig:
        applicationSettingsCacheSeconds: 60
        artifacts:
          bucket: gitlab-artifacts
          connection: {}
          enabled: true
          proxy_download: true
        backups:
          bucket: gitlab-backups
          tmpBucket: tmp
        ciSecureFiles:
          bucket: gitlab-ci-secure-files
          connection: {}
          enabled: false
        contentSecurityPolicy:
          enabled: false
          report_only: true
        cron_jobs: {}
        defaultColorMode: null
        defaultProjectsFeatures:
          builds: true
          issues: true
          mergeRequests: true
          snippets: true
          wiki: true
        defaultSyntaxHighlightingTheme: null
        defaultTheme: null
        dependencyProxy:
          bucket: gitlab-dependency-proxy
          connection: {}
          enabled: false
          proxy_download: true
        duoAuth:
          enabled: false
        enableImpersonation: null
        enableSeatLink: true
        enableUsagePing: true
        externalDiffs:
          bucket: gitlab-mr-diffs
          connection: {}
          enabled: false
          proxy_download: true
          when: null
        extra:
          bizible: null
          googleAnalyticsId: null
          googleTagManagerNonceId: null
          matomoDisableCookies: null
          matomoSiteId: null
          matomoUrl: null
          oneTrustId: null
        gitlab_docs:
          enabled: false
          host: ""
        gitlab_kas: {}
        graphQlTimeout: null
        gravatar:
          plainUrl: null
          sslUrl: null
        incomingEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        initialDefaults: {}
        issueClosingPattern: null
        kerberos:
          dedicatedPort:
            enabled: false
            https: true
            port: 8443
          enabled: false
          keytab:
            key: keytab
          krb5Config: ""
          servicePrincipalName: ""
          simpleLdapLinkingAllowedRealms: []
        ldap:
          preventSignin: false
          servers: {}
        lfs:
          bucket: git-lfs
          connection: {}
          enabled: true
          proxy_download: true
        maxRequestDurationSeconds: null
        microsoft_graph_mailer:
          azure_ad_endpoint: https://login.microsoftonline.com
          client_id: ""
          client_secret:
            key: secret
            secret: ""
          enabled: false
          graph_endpoint: https://graph.microsoft.com
          tenant: ""
          user_id: ""
        object_store:
          connection: {}
          enabled: false
          proxy_download: true
          storage_options: {}
        omniauth:
          allowBypassTwoFactor: []
          allowSingleSignOn:
          - saml
          autoLinkLdapUser: false
          autoLinkSamlUser: false
          autoLinkUser: []
          autoSignInWithProvider: null
          blockAutoCreatedUsers: true
          enabled: false
          externalProviders: []
          providers: []
          syncProfileAttributes:
          - email
          syncProfileFromProvider: []
        packages:
          bucket: gitlab-packages
          connection: {}
          enabled: true
          proxy_download: true
        sentry:
          clientside_dsn: null
          dsn: null
          enabled: false
          environment: null
        serviceDeskEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        sidekiq:
          routingRules: []
        smartcard:
          CASecret: null
          clientCertificateRequiredHost: null
          enabled: false
          requiredForGitAccess: false
          sanExtensions: false
        suggested_reviewers: {}
        terraformState:
          bucket: gitlab-terraform-state
          connection: {}
          enabled: false
        uploads:
          bucket: gitlab-uploads
          connection: {}
          enabled: true
          proxy_download: true
        usernameChangingEnabled: true
        webhookTimeout: null
      application:
        allowClusterRoles: true
        create: false
        links: []
      batch:
        cronJob:
          apiVersion: ""
      certificates:
        customCAs: []
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/certificates
      clickhouse:
        enabled: false
      common:
        labels: {}
      communityImages:
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ce
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ce
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ce
      deployment:
        annotations: {}
      edition: ee
      email:
        display_name: GitLab
        from: ""
        reply_to: ""
        smime:
          certName: tls.crt
          enabled: false
          keyName: tls.key
          secretName: ""
        subject_suffix: ""
      enterpriseImages:
        geo-logcursor:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-geo-logcursor
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ee
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ee
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ee
      extraEnv: {}
      extraEnvFrom: {}
      geo:
        enabled: false
        nodeName: null
        psql:
          password: {}
        registry:
          replication:
            enabled: false
            primaryApiUrl: null
        role: primary
      gitaly:
        authToken: {}
        enabled: true
        external: []
        internal:
          names:
          - default
        service:
          externalPort: 8075
          internalPort: 8075
          name: gitaly
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
      gitlab:
        license: {}
      gitlabBase:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
      gitlabVersion: 17.8.1
      hosts:
        domain: localhost
        externalIP: null
        gitlab: {}
        hostSuffix: null
        https: false
        kas: {}
        minio: {}
        pages: {}
        registry: {}
        smartcard: {}
        ssh: null
        tls: {}
      hpa:
        apiVersion: ""
      image: {}
      ingress:
        annotations: {}
        apiVersion: ""
        class: nginx
        configureCertmanager: false
        enabled: true
        path: /
        pathType: Prefix
        provider: nginx
        tls:
          enabled: false
        useNewIngressForCerts: false
      initialRootPassword: {}
      job:
        nameSuffixOverride: null
      kas:
        enabled: true
        service:
          apiExternalPort: 8153
        tls:
          enabled: false
          verify: true
      keda:
        enabled: false
      kubectl:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
        securityContext:
          fsGroup: 65534
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
      minio:
        credentials: {}
        enabled: true
      monitoring:
        enabled: false
      nodeAffinity: null
      oauth:
        gitlab-pages: {}
      pages:
        accessControl: false
        apiSecret: {}
        artifactsServer: true
        authSecret: {}
        enabled: false
        externalHttp: []
        externalHttps: []
        host: null
        https: null
        localStore:
          enabled: false
        namespaceInPath: false
        objectStore:
          bucket: gitlab-pages
          connection: {}
          enabled: true
        path: null
        port: null
      pdb:
        apiVersion: ""
      pod:
        labels: {}
      praefect:
        authToken: {}
        autoMigrate: true
        dbSecret: {}
        enabled: false
        ntpHost: pool.ntp.org
        psql:
          sslMode: disable
        replaceInternalGitaly: true
        service:
          externalPort: 8075
          internalPort: 8075
          name: praefect
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
        virtualStorages:
        - gitalyReplicas: 3
          maxUnavailable: 1
          name: default
      priorityClassName: ""
      psql:
        ci: {}
        connectTimeout: null
        keepalives: null
        keepalivesCount: null
        keepalivesIdle: null
        keepalivesInterval: null
        knownDecompositions:
        - main
        - ci
        - embedding
        main: {}
        password: {}
        tcpUserTimeout: null
      rails:
        bootsnap:
          enabled: false
        sessionStore:
          sessionCookieTokenPrefix: ""
      railsSecrets: {}
      redis:
        auth:
          enabled: true
        sentinelAuth:
          enabled: false
      registry:
        api:
          port: 5000
          protocol: http
          serviceName: registry
        bucket: registry
        certificate: {}
        enabled: true
        host: null
        httpSecret: {}
        notificationSecret: {}
        notifications: {}
        redis:
          cache:
            password: {}
          rateLimiting:
            password: {}
        tls:
          enabled: false
        tokenIssuer: gitlab-issuer
      runner:
        registrationToken: {}
      service:
        annotations: {}
        labels: {}
        ports:
          metrics: 30505
          webservice: 30305
          workhorse: 30405
        type: NodePort
      serviceAccount:
        annotations: {}
        automountServiceAccountToken: false
        create: true
        enabled: false
      shell:
        authToken: {}
        hostKeys: {}
        tcp:
          proxyProtocol: false
      smtp:
        address: smtp.mailgun.org
        authentication: plain
        enabled: false
        open_timeout: 30
        openssl_verify_mode: peer
        password:
          key: password
          secret: ""
        pool: false
        port: 2525
        read_timeout: 60
        starttls_auto: false
        user_name: ""
      spamcheck:
        enabled: false
      time_zone: UTC
      tracing:
        connection:
          string: ""
        urlTemplate: ""
      traefik:
        apiVersion: ""
      webservice:
        workerTimeout: 60
      workhorse:
        serviceName: webservice-default
        tls:
          enabled: false
      zoekt:
        gateway:
          basicAuth: {}
        indexer:
          internalApi: {}
    image:
      repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-exporter
    init:
      containerSecurityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        runAsNonRoot: true
      image: {}
      resources:
        requests:
          cpu: 50m
    metrics:
      annotations: {}
      enabled: true
      path: /metrics
      port: 9168
      serviceMonitor:
        additionalLabels: {}
        enabled: false
        endpointConfig: {}
    podLabels: {}
    priorityClassName: ""
    psql: {}
    redis:
      auth: {}
    resources:
      requests:
        cpu: 75m
        memory: 100M
    securityContext:
      fsGroup: 1000
      runAsUser: 1000
      seccompProfile:
        type: RuntimeDefault
    service:
      externalPort: 9168
      internalPort: 9168
      name: gitlab-exporter
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: false
      enabled: false
    serviceLabels: {}
    tls:
      enabled: false
    tolerations: []
  gitlab-runner:
    enabled: false
  gitlab-shell:
    affinity:
      nodeAffinity: {}
      podAntiAffinity: {}
    annotations: {}
    common:
      labels: {}
    config:
      ciphers:
      - aes128-gcm@openssh.com
      - chacha20-poly1305@openssh.com
      - aes256-gcm@openssh.com
      - aes128-ctr
      - aes192-ctr
      - aes256-ctr
      clientAliveInterval: 0
      gssapi:
        enabled: false
        keytab:
          key: keytab
        krb5Config: ""
        libpath: libgssapi_krb5.so.2
        servicePrincipalName: ""
      kexAlgorithms:
      - curve25519-sha256
      - curve25519-sha256@libssh.org
      - ecdh-sha2-nistp256
      - ecdh-sha2-nistp384
      - ecdh-sha2-nistp521
      - diffie-hellman-group14-sha256
      - diffie-hellman-group14-sha1
      lfs:
        pureSSHProtocol: false
      loginGraceTime: 60
      macs:
      - hmac-sha2-256-etm@openssh.com
      - hmac-sha2-512-etm@openssh.com
      - hmac-sha2-256
      - hmac-sha2-512
      - hmac-sha1
      maxStartups:
        full: 100
        rate: 30
        start: 10
      pat:
        allowedScopes: []
        enabled: true
      proxyHeaderTimeout: 500ms
      proxyPolicy: use
      proxyProtocol: false
      publicKeyAlgorithms: []
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      runAsNonRoot: true
      runAsUser: 1000
    deployment:
      livenessProbe:
        failureThreshold: 3
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 3
      readinessProbe:
        failureThreshold: 2
        initialDelaySeconds: 10
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 3
      strategy: {}
      terminationGracePeriodSeconds: 30
    enabled: true
    global:
      affinity:
        nodeAffinity:
          key: topology.kubernetes.io/zone
          values: []
        podAntiAffinity:
          topologyKey: kubernetes.io/hostname
      antiAffinity: soft
      appConfig:
        applicationSettingsCacheSeconds: 60
        artifacts:
          bucket: gitlab-artifacts
          connection: {}
          enabled: true
          proxy_download: true
        backups:
          bucket: gitlab-backups
          tmpBucket: tmp
        ciSecureFiles:
          bucket: gitlab-ci-secure-files
          connection: {}
          enabled: false
        contentSecurityPolicy:
          enabled: false
          report_only: true
        cron_jobs: {}
        defaultColorMode: null
        defaultProjectsFeatures:
          builds: true
          issues: true
          mergeRequests: true
          snippets: true
          wiki: true
        defaultSyntaxHighlightingTheme: null
        defaultTheme: null
        dependencyProxy:
          bucket: gitlab-dependency-proxy
          connection: {}
          enabled: false
          proxy_download: true
        duoAuth:
          enabled: false
        enableImpersonation: null
        enableSeatLink: true
        enableUsagePing: true
        externalDiffs:
          bucket: gitlab-mr-diffs
          connection: {}
          enabled: false
          proxy_download: true
          when: null
        extra:
          bizible: null
          googleAnalyticsId: null
          googleTagManagerNonceId: null
          matomoDisableCookies: null
          matomoSiteId: null
          matomoUrl: null
          oneTrustId: null
        gitlab_docs:
          enabled: false
          host: ""
        gitlab_kas: {}
        graphQlTimeout: null
        gravatar:
          plainUrl: null
          sslUrl: null
        incomingEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        initialDefaults: {}
        issueClosingPattern: null
        kerberos:
          dedicatedPort:
            enabled: false
            https: true
            port: 8443
          enabled: false
          keytab:
            key: keytab
          krb5Config: ""
          servicePrincipalName: ""
          simpleLdapLinkingAllowedRealms: []
        ldap:
          preventSignin: false
          servers: {}
        lfs:
          bucket: git-lfs
          connection: {}
          enabled: true
          proxy_download: true
        maxRequestDurationSeconds: null
        microsoft_graph_mailer:
          azure_ad_endpoint: https://login.microsoftonline.com
          client_id: ""
          client_secret:
            key: secret
            secret: ""
          enabled: false
          graph_endpoint: https://graph.microsoft.com
          tenant: ""
          user_id: ""
        object_store:
          connection: {}
          enabled: false
          proxy_download: true
          storage_options: {}
        omniauth:
          allowBypassTwoFactor: []
          allowSingleSignOn:
          - saml
          autoLinkLdapUser: false
          autoLinkSamlUser: false
          autoLinkUser: []
          autoSignInWithProvider: null
          blockAutoCreatedUsers: true
          enabled: false
          externalProviders: []
          providers: []
          syncProfileAttributes:
          - email
          syncProfileFromProvider: []
        packages:
          bucket: gitlab-packages
          connection: {}
          enabled: true
          proxy_download: true
        sentry:
          clientside_dsn: null
          dsn: null
          enabled: false
          environment: null
        serviceDeskEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        sidekiq:
          routingRules: []
        smartcard:
          CASecret: null
          clientCertificateRequiredHost: null
          enabled: false
          requiredForGitAccess: false
          sanExtensions: false
        suggested_reviewers: {}
        terraformState:
          bucket: gitlab-terraform-state
          connection: {}
          enabled: false
        uploads:
          bucket: gitlab-uploads
          connection: {}
          enabled: true
          proxy_download: true
        usernameChangingEnabled: true
        webhookTimeout: null
      application:
        allowClusterRoles: true
        create: false
        links: []
      batch:
        cronJob:
          apiVersion: ""
      certificates:
        customCAs: []
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/certificates
      clickhouse:
        enabled: false
      common:
        labels: {}
      communityImages:
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ce
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ce
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ce
      deployment:
        annotations: {}
      edition: ee
      email:
        display_name: GitLab
        from: ""
        reply_to: ""
        smime:
          certName: tls.crt
          enabled: false
          keyName: tls.key
          secretName: ""
        subject_suffix: ""
      enterpriseImages:
        geo-logcursor:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-geo-logcursor
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ee
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ee
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ee
      extraEnv: {}
      extraEnvFrom: {}
      geo:
        enabled: false
        nodeName: null
        psql:
          password: {}
        registry:
          replication:
            enabled: false
            primaryApiUrl: null
        role: primary
      gitaly:
        authToken: {}
        enabled: true
        external: []
        internal:
          names:
          - default
        service:
          externalPort: 8075
          internalPort: 8075
          name: gitaly
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
      gitlab:
        license: {}
      gitlabBase:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
      gitlabVersion: 17.8.1
      hosts:
        domain: localhost
        externalIP: null
        gitlab: {}
        hostSuffix: null
        https: false
        kas: {}
        minio: {}
        pages: {}
        registry: {}
        smartcard: {}
        ssh: null
        tls: {}
      hpa:
        apiVersion: ""
      image: {}
      ingress:
        annotations: {}
        apiVersion: ""
        class: nginx
        configureCertmanager: false
        enabled: true
        path: /
        pathType: Prefix
        provider: nginx
        tls:
          enabled: false
        useNewIngressForCerts: false
      initialRootPassword: {}
      job:
        nameSuffixOverride: null
      kas:
        enabled: true
        service:
          apiExternalPort: 8153
        tls:
          enabled: false
          verify: true
      keda:
        enabled: false
      kubectl:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
        securityContext:
          fsGroup: 65534
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
      minio:
        credentials: {}
        enabled: true
      monitoring:
        enabled: false
      nodeAffinity: null
      oauth:
        gitlab-pages: {}
      pages:
        accessControl: false
        apiSecret: {}
        artifactsServer: true
        authSecret: {}
        enabled: false
        externalHttp: []
        externalHttps: []
        host: null
        https: null
        localStore:
          enabled: false
        namespaceInPath: false
        objectStore:
          bucket: gitlab-pages
          connection: {}
          enabled: true
        path: null
        port: null
      pdb:
        apiVersion: ""
      pod:
        labels: {}
      praefect:
        authToken: {}
        autoMigrate: true
        dbSecret: {}
        enabled: false
        ntpHost: pool.ntp.org
        psql:
          sslMode: disable
        replaceInternalGitaly: true
        service:
          externalPort: 8075
          internalPort: 8075
          name: praefect
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
        virtualStorages:
        - gitalyReplicas: 3
          maxUnavailable: 1
          name: default
      priorityClassName: ""
      psql:
        ci: {}
        connectTimeout: null
        keepalives: null
        keepalivesCount: null
        keepalivesIdle: null
        keepalivesInterval: null
        knownDecompositions:
        - main
        - ci
        - embedding
        main: {}
        password: {}
        tcpUserTimeout: null
      rails:
        bootsnap:
          enabled: false
        sessionStore:
          sessionCookieTokenPrefix: ""
      railsSecrets: {}
      redis:
        auth:
          enabled: true
        sentinelAuth:
          enabled: false
      registry:
        api:
          port: 5000
          protocol: http
          serviceName: registry
        bucket: registry
        certificate: {}
        enabled: true
        host: null
        httpSecret: {}
        notificationSecret: {}
        notifications: {}
        redis:
          cache:
            password: {}
          rateLimiting:
            password: {}
        tls:
          enabled: false
        tokenIssuer: gitlab-issuer
      runner:
        registrationToken: {}
      service:
        annotations: {}
        labels: {}
        ports:
          metrics: 30505
          webservice: 30305
          workhorse: 30405
        type: NodePort
      serviceAccount:
        annotations: {}
        automountServiceAccountToken: false
        create: true
        enabled: false
      shell:
        authToken: {}
        hostKeys: {}
        tcp:
          proxyProtocol: false
      smtp:
        address: smtp.mailgun.org
        authentication: plain
        enabled: false
        open_timeout: 30
        openssl_verify_mode: peer
        password:
          key: password
          secret: ""
        pool: false
        port: 2525
        read_timeout: 60
        starttls_auto: false
        user_name: ""
      spamcheck:
        enabled: false
      time_zone: UTC
      tracing:
        connection:
          string: ""
        urlTemplate: ""
      traefik:
        apiVersion: ""
      webservice:
        workerTimeout: 60
      workhorse:
        serviceName: webservice-default
        tls:
          enabled: false
      zoekt:
        gateway:
          basicAuth: {}
        indexer:
          internalApi: {}
    hpa:
      behavior:
        scaleDown:
          stabilizationWindowSeconds: 300
      cpu:
        targetAverageValue: 100m
        targetType: AverageValue
      customMetrics: []
    image:
      repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-shell
    init:
      containerSecurityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        runAsNonRoot: true
      image: {}
      resources:
        requests:
          cpu: 50m
    keda:
      cooldownPeriod: 300
      enabled: false
      pollingInterval: 30
    logging:
      format: json
      sshdLogLevel: ERROR
    maxReplicas: 10
    maxUnavailable: 1
    metrics:
      annotations: {}
      enabled: false
      path: /metrics
      port: 9122
      serviceMonitor:
        additionalLabels: {}
        enabled: false
        endpointConfig: {}
    minReplicas: 2
    networkpolicy:
      annotations: {}
      egress:
        enabled: false
        rules: []
      enabled: false
      ingress:
        enabled: false
        rules: []
    podLabels: {}
    priorityClassName: ""
    resources:
      requests:
        cpu: 0
        memory: 6M
    securityContext:
      fsGroup: 1000
      runAsUser: 1000
      seccompProfile:
        type: RuntimeDefault
    service:
      externalTrafficPolicy: Cluster
      internalPort: 2222
      name: gitlab-shell
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: false
      enabled: false
    serviceLabels: {}
    sshDaemon: openssh
    tolerations: []
    traefik:
      apiVersion: ""
      entrypoint: gitlab-shell
      tcpMiddlewares: []
    workhorse: {}
  global:
    affinity:
      nodeAffinity:
        key: topology.kubernetes.io/zone
        values: []
      podAntiAffinity:
        topologyKey: kubernetes.io/hostname
    antiAffinity: soft
    appConfig:
      applicationSettingsCacheSeconds: 60
      artifacts:
        bucket: gitlab-artifacts
        connection: {}
        enabled: true
        proxy_download: true
      backups:
        bucket: gitlab-backups
        tmpBucket: tmp
      ciSecureFiles:
        bucket: gitlab-ci-secure-files
        connection: {}
        enabled: false
      contentSecurityPolicy:
        enabled: false
        report_only: true
      cron_jobs: {}
      defaultColorMode: null
      defaultProjectsFeatures:
        builds: true
        issues: true
        mergeRequests: true
        snippets: true
        wiki: true
      defaultSyntaxHighlightingTheme: null
      defaultTheme: null
      dependencyProxy:
        bucket: gitlab-dependency-proxy
        connection: {}
        enabled: false
        proxy_download: true
      duoAuth:
        enabled: false
      enableImpersonation: null
      enableSeatLink: true
      enableUsagePing: true
      externalDiffs:
        bucket: gitlab-mr-diffs
        connection: {}
        enabled: false
        proxy_download: true
        when: null
      extra:
        bizible: null
        googleAnalyticsId: null
        googleTagManagerNonceId: null
        matomoDisableCookies: null
        matomoSiteId: null
        matomoUrl: null
        oneTrustId: null
      gitlab_docs:
        enabled: false
        host: ""
      gitlab_kas: {}
      graphQlTimeout: null
      gravatar:
        plainUrl: null
        sslUrl: null
      incomingEmail:
        address: ""
        authToken:
          key: authToken
          secret: ""
        clientSecret:
          key: secret
        deleteAfterDelivery: true
        deliveryMethod: webhook
        enabled: false
        expungeDeleted: false
        host: imap.gmail.com
        idleTimeout: 60
        inboxMethod: imap
        logger:
          logPath: /dev/stdout
        mailbox: inbox
        password:
          key: password
          secret: ""
        pollInterval: 60
        port: 993
        ssl: true
        startTls: false
        user: ""
      initialDefaults: {}
      issueClosingPattern: null
      kerberos:
        dedicatedPort:
          enabled: false
          https: true
          port: 8443
        enabled: false
        keytab:
          key: keytab
        krb5Config: ""
        servicePrincipalName: ""
        simpleLdapLinkingAllowedRealms: []
      ldap:
        preventSignin: false
        servers: {}
      lfs:
        bucket: git-lfs
        connection: {}
        enabled: true
        proxy_download: true
      maxRequestDurationSeconds: null
      microsoft_graph_mailer:
        azure_ad_endpoint: https://login.microsoftonline.com
        client_id: ""
        client_secret:
          key: secret
          secret: ""
        enabled: false
        graph_endpoint: https://graph.microsoft.com
        tenant: ""
        user_id: ""
      object_store:
        connection: {}
        enabled: false
        proxy_download: true
        storage_options: {}
      omniauth:
        allowBypassTwoFactor: []
        allowSingleSignOn:
        - saml
        autoLinkLdapUser: false
        autoLinkSamlUser: false
        autoLinkUser: []
        autoSignInWithProvider: null
        blockAutoCreatedUsers: true
        enabled: false
        externalProviders: []
        providers: []
        syncProfileAttributes:
        - email
        syncProfileFromProvider: []
      packages:
        bucket: gitlab-packages
        connection: {}
        enabled: true
        proxy_download: true
      sentry:
        clientside_dsn: null
        dsn: null
        enabled: false
        environment: null
      serviceDeskEmail:
        address: ""
        authToken:
          key: authToken
          secret: ""
        clientSecret:
          key: secret
        deleteAfterDelivery: true
        deliveryMethod: webhook
        enabled: false
        expungeDeleted: false
        host: imap.gmail.com
        idleTimeout: 60
        inboxMethod: imap
        logger:
          logPath: /dev/stdout
        mailbox: inbox
        password:
          key: password
          secret: ""
        pollInterval: 60
        port: 993
        ssl: true
        startTls: false
        user: ""
      sidekiq:
        routingRules: []
      smartcard:
        CASecret: null
        clientCertificateRequiredHost: null
        enabled: false
        requiredForGitAccess: false
        sanExtensions: false
      suggested_reviewers: {}
      terraformState:
        bucket: gitlab-terraform-state
        connection: {}
        enabled: false
      uploads:
        bucket: gitlab-uploads
        connection: {}
        enabled: true
        proxy_download: true
      usernameChangingEnabled: true
      webhookTimeout: null
    application:
      allowClusterRoles: true
      create: false
      links: []
    batch:
      cronJob:
        apiVersion: ""
    certificates:
      customCAs: []
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/certificates
    clickhouse:
      enabled: false
    common:
      labels: {}
    communityImages:
      migrations:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
      sidekiq:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ce
      toolbox:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
      webservice:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ce
      workhorse:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ce
    deployment:
      annotations: {}
    edition: ee
    email:
      display_name: GitLab
      from: ""
      reply_to: ""
      smime:
        certName: tls.crt
        enabled: false
        keyName: tls.key
        secretName: ""
      subject_suffix: ""
    enterpriseImages:
      geo-logcursor:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-geo-logcursor
      migrations:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
      sidekiq:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ee
      toolbox:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
      webservice:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ee
      workhorse:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ee
    extraEnv: {}
    extraEnvFrom: {}
    geo:
      enabled: false
      nodeName: null
      psql:
        password: {}
      registry:
        replication:
          enabled: false
          primaryApiUrl: null
      role: primary
    gitaly:
      authToken: {}
      enabled: true
      external: []
      internal:
        names:
        - default
      service:
        externalPort: 8075
        internalPort: 8075
        name: gitaly
        tls:
          externalPort: 8076
          internalPort: 8076
        type: ClusterIP
      tls:
        enabled: false
    gitlab:
      license: {}
    gitlabBase:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
    gitlabVersion: 17.8.1
    hosts:
      domain: localhost
      externalIP: null
      gitlab: {}
      hostSuffix: null
      https: false
      kas: {}
      minio: {}
      pages: {}
      registry: {}
      smartcard: {}
      ssh: null
      tls: {}
    hpa:
      apiVersion: ""
    image: {}
    ingress:
      annotations: {}
      apiVersion: ""
      class: nginx
      configureCertmanager: false
      enabled: true
      path: /
      pathType: Prefix
      provider: nginx
      tls:
        enabled: false
      useNewIngressForCerts: false
    initialRootPassword: {}
    job:
      nameSuffixOverride: null
    kas:
      enabled: true
      service:
        apiExternalPort: 8153
      tls:
        enabled: false
        verify: true
    keda:
      enabled: false
    kubectl:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
      securityContext:
        fsGroup: 65534
        runAsUser: 65534
        seccompProfile:
          type: RuntimeDefault
    minio:
      credentials: {}
      enabled: true
    monitoring:
      enabled: false
    nodeAffinity: null
    oauth:
      gitlab-pages: {}
    pages:
      accessControl: false
      apiSecret: {}
      artifactsServer: true
      authSecret: {}
      enabled: false
      externalHttp: []
      externalHttps: []
      host: null
      https: null
      localStore:
        enabled: false
      namespaceInPath: false
      objectStore:
        bucket: gitlab-pages
        connection: {}
        enabled: true
      path: null
      port: null
    pdb:
      apiVersion: ""
    pod:
      labels: {}
    praefect:
      authToken: {}
      autoMigrate: true
      dbSecret: {}
      enabled: false
      ntpHost: pool.ntp.org
      psql:
        sslMode: disable
      replaceInternalGitaly: true
      service:
        externalPort: 8075
        internalPort: 8075
        name: praefect
        tls:
          externalPort: 8076
          internalPort: 8076
        type: ClusterIP
      tls:
        enabled: false
      virtualStorages:
      - gitalyReplicas: 3
        maxUnavailable: 1
        name: default
    priorityClassName: ""
    psql:
      ci: {}
      connectTimeout: null
      keepalives: null
      keepalivesCount: null
      keepalivesIdle: null
      keepalivesInterval: null
      knownDecompositions:
      - main
      - ci
      - embedding
      main: {}
      password: {}
      tcpUserTimeout: null
    rails:
      bootsnap:
        enabled: false
      sessionStore:
        sessionCookieTokenPrefix: ""
    railsSecrets: {}
    redis:
      auth:
        enabled: true
      sentinelAuth:
        enabled: false
    registry:
      api:
        port: 5000
        protocol: http
        serviceName: registry
      bucket: registry
      certificate: {}
      enabled: true
      host: null
      httpSecret: {}
      notificationSecret: {}
      notifications: {}
      redis:
        cache:
          password: {}
        rateLimiting:
          password: {}
      tls:
        enabled: false
      tokenIssuer: gitlab-issuer
    runner:
      registrationToken: {}
    service:
      annotations: {}
      labels: {}
      ports:
        metrics: 30505
        webservice: 30305
        workhorse: 30405
      type: NodePort
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: false
      create: true
      enabled: false
    shell:
      authToken: {}
      hostKeys: {}
      tcp:
        proxyProtocol: false
    smtp:
      address: smtp.mailgun.org
      authentication: plain
      enabled: false
      open_timeout: 30
      openssl_verify_mode: peer
      password:
        key: password
        secret: ""
      pool: false
      port: 2525
      read_timeout: 60
      starttls_auto: false
      user_name: ""
    spamcheck:
      enabled: false
    time_zone: UTC
    tracing:
      connection:
        string: ""
      urlTemplate: ""
    traefik:
      apiVersion: ""
    webservice:
      workerTimeout: 60
    workhorse:
      serviceName: webservice-default
      tls:
        enabled: false
    zoekt:
      gateway:
        basicAuth: {}
      indexer:
        internalApi: {}
  kas:
    affinity:
      nodeAffinity: {}
      podAntiAffinity: {}
    annotations: {}
    common:
      labels: {}
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      runAsNonRoot: true
      runAsUser: 65532
    customConfig: {}
    deployment:
      strategy: {}
      terminationGracePeriodSeconds: 300
    extraEnv: {}
    extraEnvFrom: {}
    global:
      affinity:
        nodeAffinity:
          key: topology.kubernetes.io/zone
          values: []
        podAntiAffinity:
          topologyKey: kubernetes.io/hostname
      antiAffinity: soft
      appConfig:
        applicationSettingsCacheSeconds: 60
        artifacts:
          bucket: gitlab-artifacts
          connection: {}
          enabled: true
          proxy_download: true
        backups:
          bucket: gitlab-backups
          tmpBucket: tmp
        ciSecureFiles:
          bucket: gitlab-ci-secure-files
          connection: {}
          enabled: false
        contentSecurityPolicy:
          enabled: false
          report_only: true
        cron_jobs: {}
        defaultColorMode: null
        defaultProjectsFeatures:
          builds: true
          issues: true
          mergeRequests: true
          snippets: true
          wiki: true
        defaultSyntaxHighlightingTheme: null
        defaultTheme: null
        dependencyProxy:
          bucket: gitlab-dependency-proxy
          connection: {}
          enabled: false
          proxy_download: true
        duoAuth:
          enabled: false
        enableImpersonation: null
        enableSeatLink: true
        enableUsagePing: true
        externalDiffs:
          bucket: gitlab-mr-diffs
          connection: {}
          enabled: false
          proxy_download: true
          when: null
        extra:
          bizible: null
          googleAnalyticsId: null
          googleTagManagerNonceId: null
          matomoDisableCookies: null
          matomoSiteId: null
          matomoUrl: null
          oneTrustId: null
        gitlab_docs:
          enabled: false
          host: ""
        gitlab_kas: {}
        graphQlTimeout: null
        gravatar:
          plainUrl: null
          sslUrl: null
        incomingEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        initialDefaults: {}
        issueClosingPattern: null
        kerberos:
          dedicatedPort:
            enabled: false
            https: true
            port: 8443
          enabled: false
          keytab:
            key: keytab
          krb5Config: ""
          servicePrincipalName: ""
          simpleLdapLinkingAllowedRealms: []
        ldap:
          preventSignin: false
          servers: {}
        lfs:
          bucket: git-lfs
          connection: {}
          enabled: true
          proxy_download: true
        maxRequestDurationSeconds: null
        microsoft_graph_mailer:
          azure_ad_endpoint: https://login.microsoftonline.com
          client_id: ""
          client_secret:
            key: secret
            secret: ""
          enabled: false
          graph_endpoint: https://graph.microsoft.com
          tenant: ""
          user_id: ""
        object_store:
          connection: {}
          enabled: false
          proxy_download: true
          storage_options: {}
        omniauth:
          allowBypassTwoFactor: []
          allowSingleSignOn:
          - saml
          autoLinkLdapUser: false
          autoLinkSamlUser: false
          autoLinkUser: []
          autoSignInWithProvider: null
          blockAutoCreatedUsers: true
          enabled: false
          externalProviders: []
          providers: []
          syncProfileAttributes:
          - email
          syncProfileFromProvider: []
        packages:
          bucket: gitlab-packages
          connection: {}
          enabled: true
          proxy_download: true
        sentry:
          clientside_dsn: null
          dsn: null
          enabled: false
          environment: null
        serviceDeskEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        sidekiq:
          routingRules: []
        smartcard:
          CASecret: null
          clientCertificateRequiredHost: null
          enabled: false
          requiredForGitAccess: false
          sanExtensions: false
        suggested_reviewers: {}
        terraformState:
          bucket: gitlab-terraform-state
          connection: {}
          enabled: false
        uploads:
          bucket: gitlab-uploads
          connection: {}
          enabled: true
          proxy_download: true
        usernameChangingEnabled: true
        webhookTimeout: null
      application:
        allowClusterRoles: true
        create: false
        links: []
      batch:
        cronJob:
          apiVersion: ""
      certificates:
        customCAs: []
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/certificates
      clickhouse:
        enabled: false
      common:
        labels: {}
      communityImages:
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ce
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ce
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ce
      deployment:
        annotations: {}
      edition: ee
      email:
        display_name: GitLab
        from: ""
        reply_to: ""
        smime:
          certName: tls.crt
          enabled: false
          keyName: tls.key
          secretName: ""
        subject_suffix: ""
      enterpriseImages:
        geo-logcursor:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-geo-logcursor
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ee
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ee
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ee
      extraEnv: {}
      extraEnvFrom: {}
      geo:
        enabled: false
        nodeName: null
        psql:
          password: {}
        registry:
          replication:
            enabled: false
            primaryApiUrl: null
        role: primary
      gitaly:
        authToken: {}
        enabled: true
        external: []
        internal:
          names:
          - default
        service:
          externalPort: 8075
          internalPort: 8075
          name: gitaly
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
      gitlab:
        license: {}
      gitlabBase:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
      gitlabVersion: 17.8.1
      hosts:
        domain: localhost
        externalIP: null
        gitlab: {}
        hostSuffix: null
        https: false
        kas: {}
        minio: {}
        pages: {}
        registry: {}
        smartcard: {}
        ssh: null
        tls: {}
      hpa:
        apiVersion: ""
      image: {}
      ingress:
        annotations: {}
        apiVersion: ""
        class: nginx
        configureCertmanager: false
        enabled: true
        path: /
        pathType: Prefix
        provider: nginx
        tls:
          enabled: false
        useNewIngressForCerts: false
      initialRootPassword: {}
      job:
        nameSuffixOverride: null
      kas:
        enabled: true
        service:
          apiExternalPort: 8153
        tls:
          enabled: false
          verify: true
      keda:
        enabled: false
      kubectl:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
        securityContext:
          fsGroup: 65534
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
      minio:
        credentials: {}
        enabled: true
      monitoring:
        enabled: false
      nodeAffinity: null
      oauth:
        gitlab-pages: {}
      pages:
        accessControl: false
        apiSecret: {}
        artifactsServer: true
        authSecret: {}
        enabled: false
        externalHttp: []
        externalHttps: []
        host: null
        https: null
        localStore:
          enabled: false
        namespaceInPath: false
        objectStore:
          bucket: gitlab-pages
          connection: {}
          enabled: true
        path: null
        port: null
      pdb:
        apiVersion: ""
      pod:
        labels: {}
      praefect:
        authToken: {}
        autoMigrate: true
        dbSecret: {}
        enabled: false
        ntpHost: pool.ntp.org
        psql:
          sslMode: disable
        replaceInternalGitaly: true
        service:
          externalPort: 8075
          internalPort: 8075
          name: praefect
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
        virtualStorages:
        - gitalyReplicas: 3
          maxUnavailable: 1
          name: default
      priorityClassName: ""
      psql:
        ci: {}
        connectTimeout: null
        keepalives: null
        keepalivesCount: null
        keepalivesIdle: null
        keepalivesInterval: null
        knownDecompositions:
        - main
        - ci
        - embedding
        main: {}
        password: {}
        tcpUserTimeout: null
      rails:
        bootsnap:
          enabled: false
        sessionStore:
          sessionCookieTokenPrefix: ""
      railsSecrets: {}
      redis:
        auth:
          enabled: true
        sentinelAuth:
          enabled: false
      registry:
        api:
          port: 5000
          protocol: http
          serviceName: registry
        bucket: registry
        certificate: {}
        enabled: true
        host: null
        httpSecret: {}
        notificationSecret: {}
        notifications: {}
        redis:
          cache:
            password: {}
          rateLimiting:
            password: {}
        tls:
          enabled: false
        tokenIssuer: gitlab-issuer
      runner:
        registrationToken: {}
      service:
        annotations: {}
        labels: {}
        ports:
          metrics: 30505
          webservice: 30305
          workhorse: 30405
        type: NodePort
      serviceAccount:
        annotations: {}
        automountServiceAccountToken: false
        create: true
        enabled: false
      shell:
        authToken: {}
        hostKeys: {}
        tcp:
          proxyProtocol: false
      smtp:
        address: smtp.mailgun.org
        authentication: plain
        enabled: false
        open_timeout: 30
        openssl_verify_mode: peer
        password:
          key: password
          secret: ""
        pool: false
        port: 2525
        read_timeout: 60
        starttls_auto: false
        user_name: ""
      spamcheck:
        enabled: false
      time_zone: UTC
      tracing:
        connection:
          string: ""
        urlTemplate: ""
      traefik:
        apiVersion: ""
      webservice:
        workerTimeout: 60
      workhorse:
        serviceName: webservice-default
        tls:
          enabled: false
      zoekt:
        gateway:
          basicAuth: {}
        indexer:
          internalApi: {}
    hpa:
      behavior:
        scaleDown:
          stabilizationWindowSeconds: 300
      cpu:
        targetAverageValue: 100m
        targetType: AverageValue
      customMetrics: []
      safeToEvict: "true"
    image:
      repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-kas
    ingress:
      agentPath: /
      annotations: {}
      k8sApiPath: /k8s-proxy
      tls: {}
    init:
      containerSecurityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        runAsNonRoot: true
      image: {}
      resources:
        requests:
          cpu: 50m
    keda:
      cooldownPeriod: 300
      enabled: false
      pollingInterval: 30
    maxReplicas: 10
    maxUnavailable: 1
    metrics:
      enabled: true
      path: /metrics
      podMonitor:
        additionalLabels: {}
        enabled: false
        endpointConfig: {}
      serviceMonitor:
        additionalLabels: {}
        enabled: false
        endpointConfig: {}
    minReplicas: 2
    networkpolicy:
      annotations: {}
      egress:
        enabled: false
        rules: []
      enabled: false
      ingress:
        enabled: false
        rules: []
    observability:
      livenessProbe:
        path: /liveness
      port: 8151
      readinessProbe:
        path: /readiness
    podLabels: {}
    priorityClassName: ""
    privateApi: {}
    redis:
      enabled: true
    resources:
      requests:
        cpu: 100m
        memory: 100M
    securityContext:
      fsGroup: 65532
      runAsGroup: 65532
      runAsUser: 65532
      seccompProfile:
        type: RuntimeDefault
    service:
      apiInternalPort: 8153
      externalPort: 8150
      internalPort: 8150
      kubernetesApiPort: 8154
      privateApiPort: 8155
      type: ClusterIP
    serviceAccount:
      annotations: {}
      create: false
      enabled: false
    serviceLabels: {}
    tolerations: []
    websocketToken: {}
    workhorse: {}
  mailroom:
    affinity:
      nodeAffinity: {}
      podAntiAffinity: {}
    annotations: {}
    common:
      labels: {}
    containerSecurityContext:
      runAsUser: 1000
    deployment:
      strategy: {}
    enabled: true
    global:
      affinity:
        nodeAffinity:
          key: topology.kubernetes.io/zone
          values: []
        podAntiAffinity:
          topologyKey: kubernetes.io/hostname
      antiAffinity: soft
      appConfig:
        applicationSettingsCacheSeconds: 60
        artifacts:
          bucket: gitlab-artifacts
          connection: {}
          enabled: true
          proxy_download: true
        backups:
          bucket: gitlab-backups
          tmpBucket: tmp
        ciSecureFiles:
          bucket: gitlab-ci-secure-files
          connection: {}
          enabled: false
        contentSecurityPolicy:
          enabled: false
          report_only: true
        cron_jobs: {}
        defaultColorMode: null
        defaultProjectsFeatures:
          builds: true
          issues: true
          mergeRequests: true
          snippets: true
          wiki: true
        defaultSyntaxHighlightingTheme: null
        defaultTheme: null
        dependencyProxy:
          bucket: gitlab-dependency-proxy
          connection: {}
          enabled: false
          proxy_download: true
        duoAuth:
          enabled: false
        enableImpersonation: null
        enableSeatLink: true
        enableUsagePing: true
        externalDiffs:
          bucket: gitlab-mr-diffs
          connection: {}
          enabled: false
          proxy_download: true
          when: null
        extra:
          bizible: null
          googleAnalyticsId: null
          googleTagManagerNonceId: null
          matomoDisableCookies: null
          matomoSiteId: null
          matomoUrl: null
          oneTrustId: null
        gitlab_docs:
          enabled: false
          host: ""
        gitlab_kas: {}
        graphQlTimeout: null
        gravatar:
          plainUrl: null
          sslUrl: null
        incomingEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        initialDefaults: {}
        issueClosingPattern: null
        kerberos:
          dedicatedPort:
            enabled: false
            https: true
            port: 8443
          enabled: false
          keytab:
            key: keytab
          krb5Config: ""
          servicePrincipalName: ""
          simpleLdapLinkingAllowedRealms: []
        ldap:
          preventSignin: false
          servers: {}
        lfs:
          bucket: git-lfs
          connection: {}
          enabled: true
          proxy_download: true
        maxRequestDurationSeconds: null
        microsoft_graph_mailer:
          azure_ad_endpoint: https://login.microsoftonline.com
          client_id: ""
          client_secret:
            key: secret
            secret: ""
          enabled: false
          graph_endpoint: https://graph.microsoft.com
          tenant: ""
          user_id: ""
        object_store:
          connection: {}
          enabled: false
          proxy_download: true
          storage_options: {}
        omniauth:
          allowBypassTwoFactor: []
          allowSingleSignOn:
          - saml
          autoLinkLdapUser: false
          autoLinkSamlUser: false
          autoLinkUser: []
          autoSignInWithProvider: null
          blockAutoCreatedUsers: true
          enabled: false
          externalProviders: []
          providers: []
          syncProfileAttributes:
          - email
          syncProfileFromProvider: []
        packages:
          bucket: gitlab-packages
          connection: {}
          enabled: true
          proxy_download: true
        sentry:
          clientside_dsn: null
          dsn: null
          enabled: false
          environment: null
        serviceDeskEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        sidekiq:
          routingRules: []
        smartcard:
          CASecret: null
          clientCertificateRequiredHost: null
          enabled: false
          requiredForGitAccess: false
          sanExtensions: false
        suggested_reviewers: {}
        terraformState:
          bucket: gitlab-terraform-state
          connection: {}
          enabled: false
        uploads:
          bucket: gitlab-uploads
          connection: {}
          enabled: true
          proxy_download: true
        usernameChangingEnabled: true
        webhookTimeout: null
      application:
        allowClusterRoles: true
        create: false
        links: []
      batch:
        cronJob:
          apiVersion: ""
      certificates:
        customCAs: []
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/certificates
      clickhouse:
        enabled: false
      common:
        labels: {}
      communityImages:
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ce
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ce
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ce
      deployment:
        annotations: {}
      edition: ee
      email:
        display_name: GitLab
        from: ""
        reply_to: ""
        smime:
          certName: tls.crt
          enabled: false
          keyName: tls.key
          secretName: ""
        subject_suffix: ""
      enterpriseImages:
        geo-logcursor:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-geo-logcursor
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ee
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ee
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ee
      extraEnv: {}
      extraEnvFrom: {}
      geo:
        enabled: false
        nodeName: null
        psql:
          password: {}
        registry:
          replication:
            enabled: false
            primaryApiUrl: null
        role: primary
      gitaly:
        authToken: {}
        enabled: true
        external: []
        internal:
          names:
          - default
        service:
          externalPort: 8075
          internalPort: 8075
          name: gitaly
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
      gitlab:
        license: {}
      gitlabBase:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
      gitlabVersion: 17.8.1
      hosts:
        domain: localhost
        externalIP: null
        gitlab: {}
        hostSuffix: null
        https: false
        kas: {}
        minio: {}
        pages: {}
        registry: {}
        smartcard: {}
        ssh: null
        tls: {}
      hpa:
        apiVersion: ""
      image: {}
      ingress:
        annotations: {}
        apiVersion: ""
        class: nginx
        configureCertmanager: false
        enabled: true
        path: /
        pathType: Prefix
        provider: nginx
        tls:
          enabled: false
        useNewIngressForCerts: false
      initialRootPassword: {}
      job:
        nameSuffixOverride: null
      kas:
        enabled: true
        service:
          apiExternalPort: 8153
        tls:
          enabled: false
          verify: true
      keda:
        enabled: false
      kubectl:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
        securityContext:
          fsGroup: 65534
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
      minio:
        credentials: {}
        enabled: true
      monitoring:
        enabled: false
      nodeAffinity: null
      oauth:
        gitlab-pages: {}
      pages:
        accessControl: false
        apiSecret: {}
        artifactsServer: true
        authSecret: {}
        enabled: false
        externalHttp: []
        externalHttps: []
        host: null
        https: null
        localStore:
          enabled: false
        namespaceInPath: false
        objectStore:
          bucket: gitlab-pages
          connection: {}
          enabled: true
        path: null
        port: null
      pdb:
        apiVersion: ""
      pod:
        labels: {}
      praefect:
        authToken: {}
        autoMigrate: true
        dbSecret: {}
        enabled: false
        ntpHost: pool.ntp.org
        psql:
          sslMode: disable
        replaceInternalGitaly: true
        service:
          externalPort: 8075
          internalPort: 8075
          name: praefect
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
        virtualStorages:
        - gitalyReplicas: 3
          maxUnavailable: 1
          name: default
      priorityClassName: ""
      psql:
        ci: {}
        connectTimeout: null
        keepalives: null
        keepalivesCount: null
        keepalivesIdle: null
        keepalivesInterval: null
        knownDecompositions:
        - main
        - ci
        - embedding
        main: {}
        password: {}
        tcpUserTimeout: null
      rails:
        bootsnap:
          enabled: false
        sessionStore:
          sessionCookieTokenPrefix: ""
      railsSecrets: {}
      redis:
        auth:
          enabled: true
        sentinelAuth:
          enabled: false
      registry:
        api:
          port: 5000
          protocol: http
          serviceName: registry
        bucket: registry
        certificate: {}
        enabled: true
        host: null
        httpSecret: {}
        notificationSecret: {}
        notifications: {}
        redis:
          cache:
            password: {}
          rateLimiting:
            password: {}
        tls:
          enabled: false
        tokenIssuer: gitlab-issuer
      runner:
        registrationToken: {}
      service:
        annotations: {}
        labels: {}
        ports:
          metrics: 30505
          webservice: 30305
          workhorse: 30405
        type: NodePort
      serviceAccount:
        annotations: {}
        automountServiceAccountToken: false
        create: true
        enabled: false
      shell:
        authToken: {}
        hostKeys: {}
        tcp:
          proxyProtocol: false
      smtp:
        address: smtp.mailgun.org
        authentication: plain
        enabled: false
        open_timeout: 30
        openssl_verify_mode: peer
        password:
          key: password
          secret: ""
        pool: false
        port: 2525
        read_timeout: 60
        starttls_auto: false
        user_name: ""
      spamcheck:
        enabled: false
      time_zone: UTC
      tracing:
        connection:
          string: ""
        urlTemplate: ""
      traefik:
        apiVersion: ""
      webservice:
        workerTimeout: 60
      workhorse:
        serviceName: webservice-default
        tls:
          enabled: false
      zoekt:
        gateway:
          basicAuth: {}
        indexer:
          internalApi: {}
    hpa:
      behavior:
        scaleDown:
          stabilizationWindowSeconds: 300
      cpu:
        targetAverageUtilization: 75
        targetType: Utilization
      customMetrics: []
      maxReplicas: 2
      minReplicas: 1
    image:
      repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-mailroom
    init:
      containerSecurityContext: {}
      image: {}
      resources:
        requests:
          cpu: 50m
    keda:
      cooldownPeriod: 300
      enabled: false
      pollingInterval: 30
    networkpolicy:
      annotations: {}
      egress:
        enabled: false
        rules: []
      enabled: false
      ingress:
        enabled: false
        rules: []
    podLabels: {}
    priorityClassName: ""
    redis:
      auth: {}
    resources:
      requests:
        cpu: 50m
        memory: 150M
    securityContext:
      fsGroup: 1000
      runAsUser: 1000
    serviceAccount:
      annotations: {}
      create: false
      enabled: false
    tolerations: []
    workhorse: {}
  migrations:
    activeDeadlineSeconds: 3600
    annotations: {}
    backoffLimit: 6
    common:
      labels: {}
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      runAsNonRoot: true
      runAsUser: 1000
    enabled: true
    gitaly:
      authToken: {}
    global:
      affinity:
        nodeAffinity:
          key: topology.kubernetes.io/zone
          values: []
        podAntiAffinity:
          topologyKey: kubernetes.io/hostname
      antiAffinity: soft
      appConfig:
        applicationSettingsCacheSeconds: 60
        artifacts:
          bucket: gitlab-artifacts
          connection: {}
          enabled: true
          proxy_download: true
        backups:
          bucket: gitlab-backups
          tmpBucket: tmp
        ciSecureFiles:
          bucket: gitlab-ci-secure-files
          connection: {}
          enabled: false
        contentSecurityPolicy:
          enabled: false
          report_only: true
        cron_jobs: {}
        defaultColorMode: null
        defaultProjectsFeatures:
          builds: true
          issues: true
          mergeRequests: true
          snippets: true
          wiki: true
        defaultSyntaxHighlightingTheme: null
        defaultTheme: null
        dependencyProxy:
          bucket: gitlab-dependency-proxy
          connection: {}
          enabled: false
          proxy_download: true
        duoAuth:
          enabled: false
        enableImpersonation: null
        enableSeatLink: true
        enableUsagePing: true
        externalDiffs:
          bucket: gitlab-mr-diffs
          connection: {}
          enabled: false
          proxy_download: true
          when: null
        extra:
          bizible: null
          googleAnalyticsId: null
          googleTagManagerNonceId: null
          matomoDisableCookies: null
          matomoSiteId: null
          matomoUrl: null
          oneTrustId: null
        gitlab_docs:
          enabled: false
          host: ""
        gitlab_kas: {}
        graphQlTimeout: null
        gravatar:
          plainUrl: null
          sslUrl: null
        incomingEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        initialDefaults: {}
        issueClosingPattern: null
        kerberos:
          dedicatedPort:
            enabled: false
            https: true
            port: 8443
          enabled: false
          keytab:
            key: keytab
          krb5Config: ""
          servicePrincipalName: ""
          simpleLdapLinkingAllowedRealms: []
        ldap:
          preventSignin: false
          servers: {}
        lfs:
          bucket: git-lfs
          connection: {}
          enabled: true
          proxy_download: true
        maxRequestDurationSeconds: null
        microsoft_graph_mailer:
          azure_ad_endpoint: https://login.microsoftonline.com
          client_id: ""
          client_secret:
            key: secret
            secret: ""
          enabled: false
          graph_endpoint: https://graph.microsoft.com
          tenant: ""
          user_id: ""
        object_store:
          connection: {}
          enabled: false
          proxy_download: true
          storage_options: {}
        omniauth:
          allowBypassTwoFactor: []
          allowSingleSignOn:
          - saml
          autoLinkLdapUser: false
          autoLinkSamlUser: false
          autoLinkUser: []
          autoSignInWithProvider: null
          blockAutoCreatedUsers: true
          enabled: false
          externalProviders: []
          providers: []
          syncProfileAttributes:
          - email
          syncProfileFromProvider: []
        packages:
          bucket: gitlab-packages
          connection: {}
          enabled: true
          proxy_download: true
        sentry:
          clientside_dsn: null
          dsn: null
          enabled: false
          environment: null
        serviceDeskEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        sidekiq:
          routingRules: []
        smartcard:
          CASecret: null
          clientCertificateRequiredHost: null
          enabled: false
          requiredForGitAccess: false
          sanExtensions: false
        suggested_reviewers: {}
        terraformState:
          bucket: gitlab-terraform-state
          connection: {}
          enabled: false
        uploads:
          bucket: gitlab-uploads
          connection: {}
          enabled: true
          proxy_download: true
        usernameChangingEnabled: true
        webhookTimeout: null
      application:
        allowClusterRoles: true
        create: false
        links: []
      batch:
        cronJob:
          apiVersion: ""
      certificates:
        customCAs: []
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/certificates
      clickhouse:
        enabled: false
      common:
        labels: {}
      communityImages:
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ce
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ce
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ce
      deployment:
        annotations: {}
      edition: ee
      email:
        display_name: GitLab
        from: ""
        reply_to: ""
        smime:
          certName: tls.crt
          enabled: false
          keyName: tls.key
          secretName: ""
        subject_suffix: ""
      enterpriseImages:
        geo-logcursor:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-geo-logcursor
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ee
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ee
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ee
      extraEnv: {}
      extraEnvFrom: {}
      geo:
        enabled: false
        nodeName: null
        psql:
          password: {}
        registry:
          replication:
            enabled: false
            primaryApiUrl: null
        role: primary
      gitaly:
        authToken: {}
        enabled: true
        external: []
        internal:
          names:
          - default
        service:
          externalPort: 8075
          internalPort: 8075
          name: gitaly
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
      gitlab:
        license: {}
      gitlabBase:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
      gitlabVersion: 17.8.1
      hosts:
        domain: localhost
        externalIP: null
        gitlab: {}
        hostSuffix: null
        https: false
        kas: {}
        minio: {}
        pages: {}
        registry: {}
        smartcard: {}
        ssh: null
        tls: {}
      hpa:
        apiVersion: ""
      image: {}
      ingress:
        annotations: {}
        apiVersion: ""
        class: nginx
        configureCertmanager: false
        enabled: true
        path: /
        pathType: Prefix
        provider: nginx
        tls:
          enabled: false
        useNewIngressForCerts: false
      initialRootPassword: {}
      job:
        nameSuffixOverride: null
      kas:
        enabled: true
        service:
          apiExternalPort: 8153
        tls:
          enabled: false
          verify: true
      keda:
        enabled: false
      kubectl:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
        securityContext:
          fsGroup: 65534
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
      minio:
        credentials: {}
        enabled: true
      monitoring:
        enabled: false
      nodeAffinity: null
      oauth:
        gitlab-pages: {}
      pages:
        accessControl: false
        apiSecret: {}
        artifactsServer: true
        authSecret: {}
        enabled: false
        externalHttp: []
        externalHttps: []
        host: null
        https: null
        localStore:
          enabled: false
        namespaceInPath: false
        objectStore:
          bucket: gitlab-pages
          connection: {}
          enabled: true
        path: null
        port: null
      pdb:
        apiVersion: ""
      pod:
        labels: {}
      praefect:
        authToken: {}
        autoMigrate: true
        dbSecret: {}
        enabled: false
        ntpHost: pool.ntp.org
        psql:
          sslMode: disable
        replaceInternalGitaly: true
        service:
          externalPort: 8075
          internalPort: 8075
          name: praefect
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
        virtualStorages:
        - gitalyReplicas: 3
          maxUnavailable: 1
          name: default
      priorityClassName: ""
      psql:
        ci: {}
        connectTimeout: null
        keepalives: null
        keepalivesCount: null
        keepalivesIdle: null
        keepalivesInterval: null
        knownDecompositions:
        - main
        - ci
        - embedding
        main: {}
        password: {}
        tcpUserTimeout: null
      rails:
        bootsnap:
          enabled: false
        sessionStore:
          sessionCookieTokenPrefix: ""
      railsSecrets: {}
      redis:
        auth:
          enabled: true
        sentinelAuth:
          enabled: false
      registry:
        api:
          port: 5000
          protocol: http
          serviceName: registry
        bucket: registry
        certificate: {}
        enabled: true
        host: null
        httpSecret: {}
        notificationSecret: {}
        notifications: {}
        redis:
          cache:
            password: {}
          rateLimiting:
            password: {}
        tls:
          enabled: false
        tokenIssuer: gitlab-issuer
      runner:
        registrationToken: {}
      service:
        annotations: {}
        labels: {}
        ports:
          metrics: 30505
          webservice: 30305
          workhorse: 30405
        type: NodePort
      serviceAccount:
        annotations: {}
        automountServiceAccountToken: false
        create: true
        enabled: false
      shell:
        authToken: {}
        hostKeys: {}
        tcp:
          proxyProtocol: false
      smtp:
        address: smtp.mailgun.org
        authentication: plain
        enabled: false
        open_timeout: 30
        openssl_verify_mode: peer
        password:
          key: password
          secret: ""
        pool: false
        port: 2525
        read_timeout: 60
        starttls_auto: false
        user_name: ""
      spamcheck:
        enabled: false
      time_zone: UTC
      tracing:
        connection:
          string: ""
        urlTemplate: ""
      traefik:
        apiVersion: ""
      webservice:
        workerTimeout: 60
      workhorse:
        serviceName: webservice-default
        tls:
          enabled: false
      zoekt:
        gateway:
          basicAuth: {}
        indexer:
          internalApi: {}
    image: {}
    init:
      containerSecurityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        runAsNonRoot: true
      image: {}
      resources:
        requests:
          cpu: 50m
    initialRootPassword: {}
    podAnnotations: {}
    podLabels: {}
    priorityClassName: ""
    psql: {}
    redis:
      auth: {}
    resources:
      requests:
        cpu: 250m
        memory: 200Mi
    securityContext:
      fsGroup: 1000
      runAsUser: 1000
      seccompProfile:
        type: RuntimeDefault
    serviceAccount:
      annotations: {}
      create: false
      enabled: false
    tolerations: []
  sidekiq:
    affinity:
      podAntiAffinity: {}
    annotations: {}
    common:
      labels: {}
    concurrency: 20
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      runAsNonRoot: true
      runAsUser: 1000
    deployment:
      strategy: {}
      terminationGracePeriodSeconds: 30
    enabled: true
    extra: {}
    extraEnv: {}
    gitaly:
      authToken: {}
    global:
      affinity:
        nodeAffinity:
          key: topology.kubernetes.io/zone
          values: []
        podAntiAffinity:
          topologyKey: kubernetes.io/hostname
      antiAffinity: soft
      appConfig:
        applicationSettingsCacheSeconds: 60
        artifacts:
          bucket: gitlab-artifacts
          connection: {}
          enabled: true
          proxy_download: true
        backups:
          bucket: gitlab-backups
          tmpBucket: tmp
        ciSecureFiles:
          bucket: gitlab-ci-secure-files
          connection: {}
          enabled: false
        contentSecurityPolicy:
          enabled: false
          report_only: true
        cron_jobs: {}
        defaultColorMode: null
        defaultProjectsFeatures:
          builds: true
          issues: true
          mergeRequests: true
          snippets: true
          wiki: true
        defaultSyntaxHighlightingTheme: null
        defaultTheme: null
        dependencyProxy:
          bucket: gitlab-dependency-proxy
          connection: {}
          enabled: false
          proxy_download: true
        duoAuth:
          enabled: false
        enableImpersonation: null
        enableSeatLink: true
        enableUsagePing: true
        externalDiffs:
          bucket: gitlab-mr-diffs
          connection: {}
          enabled: false
          proxy_download: true
          when: null
        extra:
          bizible: null
          googleAnalyticsId: null
          googleTagManagerNonceId: null
          matomoDisableCookies: null
          matomoSiteId: null
          matomoUrl: null
          oneTrustId: null
        gitlab_docs:
          enabled: false
          host: ""
        gitlab_kas: {}
        graphQlTimeout: null
        gravatar:
          plainUrl: null
          sslUrl: null
        incomingEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        initialDefaults: {}
        issueClosingPattern: null
        kerberos:
          dedicatedPort:
            enabled: false
            https: true
            port: 8443
          enabled: false
          keytab:
            key: keytab
          krb5Config: ""
          servicePrincipalName: ""
          simpleLdapLinkingAllowedRealms: []
        ldap:
          preventSignin: false
          servers: {}
        lfs:
          bucket: git-lfs
          connection: {}
          enabled: true
          proxy_download: true
        maxRequestDurationSeconds: null
        microsoft_graph_mailer:
          azure_ad_endpoint: https://login.microsoftonline.com
          client_id: ""
          client_secret:
            key: secret
            secret: ""
          enabled: false
          graph_endpoint: https://graph.microsoft.com
          tenant: ""
          user_id: ""
        object_store:
          connection: {}
          enabled: false
          proxy_download: true
          storage_options: {}
        omniauth:
          allowBypassTwoFactor: []
          allowSingleSignOn:
          - saml
          autoLinkLdapUser: false
          autoLinkSamlUser: false
          autoLinkUser: []
          autoSignInWithProvider: null
          blockAutoCreatedUsers: true
          enabled: false
          externalProviders: []
          providers: []
          syncProfileAttributes:
          - email
          syncProfileFromProvider: []
        packages:
          bucket: gitlab-packages
          connection: {}
          enabled: true
          proxy_download: true
        sentry:
          clientside_dsn: null
          dsn: null
          enabled: false
          environment: null
        serviceDeskEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        sidekiq:
          routingRules: []
        smartcard:
          CASecret: null
          clientCertificateRequiredHost: null
          enabled: false
          requiredForGitAccess: false
          sanExtensions: false
        suggested_reviewers: {}
        terraformState:
          bucket: gitlab-terraform-state
          connection: {}
          enabled: false
        uploads:
          bucket: gitlab-uploads
          connection: {}
          enabled: true
          proxy_download: true
        usernameChangingEnabled: true
        webhookTimeout: null
      application:
        allowClusterRoles: true
        create: false
        links: []
      batch:
        cronJob:
          apiVersion: ""
      certificates:
        customCAs: []
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/certificates
      clickhouse:
        enabled: false
      common:
        labels: {}
      communityImages:
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ce
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ce
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ce
      deployment:
        annotations: {}
      edition: ee
      email:
        display_name: GitLab
        from: ""
        reply_to: ""
        smime:
          certName: tls.crt
          enabled: false
          keyName: tls.key
          secretName: ""
        subject_suffix: ""
      enterpriseImages:
        geo-logcursor:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-geo-logcursor
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ee
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ee
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ee
      extraEnv: {}
      extraEnvFrom: {}
      geo:
        enabled: false
        nodeName: null
        psql:
          password: {}
        registry:
          replication:
            enabled: false
            primaryApiUrl: null
        role: primary
      gitaly:
        authToken: {}
        enabled: true
        external: []
        internal:
          names:
          - default
        service:
          externalPort: 8075
          internalPort: 8075
          name: gitaly
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
      gitlab:
        license: {}
      gitlabBase:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
      gitlabVersion: 17.8.1
      hosts:
        domain: localhost
        externalIP: null
        gitlab: {}
        https: false
        kas: {}
        minio: {}
        pages: {}
        registry: {}
        smartcard: {}
        ssh: null
        tls: {}
      hpa:
        apiVersion: ""
      image: {}
      ingress:
        annotations: {}
        apiVersion: ""
        class: nginx
        configureCertmanager: false
        enabled: true
        path: /
        pathType: Prefix
        provider: nginx
        tls:
          enabled: false
        useNewIngressForCerts: false
      initialRootPassword: {}
      job:
        nameSuffixOverride: null
      kas:
        enabled: true
        service:
          apiExternalPort: 8153
        tls:
          enabled: false
          verify: true
      keda:
        enabled: false
      kubectl:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
        securityContext:
          fsGroup: 65534
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
      minio:
        credentials: {}
        enabled: true
      monitoring:
        enabled: false
      nodeAffinity: null
      oauth:
        gitlab-pages: {}
      pages:
        accessControl: false
        apiSecret: {}
        artifactsServer: true
        authSecret: {}
        enabled: false
        externalHttp: []
        externalHttps: []
        host: null
        https: null
        localStore:
          enabled: false
        namespaceInPath: false
        objectStore:
          bucket: gitlab-pages
          connection: {}
          enabled: true
        path: null
        port: null
      pdb:
        apiVersion: ""
      pod:
        labels: {}
      praefect:
        authToken: {}
        autoMigrate: true
        dbSecret: {}
        enabled: false
        ntpHost: pool.ntp.org
        psql:
          sslMode: disable
        replaceInternalGitaly: true
        service:
          externalPort: 8075
          internalPort: 8075
          name: praefect
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
        virtualStorages:
        - gitalyReplicas: 3
          maxUnavailable: 1
          name: default
      priorityClassName: ""
      psql:
        ci: {}
        connectTimeout: null
        keepalives: null
        keepalivesCount: null
        keepalivesIdle: null
        keepalivesInterval: null
        knownDecompositions:
        - main
        - ci
        - embedding
        main: {}
        password: {}
        tcpUserTimeout: null
      rails:
        bootsnap:
          enabled: false
        sessionStore:
          sessionCookieTokenPrefix: ""
      railsSecrets: {}
      redis:
        auth:
          enabled: true
        sentinelAuth:
          enabled: false
      registry:
        api:
          port: 5000
          protocol: http
          serviceName: registry
        bucket: registry
        certificate: {}
        enabled: true
        host: null
        httpSecret: {}
        notificationSecret: {}
        notifications: {}
        redis:
          cache:
            password: {}
          rateLimiting:
            password: {}
        tls:
          enabled: false
        tokenIssuer: gitlab-issuer
      runner:
        registrationToken: {}
      service:
        annotations: {}
        labels: {}
        ports:
          metrics: 30505
          webservice: 30305
          workhorse: 30405
        type: NodePort
      serviceAccount:
        annotations: {}
        automountServiceAccountToken: false
        create: true
        enabled: false
      shell:
        authToken: {}
        hostKeys: {}
        tcp:
          proxyProtocol: false
      smtp:
        address: smtp.mailgun.org
        authentication: plain
        enabled: false
        open_timeout: 30
        openssl_verify_mode: peer
        password:
          key: password
          secret: ""
        pool: false
        port: 2525
        read_timeout: 60
        starttls_auto: false
        user_name: ""
      spamcheck:
        enabled: false
      time_zone: UTC
      tracing:
        connection:
          string: ""
        urlTemplate: ""
      traefik:
        apiVersion: ""
      webservice:
        workerTimeout: 60
      workhorse:
        serviceName: webservice-default
        tls:
          enabled: false
      zoekt:
        gateway:
          basicAuth: {}
        indexer:
          internalApi: {}
    health_checks:
      port: 3808
    hpa:
      behavior:
        scaleDown:
          stabilizationWindowSeconds: 300
      cpu:
        targetAverageValue: 350m
        targetType: AverageValue
      customMetrics: []
    image: {}
    init:
      containerSecurityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        runAsNonRoot: true
        runAsUser: 1000
      image: {}
      resources:
        requests:
          cpu: 50m
    keda:
      cooldownPeriod: 300
      enabled: false
      pollingInterval: 30
    livenessProbe:
      failureThreshold: 3
      initialDelaySeconds: 20
      periodSeconds: 60
      successThreshold: 1
      timeoutSeconds: 30
    logging:
      format: json
    maxReplicas: 10
    maxUnavailable: 1
    memoryKiller:
      checkInterval: 3
      daemonMode: true
      graceTime: 900
      maxRss: 2000000
      shutdownWait: 30
    metrics:
      annotations: {}
      enabled: true
      log_enabled: false
      path: /metrics
      podMonitor:
        additionalLabels: {}
        enabled: false
        endpointConfig: {}
      port: 3807
      tls:
        enabled: false
    minReplicas: 1
    minio:
      port: 9000
      serviceName: minio-svc
    networkpolicy:
      annotations: {}
      egress:
        enabled: false
        rules: []
      enabled: false
      ingress:
        enabled: false
        rules: []
    podLabels: {}
    pods:
    - name: all-in-1
    priorityClassName: ""
    psql: {}
    rack_attack:
      git_basic_auth:
        enabled: false
    readinessProbe:
      failureThreshold: 3
      initialDelaySeconds: 0
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 2
    redis:
      auth: {}
    resources:
      requests:
        cpu: 900m
        memory: 2G
    securityContext:
      fsGroup: 1000
      runAsUser: 1000
      seccompProfile:
        type: RuntimeDefault
    serviceAccount:
      annotations: {}
      create: false
      enabled: false
    timeout: 25
    tolerations: []
    trusted_proxies: []
  spamcheck:
    affinity:
      nodeAffinity: {}
      podAntiAffinity: {}
    annotations: {}
    common:
      labels: {}
    deployment:
      livenessProbe:
        failureThreshold: 3
        initialDelaySeconds: 20
        periodSeconds: 60
        successThreshold: 1
        timeoutSeconds: 30
      readinessProbe:
        failureThreshold: 3
        initialDelaySeconds: 0
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 2
      strategy: {}
    global:
      affinity:
        nodeAffinity:
          key: topology.kubernetes.io/zone
          values: []
        podAntiAffinity:
          topologyKey: kubernetes.io/hostname
      antiAffinity: soft
      appConfig:
        applicationSettingsCacheSeconds: 60
        artifacts:
          bucket: gitlab-artifacts
          connection: {}
          enabled: true
          proxy_download: true
        backups:
          bucket: gitlab-backups
          tmpBucket: tmp
        ciSecureFiles:
          bucket: gitlab-ci-secure-files
          connection: {}
          enabled: false
        contentSecurityPolicy:
          enabled: false
          report_only: true
        cron_jobs: {}
        defaultColorMode: null
        defaultProjectsFeatures:
          builds: true
          issues: true
          mergeRequests: true
          snippets: true
          wiki: true
        defaultSyntaxHighlightingTheme: null
        defaultTheme: null
        dependencyProxy:
          bucket: gitlab-dependency-proxy
          connection: {}
          enabled: false
          proxy_download: true
        duoAuth:
          enabled: false
        enableImpersonation: null
        enableSeatLink: true
        enableUsagePing: true
        externalDiffs:
          bucket: gitlab-mr-diffs
          connection: {}
          enabled: false
          proxy_download: true
          when: null
        extra:
          bizible: null
          googleAnalyticsId: null
          googleTagManagerNonceId: null
          matomoDisableCookies: null
          matomoSiteId: null
          matomoUrl: null
          oneTrustId: null
        gitlab_docs:
          enabled: false
          host: ""
        gitlab_kas: {}
        graphQlTimeout: null
        gravatar:
          plainUrl: null
          sslUrl: null
        incomingEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        initialDefaults: {}
        issueClosingPattern: null
        kerberos:
          dedicatedPort:
            enabled: false
            https: true
            port: 8443
          enabled: false
          keytab:
            key: keytab
          krb5Config: ""
          servicePrincipalName: ""
          simpleLdapLinkingAllowedRealms: []
        ldap:
          preventSignin: false
          servers: {}
        lfs:
          bucket: git-lfs
          connection: {}
          enabled: true
          proxy_download: true
        maxRequestDurationSeconds: null
        microsoft_graph_mailer:
          azure_ad_endpoint: https://login.microsoftonline.com
          client_id: ""
          client_secret:
            key: secret
            secret: ""
          enabled: false
          graph_endpoint: https://graph.microsoft.com
          tenant: ""
          user_id: ""
        object_store:
          connection: {}
          enabled: false
          proxy_download: true
          storage_options: {}
        omniauth:
          allowBypassTwoFactor: []
          allowSingleSignOn:
          - saml
          autoLinkLdapUser: false
          autoLinkSamlUser: false
          autoLinkUser: []
          autoSignInWithProvider: null
          blockAutoCreatedUsers: true
          enabled: false
          externalProviders: []
          providers: []
          syncProfileAttributes:
          - email
          syncProfileFromProvider: []
        packages:
          bucket: gitlab-packages
          connection: {}
          enabled: true
          proxy_download: true
        sentry:
          clientside_dsn: null
          dsn: null
          enabled: false
          environment: null
        serviceDeskEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        sidekiq:
          routingRules: []
        smartcard:
          CASecret: null
          clientCertificateRequiredHost: null
          enabled: false
          requiredForGitAccess: false
          sanExtensions: false
        suggested_reviewers: {}
        terraformState:
          bucket: gitlab-terraform-state
          connection: {}
          enabled: false
        uploads:
          bucket: gitlab-uploads
          connection: {}
          enabled: true
          proxy_download: true
        usernameChangingEnabled: true
        webhookTimeout: null
      application:
        allowClusterRoles: true
        create: false
        links: []
      batch:
        cronJob:
          apiVersion: ""
      certificates:
        customCAs: []
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/certificates
      clickhouse:
        enabled: false
      common:
        labels: {}
      communityImages:
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ce
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ce
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ce
      deployment:
        annotations: {}
      edition: ee
      email:
        display_name: GitLab
        from: ""
        reply_to: ""
        smime:
          certName: tls.crt
          enabled: false
          keyName: tls.key
          secretName: ""
        subject_suffix: ""
      enterpriseImages:
        geo-logcursor:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-geo-logcursor
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ee
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ee
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ee
      extraEnv: {}
      extraEnvFrom: {}
      geo:
        enabled: false
        nodeName: null
        psql:
          password: {}
        registry:
          replication:
            enabled: false
            primaryApiUrl: null
        role: primary
      gitaly:
        authToken: {}
        enabled: true
        external: []
        internal:
          names:
          - default
        service:
          externalPort: 8075
          internalPort: 8075
          name: gitaly
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
      gitlab:
        license: {}
      gitlabBase:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
      gitlabVersion: 17.8.1
      hosts:
        domain: localhost
        externalIP: null
        gitlab: {}
        hostSuffix: null
        https: false
        kas: {}
        minio: {}
        pages: {}
        registry: {}
        smartcard: {}
        ssh: null
        tls: {}
      hpa:
        apiVersion: ""
      image: {}
      ingress:
        annotations: {}
        apiVersion: ""
        class: nginx
        configureCertmanager: false
        enabled: true
        path: /
        pathType: Prefix
        provider: nginx
        tls:
          enabled: false
        useNewIngressForCerts: false
      initialRootPassword: {}
      job:
        nameSuffixOverride: null
      kas:
        enabled: true
        service:
          apiExternalPort: 8153
        tls:
          enabled: false
          verify: true
      keda:
        enabled: false
      kubectl:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
        securityContext:
          fsGroup: 65534
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
      minio:
        credentials: {}
        enabled: true
      monitoring:
        enabled: false
      nodeAffinity: null
      oauth:
        gitlab-pages: {}
      pages:
        accessControl: false
        apiSecret: {}
        artifactsServer: true
        authSecret: {}
        enabled: false
        externalHttp: []
        externalHttps: []
        host: null
        https: null
        localStore:
          enabled: false
        namespaceInPath: false
        objectStore:
          bucket: gitlab-pages
          connection: {}
          enabled: true
        path: null
        port: null
      pdb:
        apiVersion: ""
      pod:
        labels: {}
      praefect:
        authToken: {}
        autoMigrate: true
        dbSecret: {}
        enabled: false
        ntpHost: pool.ntp.org
        psql:
          sslMode: disable
        replaceInternalGitaly: true
        service:
          externalPort: 8075
          internalPort: 8075
          name: praefect
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
        virtualStorages:
        - gitalyReplicas: 3
          maxUnavailable: 1
          name: default
      priorityClassName: ""
      psql:
        ci: {}
        connectTimeout: null
        keepalives: null
        keepalivesCount: null
        keepalivesIdle: null
        keepalivesInterval: null
        knownDecompositions:
        - main
        - ci
        - embedding
        main: {}
        password: {}
        tcpUserTimeout: null
      rails:
        bootsnap:
          enabled: false
        sessionStore:
          sessionCookieTokenPrefix: ""
      railsSecrets: {}
      redis:
        auth:
          enabled: true
        sentinelAuth:
          enabled: false
      registry:
        api:
          port: 5000
          protocol: http
          serviceName: registry
        bucket: registry
        certificate: {}
        enabled: true
        host: null
        httpSecret: {}
        notificationSecret: {}
        notifications: {}
        redis:
          cache:
            password: {}
          rateLimiting:
            password: {}
        tls:
          enabled: false
        tokenIssuer: gitlab-issuer
      runner:
        registrationToken: {}
      service:
        annotations: {}
        labels: {}
        ports:
          metrics: 30505
          webservice: 30305
          workhorse: 30405
        type: NodePort
      serviceAccount:
        annotations: {}
        automountServiceAccountToken: false
        create: true
        enabled: false
      shell:
        authToken: {}
        hostKeys: {}
        tcp:
          proxyProtocol: false
      smtp:
        address: smtp.mailgun.org
        authentication: plain
        enabled: false
        open_timeout: 30
        openssl_verify_mode: peer
        password:
          key: password
          secret: ""
        pool: false
        port: 2525
        read_timeout: 60
        starttls_auto: false
        user_name: ""
      spamcheck:
        enabled: false
      time_zone: UTC
      tracing:
        connection:
          string: ""
        urlTemplate: ""
      traefik:
        apiVersion: ""
      webservice:
        workerTimeout: 60
      workhorse:
        serviceName: webservice-default
        tls:
          enabled: false
      zoekt:
        gateway:
          basicAuth: {}
        indexer:
          internalApi: {}
    hpa:
      behavior:
        scaleDown:
          stabilizationWindowSeconds: 300
      cpu:
        targetAverageValue: 100m
        targetType: AverageValue
      customMetrics: []
      maxReplicas: 10
      minReplicas: 1
    image:
      repository: registry.gitlab.com/gitlab-com/gl-security/engineering-and-research/automation-team/spam/spamcheck
    init:
      resources:
        requests:
          cpu: 50m
    keda:
      cooldownPeriod: 300
      enabled: false
      pollingInterval: 30
    logging:
      level: info
    maxUnavailable: 1
    podLabels: {}
    priorityClassName: ""
    resources:
      requests:
        cpu: 100m
        memory: 100M
    securityContext:
      fsGroup: 1000
      runAsUser: 1000
    service:
      externalPort: 8001
      internalPort: 8001
      type: ClusterIP
    serviceAccount:
      create: false
      enabled: false
    serviceLabels: {}
    tolerations: []
  toolbox:
    affinity:
      nodeAffinity: {}
      podAntiAffinity: {}
    annotations: {}
    antiAffinityLabels:
      matchLabels:
        app: gitaly
    backups:
      cron:
        backoffLimit: 6
        concurrencyPolicy: Replace
        enabled: false
        extraArgs: ""
        failedJobsHistoryLimit: 1
        persistence:
          accessMode: ReadWriteOnce
          enabled: false
          matchExpressions: []
          matchLabels: {}
          size: 10Gi
          subPath: ""
          useGenericEphemeralVolume: false
        resources:
          requests:
            cpu: 50m
            memory: 350M
        restartPolicy: OnFailure
        safeToEvict: false
        schedule: 0 1 * * *
        successfulJobsHistoryLimit: 3
        suspend: false
      objectStorage:
        backend: s3
        config: {}
    common:
      labels: {}
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      runAsNonRoot: true
      runAsUser: 1000
    deployment:
      strategy:
        type: Recreate
    enabled: true
    extra: {}
    extraEnv: {}
    extraEnvFrom: {}
    gitaly:
      authToken: {}
    global:
      affinity:
        nodeAffinity:
          key: topology.kubernetes.io/zone
          values: []
        podAntiAffinity:
          topologyKey: kubernetes.io/hostname
      antiAffinity: soft
      appConfig:
        applicationSettingsCacheSeconds: 60
        artifacts:
          bucket: gitlab-artifacts
          connection: {}
          enabled: true
          proxy_download: true
        backups:
          bucket: gitlab-backups
          tmpBucket: tmp
        ciSecureFiles:
          bucket: gitlab-ci-secure-files
          connection: {}
          enabled: false
        contentSecurityPolicy:
          enabled: false
          report_only: true
        cron_jobs: {}
        defaultColorMode: null
        defaultProjectsFeatures:
          builds: true
          issues: true
          mergeRequests: true
          snippets: true
          wiki: true
        defaultSyntaxHighlightingTheme: null
        defaultTheme: null
        dependencyProxy:
          bucket: gitlab-dependency-proxy
          connection: {}
          enabled: false
          proxy_download: true
        duoAuth:
          enabled: false
        enableImpersonation: null
        enableSeatLink: true
        enableUsagePing: true
        externalDiffs:
          bucket: gitlab-mr-diffs
          connection: {}
          enabled: false
          proxy_download: true
          when: null
        extra:
          bizible: null
          googleAnalyticsId: null
          googleTagManagerNonceId: null
          matomoDisableCookies: null
          matomoSiteId: null
          matomoUrl: null
          oneTrustId: null
        gitlab_docs:
          enabled: false
          host: ""
        gitlab_kas: {}
        graphQlTimeout: null
        gravatar:
          plainUrl: null
          sslUrl: null
        incomingEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        initialDefaults: {}
        issueClosingPattern: null
        kerberos:
          dedicatedPort:
            enabled: false
            https: true
            port: 8443
          enabled: false
          keytab:
            key: keytab
          krb5Config: ""
          servicePrincipalName: ""
          simpleLdapLinkingAllowedRealms: []
        ldap:
          preventSignin: false
          servers: {}
        lfs:
          bucket: git-lfs
          connection: {}
          enabled: true
          proxy_download: true
        maxRequestDurationSeconds: null
        microsoft_graph_mailer:
          azure_ad_endpoint: https://login.microsoftonline.com
          client_id: ""
          client_secret:
            key: secret
            secret: ""
          enabled: false
          graph_endpoint: https://graph.microsoft.com
          tenant: ""
          user_id: ""
        object_store:
          connection: {}
          enabled: false
          proxy_download: true
          storage_options: {}
        omniauth:
          allowBypassTwoFactor: []
          allowSingleSignOn:
          - saml
          autoLinkLdapUser: false
          autoLinkSamlUser: false
          autoLinkUser: []
          autoSignInWithProvider: null
          blockAutoCreatedUsers: true
          enabled: false
          externalProviders: []
          providers: []
          syncProfileAttributes:
          - email
          syncProfileFromProvider: []
        packages:
          bucket: gitlab-packages
          connection: {}
          enabled: true
          proxy_download: true
        sentry:
          clientside_dsn: null
          dsn: null
          enabled: false
          environment: null
        serviceDeskEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        sidekiq:
          routingRules: []
        smartcard:
          CASecret: null
          clientCertificateRequiredHost: null
          enabled: false
          requiredForGitAccess: false
          sanExtensions: false
        suggested_reviewers: {}
        terraformState:
          bucket: gitlab-terraform-state
          connection: {}
          enabled: false
        uploads:
          bucket: gitlab-uploads
          connection: {}
          enabled: true
          proxy_download: true
        usernameChangingEnabled: true
        webhookTimeout: null
      application:
        allowClusterRoles: true
        create: false
        links: []
      batch:
        cronJob:
          apiVersion: ""
      certificates:
        customCAs: []
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/certificates
      clickhouse:
        enabled: false
      common:
        labels: {}
      communityImages:
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ce
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ce
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ce
      deployment:
        annotations: {}
      edition: ee
      email:
        display_name: GitLab
        from: ""
        reply_to: ""
        smime:
          certName: tls.crt
          enabled: false
          keyName: tls.key
          secretName: ""
        subject_suffix: ""
      enterpriseImages:
        geo-logcursor:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-geo-logcursor
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ee
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ee
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ee
      extraEnv: {}
      extraEnvFrom: {}
      geo:
        enabled: false
        nodeName: null
        psql:
          password: {}
        registry:
          replication:
            enabled: false
            primaryApiUrl: null
        role: primary
      gitaly:
        authToken: {}
        enabled: true
        external: []
        internal:
          names:
          - default
        service:
          externalPort: 8075
          internalPort: 8075
          name: gitaly
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
      gitlab:
        license: {}
      gitlabBase:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
      gitlabVersion: 17.8.1
      hosts:
        domain: localhost
        externalIP: null
        gitlab: {}
        https: false
        kas: {}
        minio: {}
        pages: {}
        registry: {}
        smartcard: {}
        ssh: null
        tls: {}
      hpa:
        apiVersion: ""
      image: {}
      ingress:
        annotations: {}
        apiVersion: ""
        class: nginx
        configureCertmanager: false
        enabled: true
        path: /
        pathType: Prefix
        provider: nginx
        tls:
          enabled: false
        useNewIngressForCerts: false
      initialRootPassword: {}
      job:
        nameSuffixOverride: null
      kas:
        enabled: true
        service:
          apiExternalPort: 8153
        tls:
          enabled: false
          verify: true
      keda:
        enabled: false
      kubectl:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
        securityContext:
          fsGroup: 65534
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
      minio:
        credentials: {}
        enabled: true
      monitoring:
        enabled: false
      nodeAffinity: null
      oauth:
        gitlab-pages: {}
      pages:
        accessControl: false
        apiSecret: {}
        artifactsServer: true
        authSecret: {}
        enabled: false
        externalHttp: []
        externalHttps: []
        host: null
        https: null
        localStore:
          enabled: false
        namespaceInPath: false
        objectStore:
          bucket: gitlab-pages
          connection: {}
          enabled: true
        path: null
        port: null
      pdb:
        apiVersion: ""
      pod:
        labels: {}
      praefect:
        authToken: {}
        autoMigrate: true
        dbSecret: {}
        enabled: false
        ntpHost: pool.ntp.org
        psql:
          sslMode: disable
        replaceInternalGitaly: true
        service:
          externalPort: 8075
          internalPort: 8075
          name: praefect
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
        virtualStorages:
        - gitalyReplicas: 3
          maxUnavailable: 1
          name: default
      priorityClassName: ""
      psql:
        ci: {}
        connectTimeout: null
        keepalives: null
        keepalivesCount: null
        keepalivesIdle: null
        keepalivesInterval: null
        knownDecompositions:
        - main
        - ci
        - embedding
        main: {}
        password: {}
        tcpUserTimeout: null
      rails:
        bootsnap:
          enabled: false
        sessionStore:
          sessionCookieTokenPrefix: ""
      railsSecrets: {}
      redis:
        auth:
          enabled: true
        sentinelAuth:
          enabled: false
      registry:
        api:
          port: 5000
          protocol: http
          serviceName: registry
        bucket: registry
        certificate: {}
        enabled: true
        host: null
        httpSecret: {}
        notificationSecret: {}
        notifications: {}
        redis:
          cache:
            password: {}
          rateLimiting:
            password: {}
        tls:
          enabled: false
        tokenIssuer: gitlab-issuer
      runner:
        registrationToken: {}
      service:
        annotations: {}
        labels: {}
        ports:
          metrics: 30505
          webservice: 30305
          workhorse: 30405
        type: NodePort
      serviceAccount:
        annotations: {}
        automountServiceAccountToken: false
        create: true
        enabled: false
      shell:
        authToken: {}
        hostKeys: {}
        tcp:
          proxyProtocol: false
      smtp:
        address: smtp.mailgun.org
        authentication: plain
        enabled: false
        open_timeout: 30
        openssl_verify_mode: peer
        password:
          key: password
          secret: ""
        pool: false
        port: 2525
        read_timeout: 60
        starttls_auto: false
        user_name: ""
      spamcheck:
        enabled: false
      time_zone: UTC
      tracing:
        connection:
          string: ""
        urlTemplate: ""
      traefik:
        apiVersion: ""
      webservice:
        workerTimeout: 60
      workhorse:
        serviceName: webservice-default
        tls:
          enabled: false
      zoekt:
        gateway:
          basicAuth: {}
        indexer:
          internalApi: {}
    image: {}
    init:
      containerSecurityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        runAsNonRoot: true
        runAsUser: 1000
      image: {}
      resources:
        requests:
          cpu: 50m
    minio:
      bucket: git-lfs
      port: 9000
      serviceName: minio-svc
    persistence:
      accessMode: ReadWriteOnce
      enabled: true
      existingClaim: pvc-vol-gitlab
      matchExpressions: []
      matchLabels: {}
      size: 10Gi
      subPath: ""
    podLabels: {}
    priorityClassName: ""
    psql: {}
    rack_attack:
      git_basic_auth:
        enabled: false
    redis:
      auth: {}
    replicas: 1
    resources:
      requests:
        cpu: 50m
        memory: 350M
    securityContext:
      fsGroup: 1000
      runAsGroup: 1000
      runAsUser: 1000
      seccompProfile:
        type: RuntimeDefault
    serviceAccount:
      annotations: {}
      create: false
      enabled: false
    tolerations: []
    trusted_proxies: []
  webservice:
    affinity:
      podAntiAffinity: {}
    annotations: {}
    common:
      labels: {}
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      runAsNonRoot: true
      runAsUser: 1000
    deployment:
      livenessProbe:
        failureThreshold: 3
        initialDelaySeconds: 20
        periodSeconds: 60
        successThreshold: 1
        timeoutSeconds: 30
      readinessProbe:
        failureThreshold: 2
        initialDelaySeconds: 0
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 2
      startupProbe: {}
      strategy: {}
    deployments: {}
    enabled: true
    extra: {}
    extraEnv: {}
    extraEnvFrom: {}
    extraIngress:
      annotations:
        nginx.ingress.kubernetes.io/service-upstream: "true"
      enabled: false
      proxyBodySize: 512m
      proxyConnectTimeout: 15
      proxyReadTimeout: 600
      requireBasePath: true
      tls: {}
      useGeoClass: false
    gitaly:
      authToken: {}
    global:
      affinity:
        nodeAffinity:
          key: topology.kubernetes.io/zone
          values: []
        podAntiAffinity:
          topologyKey: kubernetes.io/hostname
      antiAffinity: soft
      appConfig:
        applicationSettingsCacheSeconds: 60
        artifacts:
          bucket: gitlab-artifacts
          connection: {}
          enabled: true
          proxy_download: true
        backups:
          bucket: gitlab-backups
          tmpBucket: tmp
        ciSecureFiles:
          bucket: gitlab-ci-secure-files
          connection: {}
          enabled: false
        contentSecurityPolicy:
          enabled: false
          report_only: true
        cron_jobs: {}
        defaultColorMode: null
        defaultProjectsFeatures:
          builds: true
          issues: true
          mergeRequests: true
          snippets: true
          wiki: true
        defaultSyntaxHighlightingTheme: null
        defaultTheme: null
        dependencyProxy:
          bucket: gitlab-dependency-proxy
          connection: {}
          enabled: false
          proxy_download: true
        duoAuth:
          enabled: false
        enableImpersonation: null
        enableSeatLink: true
        enableUsagePing: true
        externalDiffs:
          bucket: gitlab-mr-diffs
          connection: {}
          enabled: false
          proxy_download: true
          when: null
        extra:
          bizible: null
          googleAnalyticsId: null
          googleTagManagerNonceId: null
          matomoDisableCookies: null
          matomoSiteId: null
          matomoUrl: null
          oneTrustId: null
        gitlab_docs:
          enabled: false
          host: ""
        gitlab_kas: {}
        graphQlTimeout: null
        gravatar:
          plainUrl: null
          sslUrl: null
        incomingEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        initialDefaults: {}
        issueClosingPattern: null
        kerberos:
          dedicatedPort:
            enabled: false
            https: true
            port: 8443
          enabled: false
          keytab:
            key: keytab
          krb5Config: ""
          servicePrincipalName: ""
          simpleLdapLinkingAllowedRealms: []
        ldap:
          preventSignin: false
          servers: {}
        lfs:
          bucket: git-lfs
          connection: {}
          enabled: true
          proxy_download: true
        maxRequestDurationSeconds: null
        microsoft_graph_mailer:
          azure_ad_endpoint: https://login.microsoftonline.com
          client_id: ""
          client_secret:
            key: secret
            secret: ""
          enabled: false
          graph_endpoint: https://graph.microsoft.com
          tenant: ""
          user_id: ""
        object_store:
          connection: {}
          enabled: false
          proxy_download: true
          storage_options: {}
        omniauth:
          allowBypassTwoFactor: []
          allowSingleSignOn:
          - saml
          autoLinkLdapUser: false
          autoLinkSamlUser: false
          autoLinkUser: []
          autoSignInWithProvider: null
          blockAutoCreatedUsers: true
          enabled: false
          externalProviders: []
          providers: []
          syncProfileAttributes:
          - email
          syncProfileFromProvider: []
        packages:
          bucket: gitlab-packages
          connection: {}
          enabled: true
          proxy_download: true
        sentry:
          clientside_dsn: null
          dsn: null
          enabled: false
          environment: null
        serviceDeskEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        sidekiq:
          routingRules: []
        smartcard:
          CASecret: null
          clientCertificateRequiredHost: null
          enabled: false
          requiredForGitAccess: false
          sanExtensions: false
        suggested_reviewers: {}
        terraformState:
          bucket: gitlab-terraform-state
          connection: {}
          enabled: false
        uploads:
          bucket: gitlab-uploads
          connection: {}
          enabled: true
          proxy_download: true
        usernameChangingEnabled: true
        webhookTimeout: null
      application:
        allowClusterRoles: true
        create: false
        links: []
      batch:
        cronJob:
          apiVersion: ""
      certificates:
        customCAs: []
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/certificates
      clickhouse:
        enabled: false
      common:
        labels: {}
      communityImages:
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ce
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ce
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ce
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ce
      deployment:
        annotations: {}
      edition: ee
      email:
        display_name: GitLab
        from: ""
        reply_to: ""
        smime:
          certName: tls.crt
          enabled: false
          keyName: tls.key
          secretName: ""
        subject_suffix: ""
      enterpriseImages:
        geo-logcursor:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-geo-logcursor
        migrations:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        sidekiq:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ee
        toolbox:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee
        webservice:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ee
        workhorse:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ee
      extraEnv: {}
      extraEnvFrom: {}
      geo:
        enabled: false
        nodeName: null
        psql:
          password: {}
        registry:
          replication:
            enabled: false
            primaryApiUrl: null
        role: primary
      gitaly:
        authToken: {}
        enabled: true
        external: []
        internal:
          names:
          - default
        service:
          externalPort: 8075
          internalPort: 8075
          name: gitaly
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
      gitlab:
        license: {}
      gitlabBase:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
      gitlabVersion: 17.8.1
      hosts:
        domain: localhost
        externalIP: null
        gitlab: {}
        https: false
        kas: {}
        minio: {}
        pages: {}
        registry: {}
        smartcard: {}
        ssh: null
        tls: {}
      hpa:
        apiVersion: ""
      image: {}
      ingress:
        annotations: {}
        apiVersion: ""
        class: nginx
        configureCertmanager: false
        enabled: true
        path: /
        pathType: Prefix
        provider: nginx
        tls:
          enabled: false
        useNewIngressForCerts: false
      initialRootPassword: {}
      job:
        nameSuffixOverride: null
      kas:
        enabled: true
        service:
          apiExternalPort: 8153
        tls:
          enabled: false
          verify: true
      keda:
        enabled: false
      kubectl:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
        securityContext:
          fsGroup: 65534
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
      minio:
        credentials: {}
        enabled: true
      monitoring:
        enabled: false
      nodeAffinity: null
      oauth:
        gitlab-pages: {}
      pages:
        accessControl: false
        apiSecret: {}
        artifactsServer: true
        authSecret: {}
        enabled: false
        externalHttp: []
        externalHttps: []
        host: null
        https: null
        localStore:
          enabled: false
        namespaceInPath: false
        objectStore:
          bucket: gitlab-pages
          connection: {}
          enabled: true
        path: null
        port: null
      pdb:
        apiVersion: ""
      pod:
        labels: {}
      praefect:
        authToken: {}
        autoMigrate: true
        dbSecret: {}
        enabled: false
        ntpHost: pool.ntp.org
        psql:
          sslMode: disable
        replaceInternalGitaly: true
        service:
          externalPort: 8075
          internalPort: 8075
          name: praefect
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
        virtualStorages:
        - gitalyReplicas: 3
          maxUnavailable: 1
          name: default
      priorityClassName: ""
      psql:
        ci: {}
        connectTimeout: null
        keepalives: null
        keepalivesCount: null
        keepalivesIdle: null
        keepalivesInterval: null
        knownDecompositions:
        - main
        - ci
        - embedding
        main: {}
        password: {}
        tcpUserTimeout: null
      rails:
        bootsnap:
          enabled: false
        sessionStore:
          sessionCookieTokenPrefix: ""
      railsSecrets: {}
      redis:
        auth:
          enabled: true
        sentinelAuth:
          enabled: false
      registry:
        api:
          port: 5000
          protocol: http
          serviceName: registry
        bucket: registry
        certificate: {}
        enabled: true
        host: null
        httpSecret: {}
        notificationSecret: {}
        notifications: {}
        redis:
          cache:
            password: {}
          rateLimiting:
            password: {}
        tls:
          enabled: false
        tokenIssuer: gitlab-issuer
      runner:
        registrationToken: {}
      service:
        annotations: {}
        labels: {}
        ports:
          metrics: 30505
          webservice: 30305
          workhorse: 30405
        type: NodePort
      serviceAccount:
        annotations: {}
        automountServiceAccountToken: false
        create: true
        enabled: false
      shell:
        authToken: {}
        hostKeys: {}
        tcp:
          proxyProtocol: false
      smtp:
        address: smtp.mailgun.org
        authentication: plain
        enabled: false
        open_timeout: 30
        openssl_verify_mode: peer
        password:
          key: password
          secret: ""
        pool: false
        port: 2525
        read_timeout: 60
        starttls_auto: false
        user_name: ""
      spamcheck:
        enabled: false
      time_zone: UTC
      tracing:
        connection:
          string: ""
        urlTemplate: ""
      traefik:
        apiVersion: ""
      webservice:
        workerTimeout: 60
      workhorse:
        serviceName: webservice-default
        tls:
          enabled: false
      zoekt:
        gateway:
          basicAuth: {}
        indexer:
          internalApi: {}
    helmTests:
      enabled: true
    hpa:
      behavior:
        scaleDown:
          stabilizationWindowSeconds: 300
      cpu:
        targetAverageValue: 1
        targetType: AverageValue
      customMetrics: []
    http:
      enabled: true
    image: {}
    ingress:
      annotations:
        nginx.ingress.kubernetes.io/service-upstream: "true"
      proxyBodySize: 512m
      proxyConnectTimeout: 15
      proxyReadTimeout: 600
      requireBasePath: true
      tls: {}
      useGeoClass: false
    init:
      containerSecurityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        runAsNonRoot: true
        runAsUser: 1000
      image: {}
      resources:
        requests:
          cpu: 50m
    keda:
      cooldownPeriod: 300
      enabled: false
      pollingInterval: 30
    maxReplicas: 10
    maxUnavailable: 1
    metrics:
      annotations: {}
      enabled: true
      path: /metrics
      port: 8083
      serviceMonitor:
        additionalLabels: {}
        enabled: false
        endpointConfig: {}
      tls: {}
    minReplicas: 2
    minio:
      port: 9000
      serviceName: minio-svc
    monitoring:
      exporter:
        enabled: false
        port: 8083
      ipWhitelist:
      - 0.0.0.0/0
    networkpolicy:
      annotations: {}
      egress:
        enabled: false
        rules: []
      enabled: false
      ingress:
        enabled: false
        rules: []
    podLabels: {}
    priorityClassName: ""
    psql: {}
    puma:
      disableWorkerKiller: true
      threads:
        max: 4
        min: 4
    rack_attack:
      git_basic_auth:
        enabled: false
    redis:
      auth: {}
    resources:
      requests:
        cpu: 300m
        memory: 2.5G
    securityContext:
      fsGroup: 1000
      runAsUser: 1000
      seccompProfile:
        type: RuntimeDefault
    service:
      externalPort: 8080
      internalPort: 8080
      tls:
        externalPort: 8081
        internalPort: 8081
      type: ClusterIP
      workhorseExternalPort: 8181
      workhorseInternalPort: 8181
    serviceAccount:
      annotations: {}
      create: false
      enabled: false
    serviceLabels: {}
    sharedTmpDir: {}
    sharedUploadDir: {}
    shutdown:
      blackoutSeconds: 10
    sshHostKeys:
      mount: false
      mountName: ssh-host-keys
      types:
      - dsa
      - rsa
      - ecdsa
      - ed25519
    tls:
      enabled: false
    tolerations: []
    trusted_proxies: []
    webServer: puma
    workerProcesses: 2
    workhorse:
      containerSecurityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        runAsNonRoot: true
        runAsUser: 1000
      extraArgs: ""
      imageScaler:
        maxFileSizeBytes: 250000
        maxProcs: 2
      keywatcher: true
      livenessProbe:
        failureThreshold: 3
        initialDelaySeconds: 20
        periodSeconds: 60
        successThreshold: 1
        timeoutSeconds: 30
      logFormat: json
      metrics:
        enabled: false
        path: /metrics
        port: 9229
        serviceMonitor:
          additionalLabels: {}
          enabled: false
          endpointConfig: {}
      monitoring:
        exporter:
          enabled: false
          port: 9229
          tls: {}
      readinessProbe:
        failureThreshold: 3
        initialDelaySeconds: 0
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 2
      resources:
        requests:
          cpu: 100m
          memory: 100M
      sentryDSN: ""
      startupProbe: {}
      tls: {}
gitlab-runner:
  install: false
  podAnnotations:
    gitlab.com/prometheus_port: 9252
    gitlab.com/prometheus_scrape: "true"
  podSecurityContext:
    seccompProfile:
      type: RuntimeDefault
  rbac:
    create: true
  runners:
    config: |
      [[runners]]
        [runners.kubernetes]
        image = "ubuntu:22.04"
        {{- if .Values.global.minio.enabled }}
        [runners.cache]
          Type = "s3"
          Path = "gitlab-runner"
          Shared = true
          [runners.cache.s3]
            ServerAddress = {{ include "gitlab-runner.cache-tpl.s3ServerAddress" . }}
            BucketName = "runner-cache"
            BucketLocation = "us-east-1"
            Insecure = false
        {{ end }}
    locked: false
    secret: nonempty
gitlab-zoekt:
  gateway:
    basicAuth:
      enabled: true
      secretName: '{{ include "gitlab.zoekt.gateway.basicAuth.secretName" $ }}'
  indexer:
    internalApi:
      enabled: true
      gitlabUrl: '{{ include "gitlab.zoekt.indexer.internalApi.gitlabUrl" $ }}'
      secretKey: '{{ include "gitlab.zoekt.indexer.internalApi.secretKey" $ }}'
      secretName: '{{ include "gitlab.zoekt.indexer.internalApi.secretName" $ }}'
  install: false
global:
  affinity:
    nodeAffinity:
      key: topology.kubernetes.io/zone
      values: []
    podAntiAffinity:
      topologyKey: kubernetes.io/hostname
  antiAffinity: soft
  appConfig:
    applicationSettingsCacheSeconds: 60
    artifacts:
      bucket: gitlab-artifacts
      connection: {}
      enabled: true
      proxy_download: true
    backups:
      bucket: gitlab-backups
      tmpBucket: tmp
    ciSecureFiles:
      bucket: gitlab-ci-secure-files
      connection: {}
      enabled: false
    contentSecurityPolicy:
      enabled: false
      report_only: true
    cron_jobs: {}
    defaultColorMode: null
    defaultProjectsFeatures:
      builds: true
      issues: true
      mergeRequests: true
      snippets: true
      wiki: true
    defaultSyntaxHighlightingTheme: null
    defaultTheme: null
    dependencyProxy:
      bucket: gitlab-dependency-proxy
      connection: {}
      enabled: false
      proxy_download: true
    duoAuth:
      enabled: false
    enableImpersonation: null
    enableSeatLink: true
    enableUsagePing: true
    externalDiffs:
      bucket: gitlab-mr-diffs
      connection: {}
      enabled: false
      proxy_download: true
      when: null
    extra:
      bizible: null
      googleAnalyticsId: null
      googleTagManagerNonceId: null
      matomoDisableCookies: null
      matomoSiteId: null
      matomoUrl: null
      oneTrustId: null
    gitlab_docs:
      enabled: false
      host: ""
    gitlab_kas: {}
    graphQlTimeout: null
    gravatar:
      plainUrl: null
      sslUrl: null
    incomingEmail:
      address: ""
      authToken:
        key: authToken
        secret: ""
      clientSecret:
        key: secret
      deleteAfterDelivery: true
      deliveryMethod: webhook
      enabled: false
      expungeDeleted: false
      host: imap.gmail.com
      idleTimeout: 60
      inboxMethod: imap
      logger:
        logPath: /dev/stdout
      mailbox: inbox
      password:
        key: password
        secret: ""
      pollInterval: 60
      port: 993
      ssl: true
      startTls: false
      user: ""
    initialDefaults: {}
    issueClosingPattern: null
    kerberos:
      dedicatedPort:
        enabled: false
        https: true
        port: 8443
      enabled: false
      keytab:
        key: keytab
      krb5Config: ""
      servicePrincipalName: ""
      simpleLdapLinkingAllowedRealms: []
    ldap:
      preventSignin: false
      servers: {}
    lfs:
      bucket: git-lfs
      connection: {}
      enabled: true
      proxy_download: true
    maxRequestDurationSeconds: null
    microsoft_graph_mailer:
      azure_ad_endpoint: https://login.microsoftonline.com
      client_id: ""
      client_secret:
        key: secret
        secret: ""
      enabled: false
      graph_endpoint: https://graph.microsoft.com
      tenant: ""
      user_id: ""
    object_store:
      connection: {}
      enabled: false
      proxy_download: true
      storage_options: {}
    omniauth:
      allowBypassTwoFactor: []
      allowSingleSignOn:
      - saml
      autoLinkLdapUser: false
      autoLinkSamlUser: false
      autoLinkUser: []
      autoSignInWithProvider: null
      blockAutoCreatedUsers: true
      enabled: false
      externalProviders: []
      providers: []
      syncProfileAttributes:
      - email
      syncProfileFromProvider: []
    packages:
      bucket: gitlab-packages
      connection: {}
      enabled: true
      proxy_download: true
    sentry:
      clientside_dsn: null
      dsn: null
      enabled: false
      environment: null
    serviceDeskEmail:
      address: ""
      authToken:
        key: authToken
        secret: ""
      clientSecret:
        key: secret
      deleteAfterDelivery: true
      deliveryMethod: webhook
      enabled: false
      expungeDeleted: false
      host: imap.gmail.com
      idleTimeout: 60
      inboxMethod: imap
      logger:
        logPath: /dev/stdout
      mailbox: inbox
      password:
        key: password
        secret: ""
      pollInterval: 60
      port: 993
      ssl: true
      startTls: false
      user: ""
    sidekiq:
      routingRules: []
    smartcard:
      CASecret: null
      clientCertificateRequiredHost: null
      enabled: false
      requiredForGitAccess: false
      sanExtensions: false
    suggested_reviewers: {}
    terraformState:
      bucket: gitlab-terraform-state
      connection: {}
      enabled: false
    uploads:
      bucket: gitlab-uploads
      connection: {}
      enabled: true
      proxy_download: true
    usernameChangingEnabled: true
    webhookTimeout: null
  application:
    allowClusterRoles: true
    create: false
    links: []
  batch:
    cronJob:
      apiVersion: ""
  certificates:
    customCAs: []
    image:
      repository: registry.gitlab.com/gitlab-org/build/cng/certificates
  common:
    labels: {}
  deployment:
    annotations: {}
  edition: ee
  email:
    display_name: GitLab
    from: ""
    reply_to: ""
    smime:
      certName: tls.crt
      enabled: false
      keyName: tls.key
      secretName: ""
    subject_suffix: ""
  extraEnv: {}
  extraEnvFrom: {}
  geo:
    enabled: false
    nodeName: null
    psql:
      password: {}
    registry:
      replication:
        enabled: false
        primaryApiUrl: null
    role: primary
  gitaly:
    authToken: {}
    enabled: true
    external: []
    internal:
      names:
      - default
    service:
      externalPort: 8075
      internalPort: 8075
      name: gitaly
      tls:
        externalPort: 8076
        internalPort: 8076
      type: ClusterIP
    tls:
      enabled: false
  gitlab:
    license: {}
  gitlabBase:
    image:
      repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
  gitlabVersion: 17.8.1
  hosts:
    domain: localhost
    externalIP: null
    gitlab: {}
    hostSuffix: null
    https: false
    kas: {}
    minio: {}
    pages: {}
    registry: {}
    smartcard: {}
    ssh: null
    tls: {}
  hpa:
    apiVersion: ""
  image: {}
  ingress:
    annotations: {}
    apiVersion: ""
    class: nginx
    configureCertmanager: false
    enabled: true
    path: /
    pathType: Prefix
    provider: nginx
    tls:
      enabled: false
    useNewIngressForCerts: false
  initialRootPassword: {}
  job:
    nameSuffixOverride: null
  kas:
    enabled: true
    service:
      apiExternalPort: 8153
    tls:
      enabled: false
      verify: true
  keda:
    enabled: false
  kubectl:
    image:
      repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
    securityContext:
      fsGroup: 65534
      runAsUser: 65534
      seccompProfile:
        type: RuntimeDefault
  minio:
    credentials: {}
    enabled: true
  monitoring:
    enabled: false
  nodeAffinity: null
  oauth:
    gitlab-pages: {}
  pages:
    accessControl: false
    apiSecret: {}
    artifactsServer: true
    authSecret: {}
    enabled: false
    externalHttp: []
    externalHttps: []
    host: null
    https: null
    localStore:
      enabled: false
    namespaceInPath: false
    objectStore:
      bucket: gitlab-pages
      connection: {}
      enabled: true
    path: null
    port: null
  pdb:
    apiVersion: ""
  pod:
    labels: {}
  praefect:
    authToken: {}
    autoMigrate: true
    dbSecret: {}
    enabled: false
    ntpHost: pool.ntp.org
    psql:
      sslMode: disable
    replaceInternalGitaly: true
    service:
      externalPort: 8075
      internalPort: 8075
      name: praefect
      tls:
        externalPort: 8076
        internalPort: 8076
      type: ClusterIP
    tls:
      enabled: false
    virtualStorages:
    - gitalyReplicas: 3
      maxUnavailable: 1
      name: default
  priorityClassName: ""
  psql:
    ci: {}
    connectTimeout: null
    keepalives: null
    keepalivesCount: null
    keepalivesIdle: null
    keepalivesInterval: null
    main: {}
    password: {}
    tcpUserTimeout: null
  rails:
    bootsnap:
      enabled: false
    sessionStore:
      sessionCookieTokenPrefix: ""
  railsSecrets: {}
  redis:
    auth:
      enabled: true
    sentinelAuth:
      enabled: false
  registry:
    api:
      port: 5000
      protocol: http
      serviceName: registry
    bucket: registry
    certificate: {}
    enabled: true
    host: null
    httpSecret: {}
    notificationSecret: {}
    notifications: {}
    redis:
      cache:
        password: {}
      rateLimiting:
        password: {}
    tls:
      enabled: false
    tokenIssuer: gitlab-issuer
  runner:
    registrationToken: {}
  service:
    annotations: {}
    labels: {}
    ports:
      metrics: 30505
      webservice: 30305
      workhorse: 30405
    type: NodePort
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: false
    create: true
    enabled: false
  shell:
    authToken: {}
    hostKeys: {}
    tcp:
      proxyProtocol: false
  smtp:
    address: smtp.mailgun.org
    authentication: plain
    enabled: false
    open_timeout: 30
    openssl_verify_mode: peer
    password:
      key: password
      secret: ""
    pool: false
    port: 2525
    read_timeout: 60
    starttls_auto: false
    user_name: ""
  spamcheck:
    enabled: false
  time_zone: UTC
  tracing:
    connection:
      string: ""
    urlTemplate: ""
  traefik:
    apiVersion: ""
  webservice:
    workerTimeout: 60
  workhorse:
    serviceName: webservice-default
    tls:
      enabled: false
  zoekt:
    gateway:
      basicAuth: {}
    indexer:
      internalApi: {}
haproxy:
  controller:
    extraArgs:
    - --configmap-tcp-services=$(POD_NAMESPACE)/$(POD_NAMESPACE)-haproxy-tcp
    service:
      tcpPorts:
      - name: ssh
        port: 22
        targetPort: 22
      type: LoadBalancer
  install: false
minio:
  common:
    labels: {}
  configPath: ""
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    runAsNonRoot: true
    runAsUser: 1000
  defaultBuckets:
  - name: registry
  - name: git-lfs
  - name: runner-cache
  - name: gitlab-uploads
  - name: gitlab-artifacts
  - name: gitlab-backups
  - name: gitlab-packages
  - name: tmp
  - name: gitlab-mr-diffs
  - name: gitlab-terraform-state
  - name: gitlab-ci-secure-files
  - name: gitlab-dependency-proxy
  - name: gitlab-pages
  deployment:
    strategy:
      type: Recreate
  global:
    affinity:
      nodeAffinity:
        key: topology.kubernetes.io/zone
        values: []
      podAntiAffinity:
        topologyKey: kubernetes.io/hostname
    antiAffinity: soft
    appConfig:
      applicationSettingsCacheSeconds: 60
      artifacts:
        bucket: gitlab-artifacts
        connection: {}
        enabled: true
        proxy_download: true
      backups:
        bucket: gitlab-backups
        tmpBucket: tmp
      ciSecureFiles:
        bucket: gitlab-ci-secure-files
        connection: {}
        enabled: false
      contentSecurityPolicy:
        enabled: false
        report_only: true
      cron_jobs: {}
      defaultColorMode: null
      defaultProjectsFeatures:
        builds: true
        issues: true
        mergeRequests: true
        snippets: true
        wiki: true
      defaultSyntaxHighlightingTheme: null
      defaultTheme: null
      dependencyProxy:
        bucket: gitlab-dependency-proxy
        connection: {}
        enabled: false
        proxy_download: true
      duoAuth:
        enabled: false
      enableImpersonation: null
      enableSeatLink: true
      enableUsagePing: true
      externalDiffs:
        bucket: gitlab-mr-diffs
        connection: {}
        enabled: false
        proxy_download: true
        when: null
      extra:
        bizible: null
        googleAnalyticsId: null
        googleTagManagerNonceId: null
        matomoDisableCookies: null
        matomoSiteId: null
        matomoUrl: null
        oneTrustId: null
      gitlab_docs:
        enabled: false
        host: ""
      gitlab_kas: {}
      graphQlTimeout: null
      gravatar:
        plainUrl: null
        sslUrl: null
      incomingEmail:
        address: ""
        authToken:
          key: authToken
          secret: ""
        clientSecret:
          key: secret
        deleteAfterDelivery: true
        deliveryMethod: webhook
        enabled: false
        expungeDeleted: false
        host: imap.gmail.com
        idleTimeout: 60
        inboxMethod: imap
        logger:
          logPath: /dev/stdout
        mailbox: inbox
        password:
          key: password
          secret: ""
        pollInterval: 60
        port: 993
        ssl: true
        startTls: false
        user: ""
      initialDefaults: {}
      issueClosingPattern: null
      kerberos:
        dedicatedPort:
          enabled: false
          https: true
          port: 8443
        enabled: false
        keytab:
          key: keytab
        krb5Config: ""
        servicePrincipalName: ""
        simpleLdapLinkingAllowedRealms: []
      ldap:
        preventSignin: false
        servers: {}
      lfs:
        bucket: git-lfs
        connection: {}
        enabled: true
        proxy_download: true
      maxRequestDurationSeconds: null
      microsoft_graph_mailer:
        azure_ad_endpoint: https://login.microsoftonline.com
        client_id: ""
        client_secret:
          key: secret
          secret: ""
        enabled: false
        graph_endpoint: https://graph.microsoft.com
        tenant: ""
        user_id: ""
      object_store:
        connection: {}
        enabled: false
        proxy_download: true
        storage_options: {}
      omniauth:
        allowBypassTwoFactor: []
        allowSingleSignOn:
        - saml
        autoLinkLdapUser: false
        autoLinkSamlUser: false
        autoLinkUser: []
        autoSignInWithProvider: null
        blockAutoCreatedUsers: true
        enabled: false
        externalProviders: []
        providers: []
        syncProfileAttributes:
        - email
        syncProfileFromProvider: []
      packages:
        bucket: gitlab-packages
        connection: {}
        enabled: true
        proxy_download: true
      sentry:
        clientside_dsn: null
        dsn: null
        enabled: false
        environment: null
      serviceDeskEmail:
        address: ""
        authToken:
          key: authToken
          secret: ""
        clientSecret:
          key: secret
        deleteAfterDelivery: true
        deliveryMethod: webhook
        enabled: false
        expungeDeleted: false
        host: imap.gmail.com
        idleTimeout: 60
        inboxMethod: imap
        logger:
          logPath: /dev/stdout
        mailbox: inbox
        password:
          key: password
          secret: ""
        pollInterval: 60
        port: 993
        ssl: true
        startTls: false
        user: ""
      sidekiq:
        routingRules: []
      smartcard:
        CASecret: null
        clientCertificateRequiredHost: null
        enabled: false
        requiredForGitAccess: false
        sanExtensions: false
      suggested_reviewers: {}
      terraformState:
        bucket: gitlab-terraform-state
        connection: {}
        enabled: false
      uploads:
        bucket: gitlab-uploads
        connection: {}
        enabled: true
        proxy_download: true
      usernameChangingEnabled: true
      webhookTimeout: null
    application:
      allowClusterRoles: true
      create: false
      links: []
    batch:
      cronJob:
        apiVersion: ""
    certificates:
      customCAs: []
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/certificates
    common:
      labels: {}
    deployment:
      annotations: {}
    edition: ee
    email:
      display_name: GitLab
      from: ""
      reply_to: ""
      smime:
        certName: tls.crt
        enabled: false
        keyName: tls.key
        secretName: ""
      subject_suffix: ""
    extraEnv: {}
    extraEnvFrom: {}
    geo:
      enabled: false
      nodeName: null
      psql:
        password: {}
      registry:
        replication:
          enabled: false
          primaryApiUrl: null
      role: primary
    gitaly:
      authToken: {}
      enabled: true
      external: []
      internal:
        names:
        - default
      service:
        externalPort: 8075
        internalPort: 8075
        name: gitaly
        tls:
          externalPort: 8076
          internalPort: 8076
        type: ClusterIP
      tls:
        enabled: false
    gitlab:
      license: {}
    gitlabBase:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
    gitlabVersion: 17.8.1
    hosts:
      domain: localhost
      externalIP: null
      gitlab: {}
      https: false
      kas: {}
      minio: {}
      pages: {}
      registry: {}
      smartcard: {}
      ssh: null
      tls: {}
    hpa:
      apiVersion: ""
    image: {}
    ingress:
      annotations: {}
      apiVersion: ""
      class: nginx
      configureCertmanager: false
      enabled: true
      path: /
      pathType: Prefix
      provider: nginx
      tls:
        enabled: false
      useNewIngressForCerts: false
    initialRootPassword: {}
    job:
      nameSuffixOverride: null
    kas:
      enabled: true
      service:
        apiExternalPort: 8153
      tls:
        enabled: false
        verify: true
    keda:
      enabled: false
    kubectl:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
      securityContext:
        fsGroup: 65534
        runAsUser: 65534
        seccompProfile:
          type: RuntimeDefault
    minio:
      credentials: {}
      enabled: true
    monitoring:
      enabled: false
    nodeAffinity: null
    oauth:
      gitlab-pages: {}
    pages:
      accessControl: false
      apiSecret: {}
      artifactsServer: true
      authSecret: {}
      enabled: false
      externalHttp: []
      externalHttps: []
      host: null
      https: null
      localStore:
        enabled: false
      namespaceInPath: false
      objectStore:
        bucket: gitlab-pages
        connection: {}
        enabled: true
      path: null
      port: null
    pdb:
      apiVersion: ""
    pod:
      labels: {}
    praefect:
      authToken: {}
      autoMigrate: true
      dbSecret: {}
      enabled: false
      ntpHost: pool.ntp.org
      psql:
        sslMode: disable
      replaceInternalGitaly: true
      service:
        externalPort: 8075
        internalPort: 8075
        name: praefect
        tls:
          externalPort: 8076
          internalPort: 8076
        type: ClusterIP
      tls:
        enabled: false
      virtualStorages:
      - gitalyReplicas: 3
        maxUnavailable: 1
        name: default
    priorityClassName: ""
    psql:
      ci: {}
      connectTimeout: null
      keepalives: null
      keepalivesCount: null
      keepalivesIdle: null
      keepalivesInterval: null
      main: {}
      password: {}
      tcpUserTimeout: null
    rails:
      bootsnap:
        enabled: false
      sessionStore:
        sessionCookieTokenPrefix: ""
    railsSecrets: {}
    redis:
      auth:
        enabled: true
      sentinelAuth:
        enabled: false
    registry:
      api:
        port: 5000
        protocol: http
        serviceName: registry
      bucket: registry
      certificate: {}
      enabled: true
      host: null
      httpSecret: {}
      notificationSecret: {}
      notifications: {}
      redis:
        cache:
          password: {}
        rateLimiting:
          password: {}
      tls:
        enabled: false
      tokenIssuer: gitlab-issuer
    runner:
      registrationToken: {}
    service:
      annotations: {}
      labels: {}
      ports:
        metrics: 30505
        webservice: 30305
        workhorse: 30405
      type: NodePort
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: false
      create: true
      enabled: false
    shell:
      authToken: {}
      hostKeys: {}
      tcp:
        proxyProtocol: false
    smtp:
      address: smtp.mailgun.org
      authentication: plain
      enabled: false
      open_timeout: 30
      openssl_verify_mode: peer
      password:
        key: password
        secret: ""
      pool: false
      port: 2525
      read_timeout: 60
      starttls_auto: false
      user_name: ""
    spamcheck:
      enabled: false
    time_zone: UTC
    tracing:
      connection:
        string: ""
      urlTemplate: ""
    traefik:
      apiVersion: ""
    webservice:
      workerTimeout: 60
    workhorse:
      serviceName: webservice-default
      tls:
        enabled: false
    zoekt:
      gateway:
        basicAuth: {}
      indexer:
        internalApi: {}
  image: minio/minio
  imageTag: RELEASE.2017-12-28T01-21-00Z
  ingress:
    annotations: {}
    proxyBodySize: "0"
    proxyBuffering: "off"
    proxyReadTimeout: 900
    tls: {}
  init:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      runAsNonRoot: true
    image: {}
    resources:
      requests:
        cpu: 50m
    script: sed -e 's@ACCESS_KEY@'"$(cat /config/accesskey)"'@' -e 's@SECRET_KEY@'"$(cat
      /config/secretkey)"'@' /config/config.json > /minio/config.json
  jobAnnotations: {}
  maxUnavailable: 1
  minioConfig:
    aqmp:
      autoDeleted: false
      deliveryMode: 0
      durable: false
      enable: false
      exchange: ""
      exchangeType: ""
      immediate: false
      internal: false
      mandatory: false
      noWait: false
      routingKey: ""
      url: ""
    browser: "on"
    domain: ""
    elasticsearch:
      enable: false
      format: namespace
      index: ""
      url: ""
    kafka:
      brokers: "null"
      enable: false
      topic: ""
    logger:
      console:
        enable: true
      file:
        enable: false
        filename: ""
    mqtt:
      broker: ""
      clientId: ""
      enable: false
      password: ""
      qos: 0
      topic: ""
      username: ""
    mysql:
      database: ""
      dsnString: ""
      enable: false
      format: namespace
      host: ""
      password: ""
      port: ""
      table: ""
      user: ""
    nats:
      address: ""
      async: false
      clientID: ""
      clusterID: ""
      enable: false
      enableStreaming: false
      maxPubAcksInflight: 0
      password: ""
      pingInterval: 0
      secure: false
      subject: ""
      token: ""
      username: ""
    postgresql:
      connectionString: ""
      database: ""
      enable: false
      format: namespace
      host: ""
      password: ""
      port: ""
      table: ""
      user: ""
    redis:
      address: ""
      enable: false
      format: namespace
      key: ""
      password: ""
    region: us-east-1
    webhook:
      enable: false
      endpoint: ""
  minioMc:
    image: minio/mc
    tag: RELEASE.2018-07-13T00-53-22Z
  mountPath: /export
  networkPolicy:
    allowExternal: true
    enabled: false
  nodeSelector: {}
  persistence:
    accessMode: ReadWriteOnce
    enabled: true
    matchExpressions: []
    matchLabels: {}
    size: 10Gi
    subPath: ""
  podAnnotations: {}
  podLabels: {}
  priorityClassName: ""
  replicas: 4
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
  securityContext:
    fsGroup: 1000
    runAsUser: 1000
    seccompProfile:
      type: RuntimeDefault
  serviceAccount: {}
  servicePort: 9000
  serviceType: ClusterIP
  tolerations: []
nginx-ingress:
  controller:
    addHeaders:
      Referrer-Policy: strict-origin-when-cross-origin
    admissionWebhooks:
      enabled: false
    config:
      annotation-value-word-blocklist: load_module,lua_package,_by_lua,location,root,proxy_pass,serviceaccount,{,},',"
      hsts: "true"
      hsts-include-subdomains: "false"
      hsts-max-age: "63072000"
      server-name-hash-bucket-size: "256"
      server-tokens: "false"
      ssl-ciphers: ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4
      ssl-protocols: TLSv1.3 TLSv1.2
      upstream-keepalive-connections: 100
      upstream-keepalive-requests: 1000
      upstream-keepalive-time: 30s
      upstream-keepalive-timeout: 5
      use-http2: "true"
    ingressClassByName: false
    ingressClassResource:
      name: '{{ include "ingress.class.name" $ | quote }}'
    metrics:
      enabled: true
      service:
        annotations:
          gitlab.com/prometheus_port: "10254"
          gitlab.com/prometheus_scrape: "true"
          prometheus.io/port: "10254"
          prometheus.io/scrape: "true"
    minAvailable: 1
    publishService:
      enabled: true
    replicaCount: 2
    resources:
      requests:
        cpu: 100m
        memory: 100Mi
    scope:
      enabled: true
    service:
      externalTrafficPolicy: Local
  defaultBackend:
    resources:
      requests:
        cpu: 5m
        memory: 5Mi
  enabled: false
  rbac:
    create: true
    scope: false
  serviceAccount:
    create: true
  tcpExternalConfig: "true"
nginx-ingress-geo:
  controller:
    addHeaders:
      Referrer-Policy: strict-origin-when-cross-origin
    admissionWebhooks:
      enabled: false
    config:
      annotation-value-word-blocklist: load_module,lua_package,_by_lua,location,root,proxy_pass,serviceaccount,{,},',"
      hsts: "true"
      hsts-include-subdomains: "false"
      hsts-max-age: "63072000"
      server-name-hash-bucket-size: "256"
      server-tokens: "false"
      ssl-ciphers: ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4
      ssl-protocols: TLSv1.3 TLSv1.2
      upstream-keepalive-connections: 100
      upstream-keepalive-requests: 1000
      upstream-keepalive-time: 30s
      upstream-keepalive-timeout: 5
      use-forwarded-headers: true
      use-http2: "true"
    electionID: ingress-controller-leader-geo
    ingressClassByName: false
    ingressClassResource:
      controllerValue: k8s.io/nginx-ingress-geo
      name: '{{ include "gitlab.geo.ingress.class.name" $ | quote }}'
    metrics:
      enabled: true
      service:
        annotations:
          gitlab.com/prometheus_port: "10254"
          gitlab.com/prometheus_scrape: "true"
          prometheus.io/port: "10254"
          prometheus.io/scrape: "true"
    minAvailable: 1
    publishService:
      enabled: true
    replicaCount: 2
    resources:
      requests:
        cpu: 100m
        memory: 100Mi
    scope:
      enabled: true
    service:
      externalTrafficPolicy: Local
  defaultBackend:
    resources:
      requests:
        cpu: 5m
        memory: 5Mi
  enabled: false
  externalIpTpl: '{{ .Values.global.hosts.externalGeoIP }}'
  rbac:
    create: true
    scope: false
  serviceAccount:
    create: true
  tcpExternalConfig: "true"
postgresql:
  architecture: standalone
  audit:
    clientMinMessages: error
    logConnections: false
    logDisconnections: false
    logHostname: false
    logLinePrefix: ""
    logTimezone: ""
    pgAuditLog: ""
    pgAuditLogCatalog: "off"
  auth:
    database: ""
    enablePostgresUser: true
    existingSecret: '{{ include "gitlab.psql.password.secret" . }}'
    password: bogus-satisfy-upgrade
    postgresPassword: bogus-satisfy-upgrade
    replicationPassword: ""
    replicationUsername: repl_user
    secretKeys:
      adminPasswordKey: postgresql-postgres-password
      replicationPasswordKey: replication-password
      userPasswordKey: '{{ include "gitlab.psql.password.key" $ }}'
    usePasswordFiles: false
    username: ""
  clusterDomain: cluster.local
  common:
    exampleValue: common-chart
    global:
      affinity:
        nodeAffinity:
          key: topology.kubernetes.io/zone
          values: []
        podAntiAffinity:
          topologyKey: kubernetes.io/hostname
      antiAffinity: soft
      appConfig:
        applicationSettingsCacheSeconds: 60
        artifacts:
          bucket: gitlab-artifacts
          connection: {}
          enabled: true
          proxy_download: true
        backups:
          bucket: gitlab-backups
          tmpBucket: tmp
        ciSecureFiles:
          bucket: gitlab-ci-secure-files
          connection: {}
          enabled: false
        contentSecurityPolicy:
          enabled: false
          report_only: true
        cron_jobs: {}
        defaultColorMode: null
        defaultProjectsFeatures:
          builds: true
          issues: true
          mergeRequests: true
          snippets: true
          wiki: true
        defaultSyntaxHighlightingTheme: null
        defaultTheme: null
        dependencyProxy:
          bucket: gitlab-dependency-proxy
          connection: {}
          enabled: false
          proxy_download: true
        duoAuth:
          enabled: false
        enableImpersonation: null
        enableSeatLink: true
        enableUsagePing: true
        externalDiffs:
          bucket: gitlab-mr-diffs
          connection: {}
          enabled: false
          proxy_download: true
          when: null
        extra:
          bizible: null
          googleAnalyticsId: null
          googleTagManagerNonceId: null
          matomoDisableCookies: null
          matomoSiteId: null
          matomoUrl: null
          oneTrustId: null
        gitlab_docs:
          enabled: false
          host: ""
        gitlab_kas: {}
        graphQlTimeout: null
        gravatar:
          plainUrl: null
          sslUrl: null
        incomingEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        initialDefaults: {}
        issueClosingPattern: null
        kerberos:
          dedicatedPort:
            enabled: false
            https: true
            port: 8443
          enabled: false
          keytab:
            key: keytab
          krb5Config: ""
          servicePrincipalName: ""
          simpleLdapLinkingAllowedRealms: []
        ldap:
          preventSignin: false
          servers: {}
        lfs:
          bucket: git-lfs
          connection: {}
          enabled: true
          proxy_download: true
        maxRequestDurationSeconds: null
        microsoft_graph_mailer:
          azure_ad_endpoint: https://login.microsoftonline.com
          client_id: ""
          client_secret:
            key: secret
            secret: ""
          enabled: false
          graph_endpoint: https://graph.microsoft.com
          tenant: ""
          user_id: ""
        object_store:
          connection: {}
          enabled: false
          proxy_download: true
          storage_options: {}
        omniauth:
          allowBypassTwoFactor: []
          allowSingleSignOn:
          - saml
          autoLinkLdapUser: false
          autoLinkSamlUser: false
          autoLinkUser: []
          autoSignInWithProvider: null
          blockAutoCreatedUsers: true
          enabled: false
          externalProviders: []
          providers: []
          syncProfileAttributes:
          - email
          syncProfileFromProvider: []
        packages:
          bucket: gitlab-packages
          connection: {}
          enabled: true
          proxy_download: true
        sentry:
          clientside_dsn: null
          dsn: null
          enabled: false
          environment: null
        serviceDeskEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        sidekiq:
          routingRules: []
        smartcard:
          CASecret: null
          clientCertificateRequiredHost: null
          enabled: false
          requiredForGitAccess: false
          sanExtensions: false
        suggested_reviewers: {}
        terraformState:
          bucket: gitlab-terraform-state
          connection: {}
          enabled: false
        uploads:
          bucket: gitlab-uploads
          connection: {}
          enabled: true
          proxy_download: true
        usernameChangingEnabled: true
        webhookTimeout: null
      application:
        allowClusterRoles: true
        create: false
        links: []
      batch:
        cronJob:
          apiVersion: ""
      certificates:
        customCAs: []
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/certificates
      common:
        labels: {}
      deployment:
        annotations: {}
      edition: ee
      email:
        display_name: GitLab
        from: ""
        reply_to: ""
        smime:
          certName: tls.crt
          enabled: false
          keyName: tls.key
          secretName: ""
        subject_suffix: ""
      extraEnv: {}
      extraEnvFrom: {}
      geo:
        enabled: false
        nodeName: null
        psql:
          password: {}
        registry:
          replication:
            enabled: false
            primaryApiUrl: null
        role: primary
      gitaly:
        authToken: {}
        enabled: true
        external: []
        internal:
          names:
          - default
        service:
          externalPort: 8075
          internalPort: 8075
          name: gitaly
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
      gitlab:
        license: {}
      gitlabBase:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
      gitlabVersion: 17.8.1
      hosts:
        domain: localhost
        externalIP: null
        gitlab: {}
        hostSuffix: null
        https: false
        kas: {}
        minio: {}
        pages: {}
        registry: {}
        smartcard: {}
        ssh: null
        tls: {}
      hpa:
        apiVersion: ""
      image: {}
      imagePullSecrets: []
      imageRegistry: ""
      ingress:
        annotations: {}
        apiVersion: ""
        class: nginx
        configureCertmanager: false
        enabled: true
        path: /
        pathType: Prefix
        provider: nginx
        tls:
          enabled: false
        useNewIngressForCerts: false
      initialRootPassword: {}
      job:
        nameSuffixOverride: null
      kas:
        enabled: true
        service:
          apiExternalPort: 8153
        tls:
          enabled: false
          verify: true
      keda:
        enabled: false
      kubectl:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
        securityContext:
          fsGroup: 65534
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
      minio:
        credentials: {}
        enabled: true
      monitoring:
        enabled: false
      nodeAffinity: null
      oauth:
        gitlab-pages: {}
      pages:
        accessControl: false
        apiSecret: {}
        artifactsServer: true
        authSecret: {}
        enabled: false
        externalHttp: []
        externalHttps: []
        host: null
        https: null
        localStore:
          enabled: false
        namespaceInPath: false
        objectStore:
          bucket: gitlab-pages
          connection: {}
          enabled: true
        path: null
        port: null
      pdb:
        apiVersion: ""
      pod:
        labels: {}
      postgresql:
        auth:
          database: ""
          existingSecret: ""
          password: ""
          postgresPassword: ""
          secretKeys:
            adminPasswordKey: ""
            replicationPasswordKey: ""
            userPasswordKey: ""
          username: ""
        service:
          ports:
            postgresql: ""
      praefect:
        authToken: {}
        autoMigrate: true
        dbSecret: {}
        enabled: false
        ntpHost: pool.ntp.org
        psql:
          sslMode: disable
        replaceInternalGitaly: true
        service:
          externalPort: 8075
          internalPort: 8075
          name: praefect
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
        virtualStorages:
        - gitalyReplicas: 3
          maxUnavailable: 1
          name: default
      priorityClassName: ""
      psql:
        ci: {}
        connectTimeout: null
        keepalives: null
        keepalivesCount: null
        keepalivesIdle: null
        keepalivesInterval: null
        main: {}
        password: {}
        tcpUserTimeout: null
      rails:
        bootsnap:
          enabled: false
        sessionStore:
          sessionCookieTokenPrefix: ""
      railsSecrets: {}
      redis:
        auth:
          enabled: true
        sentinelAuth:
          enabled: false
      registry:
        api:
          port: 5000
          protocol: http
          serviceName: registry
        bucket: registry
        certificate: {}
        enabled: true
        host: null
        httpSecret: {}
        notificationSecret: {}
        notifications: {}
        redis:
          cache:
            password: {}
          rateLimiting:
            password: {}
        tls:
          enabled: false
        tokenIssuer: gitlab-issuer
      runner:
        registrationToken: {}
      service:
        annotations: {}
        labels: {}
        ports:
          metrics: 30505
          webservice: 30305
          workhorse: 30405
        type: NodePort
      serviceAccount:
        annotations: {}
        automountServiceAccountToken: false
        create: true
        enabled: false
      shell:
        authToken: {}
        hostKeys: {}
        tcp:
          proxyProtocol: false
      smtp:
        address: smtp.mailgun.org
        authentication: plain
        enabled: false
        open_timeout: 30
        openssl_verify_mode: peer
        password:
          key: password
          secret: ""
        pool: false
        port: 2525
        read_timeout: 60
        starttls_auto: false
        user_name: ""
      spamcheck:
        enabled: false
      storageClass: ""
      time_zone: UTC
      tracing:
        connection:
          string: ""
        urlTemplate: ""
      traefik:
        apiVersion: ""
      webservice:
        workerTimeout: 60
      workhorse:
        serviceName: webservice-default
        tls:
          enabled: false
      zoekt:
        gateway:
          basicAuth: {}
        indexer:
          internalApi: {}
  commonAnnotations: {}
  commonLabels: {}
  containerPorts:
    postgresql: 5432
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  extraDeploy: []
  fullnameOverride: ""
  global:
    affinity:
      nodeAffinity:
        key: topology.kubernetes.io/zone
        values: []
      podAntiAffinity:
        topologyKey: kubernetes.io/hostname
    antiAffinity: soft
    appConfig:
      applicationSettingsCacheSeconds: 60
      artifacts:
        bucket: gitlab-artifacts
        connection: {}
        enabled: true
        proxy_download: true
      backups:
        bucket: gitlab-backups
        tmpBucket: tmp
      ciSecureFiles:
        bucket: gitlab-ci-secure-files
        connection: {}
        enabled: false
      contentSecurityPolicy:
        enabled: false
        report_only: true
      cron_jobs: {}
      defaultColorMode: null
      defaultProjectsFeatures:
        builds: true
        issues: true
        mergeRequests: true
        snippets: true
        wiki: true
      defaultSyntaxHighlightingTheme: null
      defaultTheme: null
      dependencyProxy:
        bucket: gitlab-dependency-proxy
        connection: {}
        enabled: false
        proxy_download: true
      duoAuth:
        enabled: false
      enableImpersonation: null
      enableSeatLink: true
      enableUsagePing: true
      externalDiffs:
        bucket: gitlab-mr-diffs
        connection: {}
        enabled: false
        proxy_download: true
        when: null
      extra:
        bizible: null
        googleAnalyticsId: null
        googleTagManagerNonceId: null
        matomoDisableCookies: null
        matomoSiteId: null
        matomoUrl: null
        oneTrustId: null
      gitlab_docs:
        enabled: false
        host: ""
      gitlab_kas: {}
      graphQlTimeout: null
      gravatar:
        plainUrl: null
        sslUrl: null
      incomingEmail:
        address: ""
        authToken:
          key: authToken
          secret: ""
        clientSecret:
          key: secret
        deleteAfterDelivery: true
        deliveryMethod: webhook
        enabled: false
        expungeDeleted: false
        host: imap.gmail.com
        idleTimeout: 60
        inboxMethod: imap
        logger:
          logPath: /dev/stdout
        mailbox: inbox
        password:
          key: password
          secret: ""
        pollInterval: 60
        port: 993
        ssl: true
        startTls: false
        user: ""
      initialDefaults: {}
      issueClosingPattern: null
      kerberos:
        dedicatedPort:
          enabled: false
          https: true
          port: 8443
        enabled: false
        keytab:
          key: keytab
        krb5Config: ""
        servicePrincipalName: ""
        simpleLdapLinkingAllowedRealms: []
      ldap:
        preventSignin: false
        servers: {}
      lfs:
        bucket: git-lfs
        connection: {}
        enabled: true
        proxy_download: true
      maxRequestDurationSeconds: null
      microsoft_graph_mailer:
        azure_ad_endpoint: https://login.microsoftonline.com
        client_id: ""
        client_secret:
          key: secret
          secret: ""
        enabled: false
        graph_endpoint: https://graph.microsoft.com
        tenant: ""
        user_id: ""
      object_store:
        connection: {}
        enabled: false
        proxy_download: true
        storage_options: {}
      omniauth:
        allowBypassTwoFactor: []
        allowSingleSignOn:
        - saml
        autoLinkLdapUser: false
        autoLinkSamlUser: false
        autoLinkUser: []
        autoSignInWithProvider: null
        blockAutoCreatedUsers: true
        enabled: false
        externalProviders: []
        providers: []
        syncProfileAttributes:
        - email
        syncProfileFromProvider: []
      packages:
        bucket: gitlab-packages
        connection: {}
        enabled: true
        proxy_download: true
      sentry:
        clientside_dsn: null
        dsn: null
        enabled: false
        environment: null
      serviceDeskEmail:
        address: ""
        authToken:
          key: authToken
          secret: ""
        clientSecret:
          key: secret
        deleteAfterDelivery: true
        deliveryMethod: webhook
        enabled: false
        expungeDeleted: false
        host: imap.gmail.com
        idleTimeout: 60
        inboxMethod: imap
        logger:
          logPath: /dev/stdout
        mailbox: inbox
        password:
          key: password
          secret: ""
        pollInterval: 60
        port: 993
        ssl: true
        startTls: false
        user: ""
      sidekiq:
        routingRules: []
      smartcard:
        CASecret: null
        clientCertificateRequiredHost: null
        enabled: false
        requiredForGitAccess: false
        sanExtensions: false
      suggested_reviewers: {}
      terraformState:
        bucket: gitlab-terraform-state
        connection: {}
        enabled: false
      uploads:
        bucket: gitlab-uploads
        connection: {}
        enabled: true
        proxy_download: true
      usernameChangingEnabled: true
      webhookTimeout: null
    application:
      allowClusterRoles: true
      create: false
      links: []
    batch:
      cronJob:
        apiVersion: ""
    certificates:
      customCAs: []
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/certificates
    common:
      labels: {}
    deployment:
      annotations: {}
    edition: ee
    email:
      display_name: GitLab
      from: ""
      reply_to: ""
      smime:
        certName: tls.crt
        enabled: false
        keyName: tls.key
        secretName: ""
      subject_suffix: ""
    extraEnv: {}
    extraEnvFrom: {}
    geo:
      enabled: false
      nodeName: null
      psql:
        password: {}
      registry:
        replication:
          enabled: false
          primaryApiUrl: null
      role: primary
    gitaly:
      authToken: {}
      enabled: true
      external: []
      internal:
        names:
        - default
      service:
        externalPort: 8075
        internalPort: 8075
        name: gitaly
        tls:
          externalPort: 8076
          internalPort: 8076
        type: ClusterIP
      tls:
        enabled: false
    gitlab:
      license: {}
    gitlabBase:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
    gitlabVersion: 17.8.1
    hosts:
      domain: localhost
      externalIP: null
      gitlab: {}
      hostSuffix: null
      https: false
      kas: {}
      minio: {}
      pages: {}
      registry: {}
      smartcard: {}
      ssh: null
      tls: {}
    hpa:
      apiVersion: ""
    image: {}
    imagePullSecrets: []
    imageRegistry: ""
    ingress:
      annotations: {}
      apiVersion: ""
      class: nginx
      configureCertmanager: false
      enabled: true
      path: /
      pathType: Prefix
      provider: nginx
      tls:
        enabled: false
      useNewIngressForCerts: false
    initialRootPassword: {}
    job:
      nameSuffixOverride: null
    kas:
      enabled: true
      service:
        apiExternalPort: 8153
      tls:
        enabled: false
        verify: true
    keda:
      enabled: false
    kubectl:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
      securityContext:
        fsGroup: 65534
        runAsUser: 65534
        seccompProfile:
          type: RuntimeDefault
    minio:
      credentials: {}
      enabled: true
    monitoring:
      enabled: false
    nodeAffinity: null
    oauth:
      gitlab-pages: {}
    pages:
      accessControl: false
      apiSecret: {}
      artifactsServer: true
      authSecret: {}
      enabled: false
      externalHttp: []
      externalHttps: []
      host: null
      https: null
      localStore:
        enabled: false
      namespaceInPath: false
      objectStore:
        bucket: gitlab-pages
        connection: {}
        enabled: true
      path: null
      port: null
    pdb:
      apiVersion: ""
    pod:
      labels: {}
    postgresql:
      auth:
        database: ""
        existingSecret: ""
        password: ""
        postgresPassword: ""
        secretKeys:
          adminPasswordKey: ""
          replicationPasswordKey: ""
          userPasswordKey: ""
        username: ""
      service:
        ports:
          postgresql: ""
    praefect:
      authToken: {}
      autoMigrate: true
      dbSecret: {}
      enabled: false
      ntpHost: pool.ntp.org
      psql:
        sslMode: disable
      replaceInternalGitaly: true
      service:
        externalPort: 8075
        internalPort: 8075
        name: praefect
        tls:
          externalPort: 8076
          internalPort: 8076
        type: ClusterIP
      tls:
        enabled: false
      virtualStorages:
      - gitalyReplicas: 3
        maxUnavailable: 1
        name: default
    priorityClassName: ""
    psql:
      ci: {}
      connectTimeout: null
      keepalives: null
      keepalivesCount: null
      keepalivesIdle: null
      keepalivesInterval: null
      main: {}
      password: {}
      tcpUserTimeout: null
    rails:
      bootsnap:
        enabled: false
      sessionStore:
        sessionCookieTokenPrefix: ""
    railsSecrets: {}
    redis:
      auth:
        enabled: true
      sentinelAuth:
        enabled: false
    registry:
      api:
        port: 5000
        protocol: http
        serviceName: registry
      bucket: registry
      certificate: {}
      enabled: true
      host: null
      httpSecret: {}
      notificationSecret: {}
      notifications: {}
      redis:
        cache:
          password: {}
        rateLimiting:
          password: {}
      tls:
        enabled: false
      tokenIssuer: gitlab-issuer
    runner:
      registrationToken: {}
    service:
      annotations: {}
      labels: {}
      ports:
        metrics: 30505
        webservice: 30305
        workhorse: 30405
      type: NodePort
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: false
      create: true
      enabled: false
    shell:
      authToken: {}
      hostKeys: {}
      tcp:
        proxyProtocol: false
    smtp:
      address: smtp.mailgun.org
      authentication: plain
      enabled: false
      open_timeout: 30
      openssl_verify_mode: peer
      password:
        key: password
        secret: ""
      pool: false
      port: 2525
      read_timeout: 60
      starttls_auto: false
      user_name: ""
    spamcheck:
      enabled: false
    storageClass: ""
    time_zone: UTC
    tracing:
      connection:
        string: ""
      urlTemplate: ""
    traefik:
      apiVersion: ""
    webservice:
      workerTimeout: 60
    workhorse:
      serviceName: webservice-default
      tls:
        enabled: false
    zoekt:
      gateway:
        basicAuth: {}
      indexer:
        internalApi: {}
  image:
    debug: false
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/postgresql
    tag: 14.8.0
  install: true
  kubeVersion: ""
  ldap:
    basedn: ""
    binddn: ""
    bindpw: ""
    enabled: false
    port: ""
    prefix: ""
    scheme: ""
    searchAttribute: ""
    searchFilter: ""
    server: ""
    suffix: ""
    tls:
      enabled: false
    uri: ""
  metrics:
    containerPorts:
      metrics: 9187
    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: 1001
    customLivenessProbe: {}
    customMetrics: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    enabled: true
    extraEnvVars: []
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/postgres-exporter
      tag: 0.12.0-debian-11-r86
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    prometheusRule:
      enabled: false
      labels: {}
      namespace: ""
      rules: []
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    resources:
      limits: {}
      requests: {}
    service:
      annotations:
        gitlab.com/prometheus_port: "9187"
        gitlab.com/prometheus_scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/scrape: "true"
      clusterIP: ""
      ports:
        metrics: 9187
      sessionAffinity: None
    serviceMonitor:
      enabled: false
      honorLabels: false
      interval: ""
      jobLabel: ""
      labels: {}
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scrapeTimeout: ""
      selector: {}
    startupProbe:
      enabled: false
      failureThreshold: 15
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
  nameOverride: ""
  networkPolicy:
    egressRules:
      customRules: []
      denyConnectionsToExternal: false
    enabled: false
    ingressRules:
      primaryAccessOnlyFrom:
        customRules: []
        enabled: false
        namespaceSelector: {}
        podSelector: {}
      readReplicasAccessOnlyFrom:
        customRules: []
        enabled: false
        namespaceSelector: {}
        podSelector: {}
    metrics:
      enabled: false
      namespaceSelector: {}
      podSelector: {}
  persistence:
    enabled: true
    existingClaim: pvc-vol-gitlab
    size: 256Mi
  postgresqlDataDir: /bitnami/postgresql/data
  postgresqlSharedPreloadLibraries: pgaudit
  primary:
    affinity: {}
    annotations: {}
    args: []
    command: []
    configuration: ""
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    existingConfigmap: ""
    existingExtendedConfigmap: ""
    extendedConfiguration: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraPodSpec: {}
    extraVolumeMounts:
    - mountPath: /docker-entrypoint-preinitdb.d/init_revision.sh
      name: custom-init-scripts
      subPath: init_revision.sh
    extraVolumes: []
    hostAliases: []
    hostIPC: false
    hostNetwork: false
    initContainers: []
    initdb:
      args: ""
      password: ""
      postgresqlWalDir: ""
      scripts: {}
      scriptsConfigMap: '{{ include "gitlab.psql.initdbscripts" $}}'
      scriptsSecret: ""
      user: ""
    labels: {}
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    name: primary
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: true
      existingClaim: ""
      labels: {}
      mountPath: /bitnami/postgresql
      selector: {}
      size: 8Gi
      storageClass: ""
      subPath: ""
    pgHbaConfiguration: ""
    podAffinityPreset: ""
    podAnnotations:
      postgresql.gitlab/init-revision: "1"
    podAntiAffinityPreset: soft
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    resources:
      limits: {}
      requests:
        cpu: 250m
        memory: 256Mi
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      headless:
        annotations: {}
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        postgresql: ""
      ports:
        postgresql: 5432
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    sidecars: []
    standby:
      enabled: false
      primaryHost: ""
      primaryPort: ""
    startupProbe:
      enabled: false
      failureThreshold: 15
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      rollingUpdate: {}
      type: RollingUpdate
  psp:
    create: false
  rbac:
    create: false
    rules: []
  readReplicas:
    affinity: {}
    annotations: {}
    args: []
    command: []
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    extendedConfiguration: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraPodSpec: {}
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    hostIPC: false
    hostNetwork: false
    initContainers: []
    labels: {}
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    name: read
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: true
      existingClaim: ""
      labels: {}
      mountPath: /bitnami/postgresql
      selector: {}
      size: 8Gi
      storageClass: ""
      subPath: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replicaCount: 1
    resources:
      limits: {}
      requests:
        cpu: 250m
        memory: 256Mi
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      headless:
        annotations: {}
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        postgresql: ""
      ports:
        postgresql: 5432
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 15
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      rollingUpdate: {}
      type: RollingUpdate
  replication:
    applicationName: my_application
    numSynchronousReplicas: 0
    synchronousCommit: "off"
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: false
    name: ""
  serviceBindings:
    enabled: false
  shmVolume:
    enabled: true
    sizeLimit: ""
  tls:
    autoGenerated: false
    certCAFilename: ""
    certFilename: ""
    certKeyFilename: ""
    certificatesSecret: ""
    crlFilename: ""
    enabled: false
    preferServerCiphers: true
  volumePermissions:
    containerSecurityContext:
      runAsUser: 0
    enabled: false
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 11-debian-11-r115
    resources:
      limits: {}
      requests: {}
prometheus:
  alertmanager:
    enabled: false
  alertmanagerFiles:
    alertmanager.yml: {}
  configmapReload:
    prometheus:
      containerSecurityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        runAsNonRoot: true
        runAsUser: 1000
        seccompProfile:
          type: RuntimeDefault
  install: false
  kubeStateMetrics:
    enabled: false
  nodeExporter:
    enabled: false
  podSecurityPolicy:
    enabled: false
  pushgateway:
    enabled: false
  rbac:
    create: true
  server:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      runAsNonRoot: true
      runAsUser: 1000
      seccompProfile:
        type: RuntimeDefault
    image:
      tag: v2.38.0
    retention: 15d
    strategy:
      type: Recreate
  serverFiles:
    prometheus.yml:
      scrape_configs:
      - job_name: prometheus
        static_configs:
        - targets:
          - localhost:9090
      - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        job_name: kubernetes-apiservers
        kubernetes_sd_configs:
        - role: endpoints
        relabel_configs:
        - action: keep
          regex: default;kubernetes;https
          source_labels:
          - __meta_kubernetes_namespace
          - __meta_kubernetes_service_name
          - __meta_kubernetes_endpoint_port_name
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
      - job_name: kubernetes-pods
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - action: keep
          regex: true
          source_labels:
          - __meta_kubernetes_pod_annotation_gitlab_com_prometheus_scrape
        - action: replace
          regex: (https?)
          source_labels:
          - __meta_kubernetes_pod_annotation_gitlab_com_prometheus_scheme
          target_label: __scheme__
        - action: replace
          regex: (.+)
          source_labels:
          - __meta_kubernetes_pod_annotation_gitlab_com_prometheus_path
          target_label: __metrics_path__
        - action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          source_labels:
          - __address__
          - __meta_kubernetes_pod_annotation_gitlab_com_prometheus_port
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - action: replace
          source_labels:
          - __meta_kubernetes_namespace
          target_label: kubernetes_namespace
        - action: replace
          source_labels:
          - __meta_kubernetes_pod_name
          target_label: kubernetes_pod_name
      - job_name: kubernetes-service-endpoints
        kubernetes_sd_configs:
        - role: endpoints
        relabel_configs:
        - action: keep
          regex: true
          source_labels:
          - __meta_kubernetes_service_annotation_gitlab_com_prometheus_scrape
        - action: replace
          regex: (https?)
          source_labels:
          - __meta_kubernetes_service_annotation_gitlab_com_prometheus_scheme
          target_label: __scheme__
        - action: replace
          regex: (.+)
          source_labels:
          - __meta_kubernetes_service_annotation_gitlab_com_prometheus_path
          target_label: __metrics_path__
        - action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          source_labels:
          - __address__
          - __meta_kubernetes_service_annotation_gitlab_com_prometheus_port
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - action: replace
          source_labels:
          - __meta_kubernetes_namespace
          target_label: kubernetes_namespace
        - action: replace
          source_labels:
          - __meta_kubernetes_service_name
          target_label: kubernetes_name
        - action: replace
          source_labels:
          - __meta_kubernetes_pod_node_name
          target_label: kubernetes_node
      - job_name: kubernetes-services
        kubernetes_sd_configs:
        - role: service
        metrics_path: /probe
        params:
          module:
          - http_2xx
        relabel_configs:
        - action: keep
          regex: true
          source_labels:
          - __meta_kubernetes_service_annotation_gitlab_com_prometheus_probe
        - source_labels:
          - __address__
          target_label: __param_target
        - replacement: blackbox
          target_label: __address__
        - source_labels:
          - __param_target
          target_label: instance
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels:
          - __meta_kubernetes_namespace
          target_label: kubernetes_namespace
        - source_labels:
          - __meta_kubernetes_service_name
          target_label: kubernetes_name
redis:
  architecture: standalone
  auth:
    enabled: true
    existingSecret: gitlab-redis-secret
    existingSecretKey: redis-password
    existingSecretPasswordKey: ""
    password: ""
    sentinel: true
    usePasswordFiles: true
  cluster:
    enabled: false
  clusterDomain: cluster.local
  common:
    exampleValue: common-chart
    global:
      affinity:
        nodeAffinity:
          key: topology.kubernetes.io/zone
          values: []
        podAntiAffinity:
          topologyKey: kubernetes.io/hostname
      antiAffinity: soft
      appConfig:
        applicationSettingsCacheSeconds: 60
        artifacts:
          bucket: gitlab-artifacts
          connection: {}
          enabled: true
          proxy_download: true
        backups:
          bucket: gitlab-backups
          tmpBucket: tmp
        ciSecureFiles:
          bucket: gitlab-ci-secure-files
          connection: {}
          enabled: false
        contentSecurityPolicy:
          enabled: false
          report_only: true
        cron_jobs: {}
        defaultColorMode: null
        defaultProjectsFeatures:
          builds: true
          issues: true
          mergeRequests: true
          snippets: true
          wiki: true
        defaultSyntaxHighlightingTheme: null
        defaultTheme: null
        dependencyProxy:
          bucket: gitlab-dependency-proxy
          connection: {}
          enabled: false
          proxy_download: true
        duoAuth:
          enabled: false
        enableImpersonation: null
        enableSeatLink: true
        enableUsagePing: true
        externalDiffs:
          bucket: gitlab-mr-diffs
          connection: {}
          enabled: false
          proxy_download: true
          when: null
        extra:
          bizible: null
          googleAnalyticsId: null
          googleTagManagerNonceId: null
          matomoDisableCookies: null
          matomoSiteId: null
          matomoUrl: null
          oneTrustId: null
        gitlab_docs:
          enabled: false
          host: ""
        gitlab_kas: {}
        graphQlTimeout: null
        gravatar:
          plainUrl: null
          sslUrl: null
        incomingEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        initialDefaults: {}
        issueClosingPattern: null
        kerberos:
          dedicatedPort:
            enabled: false
            https: true
            port: 8443
          enabled: false
          keytab:
            key: keytab
          krb5Config: ""
          servicePrincipalName: ""
          simpleLdapLinkingAllowedRealms: []
        ldap:
          preventSignin: false
          servers: {}
        lfs:
          bucket: git-lfs
          connection: {}
          enabled: true
          proxy_download: true
        maxRequestDurationSeconds: null
        microsoft_graph_mailer:
          azure_ad_endpoint: https://login.microsoftonline.com
          client_id: ""
          client_secret:
            key: secret
            secret: ""
          enabled: false
          graph_endpoint: https://graph.microsoft.com
          tenant: ""
          user_id: ""
        object_store:
          connection: {}
          enabled: false
          proxy_download: true
          storage_options: {}
        omniauth:
          allowBypassTwoFactor: []
          allowSingleSignOn:
          - saml
          autoLinkLdapUser: false
          autoLinkSamlUser: false
          autoLinkUser: []
          autoSignInWithProvider: null
          blockAutoCreatedUsers: true
          enabled: false
          externalProviders: []
          providers: []
          syncProfileAttributes:
          - email
          syncProfileFromProvider: []
        packages:
          bucket: gitlab-packages
          connection: {}
          enabled: true
          proxy_download: true
        sentry:
          clientside_dsn: null
          dsn: null
          enabled: false
          environment: null
        serviceDeskEmail:
          address: ""
          authToken:
            key: authToken
            secret: ""
          clientSecret:
            key: secret
          deleteAfterDelivery: true
          deliveryMethod: webhook
          enabled: false
          expungeDeleted: false
          host: imap.gmail.com
          idleTimeout: 60
          inboxMethod: imap
          logger:
            logPath: /dev/stdout
          mailbox: inbox
          password:
            key: password
            secret: ""
          pollInterval: 60
          port: 993
          ssl: true
          startTls: false
          user: ""
        sidekiq:
          routingRules: []
        smartcard:
          CASecret: null
          clientCertificateRequiredHost: null
          enabled: false
          requiredForGitAccess: false
          sanExtensions: false
        suggested_reviewers: {}
        terraformState:
          bucket: gitlab-terraform-state
          connection: {}
          enabled: false
        uploads:
          bucket: gitlab-uploads
          connection: {}
          enabled: true
          proxy_download: true
        usernameChangingEnabled: true
        webhookTimeout: null
      application:
        allowClusterRoles: true
        create: false
        links: []
      batch:
        cronJob:
          apiVersion: ""
      certificates:
        customCAs: []
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/certificates
      common:
        labels: {}
      deployment:
        annotations: {}
      edition: ee
      email:
        display_name: GitLab
        from: ""
        reply_to: ""
        smime:
          certName: tls.crt
          enabled: false
          keyName: tls.key
          secretName: ""
        subject_suffix: ""
      extraEnv: {}
      extraEnvFrom: {}
      geo:
        enabled: false
        nodeName: null
        psql:
          password: {}
        registry:
          replication:
            enabled: false
            primaryApiUrl: null
        role: primary
      gitaly:
        authToken: {}
        enabled: true
        external: []
        internal:
          names:
          - default
        service:
          externalPort: 8075
          internalPort: 8075
          name: gitaly
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
      gitlab:
        license: {}
      gitlabBase:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
      gitlabVersion: 17.8.1
      hosts:
        domain: localhost
        externalIP: null
        gitlab: {}
        hostSuffix: null
        https: false
        kas: {}
        minio: {}
        pages: {}
        registry: {}
        smartcard: {}
        ssh: null
        tls: {}
      hpa:
        apiVersion: ""
      image: {}
      imagePullSecrets: []
      imageRegistry: ""
      ingress:
        annotations: {}
        apiVersion: ""
        class: nginx
        configureCertmanager: false
        enabled: true
        path: /
        pathType: Prefix
        provider: nginx
        tls:
          enabled: false
        useNewIngressForCerts: false
      initialRootPassword: {}
      job:
        nameSuffixOverride: null
      kas:
        enabled: true
        service:
          apiExternalPort: 8153
        tls:
          enabled: false
          verify: true
      keda:
        enabled: false
      kubectl:
        image:
          repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
        securityContext:
          fsGroup: 65534
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
      minio:
        credentials: {}
        enabled: true
      monitoring:
        enabled: false
      nodeAffinity: null
      oauth:
        gitlab-pages: {}
      pages:
        accessControl: false
        apiSecret: {}
        artifactsServer: true
        authSecret: {}
        enabled: false
        externalHttp: []
        externalHttps: []
        host: null
        https: null
        localStore:
          enabled: false
        namespaceInPath: false
        objectStore:
          bucket: gitlab-pages
          connection: {}
          enabled: true
        path: null
        port: null
      pdb:
        apiVersion: ""
      pod:
        labels: {}
      praefect:
        authToken: {}
        autoMigrate: true
        dbSecret: {}
        enabled: false
        ntpHost: pool.ntp.org
        psql:
          sslMode: disable
        replaceInternalGitaly: true
        service:
          externalPort: 8075
          internalPort: 8075
          name: praefect
          tls:
            externalPort: 8076
            internalPort: 8076
          type: ClusterIP
        tls:
          enabled: false
        virtualStorages:
        - gitalyReplicas: 3
          maxUnavailable: 1
          name: default
      priorityClassName: ""
      psql:
        ci: {}
        connectTimeout: null
        keepalives: null
        keepalivesCount: null
        keepalivesIdle: null
        keepalivesInterval: null
        main: {}
        password: {}
        tcpUserTimeout: null
      rails:
        bootsnap:
          enabled: false
        sessionStore:
          sessionCookieTokenPrefix: ""
      railsSecrets: {}
      redis:
        auth:
          enabled: true
        password: ""
        sentinelAuth:
          enabled: false
      registry:
        api:
          port: 5000
          protocol: http
          serviceName: registry
        bucket: registry
        certificate: {}
        enabled: true
        host: null
        httpSecret: {}
        notificationSecret: {}
        notifications: {}
        redis:
          cache:
            password: {}
          rateLimiting:
            password: {}
        tls:
          enabled: false
        tokenIssuer: gitlab-issuer
      runner:
        registrationToken: {}
      service:
        annotations: {}
        labels: {}
        ports:
          metrics: 30505
          webservice: 30305
          workhorse: 30405
        type: NodePort
      serviceAccount:
        annotations: {}
        automountServiceAccountToken: false
        create: true
        enabled: false
      shell:
        authToken: {}
        hostKeys: {}
        tcp:
          proxyProtocol: false
      smtp:
        address: smtp.mailgun.org
        authentication: plain
        enabled: false
        open_timeout: 30
        openssl_verify_mode: peer
        password:
          key: password
          secret: ""
        pool: false
        port: 2525
        read_timeout: 60
        starttls_auto: false
        user_name: ""
      spamcheck:
        enabled: false
      storageClass: ""
      time_zone: UTC
      tracing:
        connection:
          string: ""
        urlTemplate: ""
      traefik:
        apiVersion: ""
      webservice:
        workerTimeout: 60
      workhorse:
        serviceName: webservice-default
        tls:
          enabled: false
      zoekt:
        gateway:
          basicAuth: {}
        indexer:
          internalApi: {}
  commonAnnotations: {}
  commonConfiguration: |-
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
  commonLabels: {}
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  existingConfigmap: ""
  extraDeploy: []
  fullnameOverride: ""
  global:
    affinity:
      nodeAffinity:
        key: topology.kubernetes.io/zone
        values: []
      podAntiAffinity:
        topologyKey: kubernetes.io/hostname
    antiAffinity: soft
    appConfig:
      applicationSettingsCacheSeconds: 60
      artifacts:
        bucket: gitlab-artifacts
        connection: {}
        enabled: true
        proxy_download: true
      backups:
        bucket: gitlab-backups
        tmpBucket: tmp
      ciSecureFiles:
        bucket: gitlab-ci-secure-files
        connection: {}
        enabled: false
      contentSecurityPolicy:
        enabled: false
        report_only: true
      cron_jobs: {}
      defaultColorMode: null
      defaultProjectsFeatures:
        builds: true
        issues: true
        mergeRequests: true
        snippets: true
        wiki: true
      defaultSyntaxHighlightingTheme: null
      defaultTheme: null
      dependencyProxy:
        bucket: gitlab-dependency-proxy
        connection: {}
        enabled: false
        proxy_download: true
      duoAuth:
        enabled: false
      enableImpersonation: null
      enableSeatLink: true
      enableUsagePing: true
      externalDiffs:
        bucket: gitlab-mr-diffs
        connection: {}
        enabled: false
        proxy_download: true
        when: null
      extra:
        bizible: null
        googleAnalyticsId: null
        googleTagManagerNonceId: null
        matomoDisableCookies: null
        matomoSiteId: null
        matomoUrl: null
        oneTrustId: null
      gitlab_docs:
        enabled: false
        host: ""
      gitlab_kas: {}
      graphQlTimeout: null
      gravatar:
        plainUrl: null
        sslUrl: null
      incomingEmail:
        address: ""
        authToken:
          key: authToken
          secret: ""
        clientSecret:
          key: secret
        deleteAfterDelivery: true
        deliveryMethod: webhook
        enabled: false
        expungeDeleted: false
        host: imap.gmail.com
        idleTimeout: 60
        inboxMethod: imap
        logger:
          logPath: /dev/stdout
        mailbox: inbox
        password:
          key: password
          secret: ""
        pollInterval: 60
        port: 993
        ssl: true
        startTls: false
        user: ""
      initialDefaults: {}
      issueClosingPattern: null
      kerberos:
        dedicatedPort:
          enabled: false
          https: true
          port: 8443
        enabled: false
        keytab:
          key: keytab
        krb5Config: ""
        servicePrincipalName: ""
        simpleLdapLinkingAllowedRealms: []
      ldap:
        preventSignin: false
        servers: {}
      lfs:
        bucket: git-lfs
        connection: {}
        enabled: true
        proxy_download: true
      maxRequestDurationSeconds: null
      microsoft_graph_mailer:
        azure_ad_endpoint: https://login.microsoftonline.com
        client_id: ""
        client_secret:
          key: secret
          secret: ""
        enabled: false
        graph_endpoint: https://graph.microsoft.com
        tenant: ""
        user_id: ""
      object_store:
        connection: {}
        enabled: false
        proxy_download: true
        storage_options: {}
      omniauth:
        allowBypassTwoFactor: []
        allowSingleSignOn:
        - saml
        autoLinkLdapUser: false
        autoLinkSamlUser: false
        autoLinkUser: []
        autoSignInWithProvider: null
        blockAutoCreatedUsers: true
        enabled: false
        externalProviders: []
        providers: []
        syncProfileAttributes:
        - email
        syncProfileFromProvider: []
      packages:
        bucket: gitlab-packages
        connection: {}
        enabled: true
        proxy_download: true
      sentry:
        clientside_dsn: null
        dsn: null
        enabled: false
        environment: null
      serviceDeskEmail:
        address: ""
        authToken:
          key: authToken
          secret: ""
        clientSecret:
          key: secret
        deleteAfterDelivery: true
        deliveryMethod: webhook
        enabled: false
        expungeDeleted: false
        host: imap.gmail.com
        idleTimeout: 60
        inboxMethod: imap
        logger:
          logPath: /dev/stdout
        mailbox: inbox
        password:
          key: password
          secret: ""
        pollInterval: 60
        port: 993
        ssl: true
        startTls: false
        user: ""
      sidekiq:
        routingRules: []
      smartcard:
        CASecret: null
        clientCertificateRequiredHost: null
        enabled: false
        requiredForGitAccess: false
        sanExtensions: false
      suggested_reviewers: {}
      terraformState:
        bucket: gitlab-terraform-state
        connection: {}
        enabled: false
      uploads:
        bucket: gitlab-uploads
        connection: {}
        enabled: true
        proxy_download: true
      usernameChangingEnabled: true
      webhookTimeout: null
    application:
      allowClusterRoles: true
      create: false
      links: []
    batch:
      cronJob:
        apiVersion: ""
    certificates:
      customCAs: []
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/certificates
    common:
      labels: {}
    deployment:
      annotations: {}
    edition: ee
    email:
      display_name: GitLab
      from: ""
      reply_to: ""
      smime:
        certName: tls.crt
        enabled: false
        keyName: tls.key
        secretName: ""
      subject_suffix: ""
    extraEnv: {}
    extraEnvFrom: {}
    geo:
      enabled: false
      nodeName: null
      psql:
        password: {}
      registry:
        replication:
          enabled: false
          primaryApiUrl: null
      role: primary
    gitaly:
      authToken: {}
      enabled: true
      external: []
      internal:
        names:
        - default
      service:
        externalPort: 8075
        internalPort: 8075
        name: gitaly
        tls:
          externalPort: 8076
          internalPort: 8076
        type: ClusterIP
      tls:
        enabled: false
    gitlab:
      license: {}
    gitlabBase:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
    gitlabVersion: 17.8.1
    hosts:
      domain: localhost
      externalIP: null
      gitlab: {}
      hostSuffix: null
      https: false
      kas: {}
      minio: {}
      pages: {}
      registry: {}
      smartcard: {}
      ssh: null
      tls: {}
    hpa:
      apiVersion: ""
    image: {}
    imagePullSecrets: []
    imageRegistry: ""
    ingress:
      annotations: {}
      apiVersion: ""
      class: nginx
      configureCertmanager: false
      enabled: true
      path: /
      pathType: Prefix
      provider: nginx
      tls:
        enabled: false
      useNewIngressForCerts: false
    initialRootPassword: {}
    job:
      nameSuffixOverride: null
    kas:
      enabled: true
      service:
        apiExternalPort: 8153
      tls:
        enabled: false
        verify: true
    keda:
      enabled: false
    kubectl:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
      securityContext:
        fsGroup: 65534
        runAsUser: 65534
        seccompProfile:
          type: RuntimeDefault
    minio:
      credentials: {}
      enabled: true
    monitoring:
      enabled: false
    nodeAffinity: null
    oauth:
      gitlab-pages: {}
    pages:
      accessControl: false
      apiSecret: {}
      artifactsServer: true
      authSecret: {}
      enabled: false
      externalHttp: []
      externalHttps: []
      host: null
      https: null
      localStore:
        enabled: false
      namespaceInPath: false
      objectStore:
        bucket: gitlab-pages
        connection: {}
        enabled: true
      path: null
      port: null
    pdb:
      apiVersion: ""
    pod:
      labels: {}
    praefect:
      authToken: {}
      autoMigrate: true
      dbSecret: {}
      enabled: false
      ntpHost: pool.ntp.org
      psql:
        sslMode: disable
      replaceInternalGitaly: true
      service:
        externalPort: 8075
        internalPort: 8075
        name: praefect
        tls:
          externalPort: 8076
          internalPort: 8076
        type: ClusterIP
      tls:
        enabled: false
      virtualStorages:
      - gitalyReplicas: 3
        maxUnavailable: 1
        name: default
    priorityClassName: ""
    psql:
      ci: {}
      connectTimeout: null
      keepalives: null
      keepalivesCount: null
      keepalivesIdle: null
      keepalivesInterval: null
      main: {}
      password: {}
      tcpUserTimeout: null
    rails:
      bootsnap:
        enabled: false
      sessionStore:
        sessionCookieTokenPrefix: ""
    railsSecrets: {}
    redis:
      auth:
        enabled: true
      password: ""
      sentinelAuth:
        enabled: false
    registry:
      api:
        port: 5000
        protocol: http
        serviceName: registry
      bucket: registry
      certificate: {}
      enabled: true
      host: null
      httpSecret: {}
      notificationSecret: {}
      notifications: {}
      redis:
        cache:
          password: {}
        rateLimiting:
          password: {}
      tls:
        enabled: false
      tokenIssuer: gitlab-issuer
    runner:
      registrationToken: {}
    service:
      annotations: {}
      labels: {}
      ports:
        metrics: 30505
        webservice: 30305
        workhorse: 30405
      type: NodePort
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: false
      create: true
      enabled: false
    shell:
      authToken: {}
      hostKeys: {}
      tcp:
        proxyProtocol: false
    smtp:
      address: smtp.mailgun.org
      authentication: plain
      enabled: false
      open_timeout: 30
      openssl_verify_mode: peer
      password:
        key: password
        secret: ""
      pool: false
      port: 2525
      read_timeout: 60
      starttls_auto: false
      user_name: ""
    spamcheck:
      enabled: false
    storageClass: ""
    time_zone: UTC
    tracing:
      connection:
        string: ""
      urlTemplate: ""
    traefik:
      apiVersion: ""
    webservice:
      workerTimeout: 60
    workhorse:
      serviceName: webservice-default
      tls:
        enabled: false
    zoekt:
      gateway:
        basicAuth: {}
      indexer:
        internalApi: {}
  image:
    debug: false
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/redis
    tag: 6.2.16-debian-12-r1
  install: true
  kubeVersion: ""
  master:
    affinity: {}
    args: []
    command: []
    configuration: ""
    containerPorts:
      redis: 6379
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    count: 1
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    disableCommands:
    - FLUSHDB
    - FLUSHALL
    dnsConfig: {}
    dnsPolicy: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: []
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    initContainers: []
    kind: StatefulSet
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: true
      existingClaim: ""
      medium: ""
      path: /data
      selector: {}
      size: 8Gi
      sizeLimit: ""
      storageClass: ""
      subPath: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    preExecCmds: []
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits: {}
      requests: {}
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      internalTrafficPolicy: Cluster
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        redis: ""
      ports:
        redis: 6379
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    shareProcessNamespace: false
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: 30
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      rollingUpdate: {}
      type: RollingUpdate
  metrics:
    command: []
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    enabled: true
    extraArgs: {}
    extraEnvVars: []
    extraVolumeMounts: []
    extraVolumes: []
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/redis-exporter
      tag: 1.46.0-debian-11-r8
    podAnnotations:
      prometheus.io/port: "9121"
      prometheus.io/scrape: "true"
    podLabels: {}
    prometheusRule:
      additionalLabels: {}
      enabled: false
      namespace: ""
      rules: []
    redisTargetHost: localhost
    resources:
      limits: {}
      requests: {}
    service:
      annotations: {}
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      port: 9121
      type: ClusterIP
    serviceMonitor:
      additionalLabels: {}
      enabled: false
      honorLabels: false
      interval: 30s
      metricRelabelings: []
      namespace: ""
      relabellings: []
      scrapeTimeout: ""
  nameOverride: ""
  networkPolicy:
    allowExternal: true
    enabled: false
    extraEgress: []
    extraIngress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  pdb:
    create: false
    maxUnavailable: ""
    minAvailable: 1
  persistence:
    enabled: true
    existingClaim: pvc-vol-gitlab
  podSecurityPolicy:
    create: false
    enabled: false
  rbac:
    create: false
    rules: []
  replica:
    affinity: {}
    args: []
    autoscaling:
      enabled: false
      maxReplicas: 11
      minReplicas: 1
      targetCPU: ""
      targetMemory: ""
    command: []
    configuration: ""
    containerPorts:
      redis: 6379
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    disableCommands:
    - FLUSHDB
    - FLUSHALL
    dnsConfig: {}
    dnsPolicy: ""
    externalMaster:
      enabled: false
      host: ""
      port: 6379
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraFlags: []
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    initContainers: []
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: true
      existingClaim: ""
      medium: ""
      path: /data
      selector: {}
      size: 8Gi
      sizeLimit: ""
      storageClass: ""
      subPath: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: ""
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    preExecCmds: []
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    replicaCount: 3
    resources:
      limits: {}
      requests: {}
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      internalTrafficPolicy: Cluster
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        redis: ""
      ports:
        redis: 6379
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    shareProcessNamespace: false
    sidecars: []
    startupProbe:
      enabled: true
      failureThreshold: 22
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: 30
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      rollingUpdate: {}
      type: RollingUpdate
  secretAnnotations: {}
  sentinel:
    args: []
    automateClusterRecovery: false
    command: []
    configuration: ""
    containerPorts:
      sentinel: 26379
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    downAfterMilliseconds: 60000
    enabled: false
    externalMaster:
      enabled: false
      host: ""
      port: 6379
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraVolumeMounts: []
    extraVolumes: []
    failoverTimeout: 18000
    getMasterTimeout: 220
    image:
      debug: false
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/redis-sentinel
      tag: 6.2.7-debian-11-r12
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    masterSet: mymaster
    parallelSyncs: 1
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: false
      medium: ""
      selector: {}
      size: 100Mi
      storageClass: ""
    preExecCmds: []
    quorum: 2
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits: {}
      requests: {}
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        redis: ""
        sentinel: ""
      ports:
        redis: 6379
        sentinel: 26379
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    startupProbe:
      enabled: true
      failureThreshold: 22
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    terminationGracePeriodSeconds: 30
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: ""
  sysctl:
    command: []
    enabled: false
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 11-debian-11-r11
    mountHostSys: false
    resources:
      limits: {}
      requests: {}
  tls:
    authClients: true
    autoGenerated: false
    certCAFilename: ""
    certFilename: ""
    certKeyFilename: ""
    certificatesSecret: ""
    dhParamsFilename: ""
    enabled: false
    existingSecret: ""
  useExternalDNS:
    additionalAnnotations: {}
    annotationKey: external-dns.alpha.kubernetes.io/
    enabled: false
    suffix: ""
  volumePermissions:
    containerSecurityContext:
      runAsUser: 0
    enabled: false
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 11-debian-11-r11
    resources:
      limits: {}
      requests: {}
registry:
  affinity:
    nodeAffinity: {}
    podAntiAffinity: {}
  annotations: {}
  authAutoRedirect: false
  common:
    labels: {}
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    runAsNonRoot: true
    runAsUser: 1000
  database:
    backgroundMigrations:
      enabled: false
    configure: false
    enabled: false
    loadBalancing:
      enabled: false
    migrations:
      activeDeadlineSeconds: 3600
      annotations: {}
      backoffLimit: 6
      enabled: true
    name: registry
    password: {}
    ssl: {}
    sslmode: disable
    user: registry
  debug:
    addr:
      port: 5001
    prometheus:
      enabled: false
    tls:
      clientCAs: []
      enabled: false
      minimumTLS: tls1.2
  deployment:
    livenessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 5
      path: /debug/health
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    readinessProbe:
      enabled: true
      failureThreshold: 3
      initialDelaySeconds: 5
      path: /debug/health
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    strategy: {}
    terminationGracePeriodSeconds: 30
  draintimeout: "0"
  enabled: true
  gc:
    disabled: false
  global:
    affinity:
      nodeAffinity:
        key: topology.kubernetes.io/zone
        values: []
      podAntiAffinity:
        topologyKey: kubernetes.io/hostname
    antiAffinity: soft
    appConfig:
      applicationSettingsCacheSeconds: 60
      artifacts:
        bucket: gitlab-artifacts
        connection: {}
        enabled: true
        proxy_download: true
      backups:
        bucket: gitlab-backups
        tmpBucket: tmp
      ciSecureFiles:
        bucket: gitlab-ci-secure-files
        connection: {}
        enabled: false
      contentSecurityPolicy:
        enabled: false
        report_only: true
      cron_jobs: {}
      defaultColorMode: null
      defaultProjectsFeatures:
        builds: true
        issues: true
        mergeRequests: true
        snippets: true
        wiki: true
      defaultSyntaxHighlightingTheme: null
      defaultTheme: null
      dependencyProxy:
        bucket: gitlab-dependency-proxy
        connection: {}
        enabled: false
        proxy_download: true
      duoAuth:
        enabled: false
      enableImpersonation: null
      enableSeatLink: true
      enableUsagePing: true
      externalDiffs:
        bucket: gitlab-mr-diffs
        connection: {}
        enabled: false
        proxy_download: true
        when: null
      extra:
        bizible: null
        googleAnalyticsId: null
        googleTagManagerNonceId: null
        matomoDisableCookies: null
        matomoSiteId: null
        matomoUrl: null
        oneTrustId: null
      gitlab_docs:
        enabled: false
        host: ""
      gitlab_kas: {}
      graphQlTimeout: null
      gravatar:
        plainUrl: null
        sslUrl: null
      incomingEmail:
        address: ""
        authToken:
          key: authToken
          secret: ""
        clientSecret:
          key: secret
        deleteAfterDelivery: true
        deliveryMethod: webhook
        enabled: false
        expungeDeleted: false
        host: imap.gmail.com
        idleTimeout: 60
        inboxMethod: imap
        logger:
          logPath: /dev/stdout
        mailbox: inbox
        password:
          key: password
          secret: ""
        pollInterval: 60
        port: 993
        ssl: true
        startTls: false
        user: ""
      initialDefaults: {}
      issueClosingPattern: null
      kerberos:
        dedicatedPort:
          enabled: false
          https: true
          port: 8443
        enabled: false
        keytab:
          key: keytab
        krb5Config: ""
        servicePrincipalName: ""
        simpleLdapLinkingAllowedRealms: []
      ldap:
        preventSignin: false
        servers: {}
      lfs:
        bucket: git-lfs
        connection: {}
        enabled: true
        proxy_download: true
      maxRequestDurationSeconds: null
      microsoft_graph_mailer:
        azure_ad_endpoint: https://login.microsoftonline.com
        client_id: ""
        client_secret:
          key: secret
          secret: ""
        enabled: false
        graph_endpoint: https://graph.microsoft.com
        tenant: ""
        user_id: ""
      object_store:
        connection: {}
        enabled: false
        proxy_download: true
        storage_options: {}
      omniauth:
        allowBypassTwoFactor: []
        allowSingleSignOn:
        - saml
        autoLinkLdapUser: false
        autoLinkSamlUser: false
        autoLinkUser: []
        autoSignInWithProvider: null
        blockAutoCreatedUsers: true
        enabled: false
        externalProviders: []
        providers: []
        syncProfileAttributes:
        - email
        syncProfileFromProvider: []
      packages:
        bucket: gitlab-packages
        connection: {}
        enabled: true
        proxy_download: true
      sentry:
        clientside_dsn: null
        dsn: null
        enabled: false
        environment: null
      serviceDeskEmail:
        address: ""
        authToken:
          key: authToken
          secret: ""
        clientSecret:
          key: secret
        deleteAfterDelivery: true
        deliveryMethod: webhook
        enabled: false
        expungeDeleted: false
        host: imap.gmail.com
        idleTimeout: 60
        inboxMethod: imap
        logger:
          logPath: /dev/stdout
        mailbox: inbox
        password:
          key: password
          secret: ""
        pollInterval: 60
        port: 993
        ssl: true
        startTls: false
        user: ""
      sidekiq:
        routingRules: []
      smartcard:
        CASecret: null
        clientCertificateRequiredHost: null
        enabled: false
        requiredForGitAccess: false
        sanExtensions: false
      suggested_reviewers: {}
      terraformState:
        bucket: gitlab-terraform-state
        connection: {}
        enabled: false
      uploads:
        bucket: gitlab-uploads
        connection: {}
        enabled: true
        proxy_download: true
      usernameChangingEnabled: true
      webhookTimeout: null
    application:
      allowClusterRoles: true
      create: false
      links: []
    batch:
      cronJob:
        apiVersion: ""
    certificates:
      customCAs: []
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/certificates
    common:
      labels: {}
    deployment:
      annotations: {}
    edition: ee
    email:
      display_name: GitLab
      from: ""
      reply_to: ""
      smime:
        certName: tls.crt
        enabled: false
        keyName: tls.key
        secretName: ""
      subject_suffix: ""
    extraEnv: {}
    extraEnvFrom: {}
    geo:
      enabled: false
      nodeName: null
      psql:
        password: {}
      registry:
        replication:
          enabled: false
          primaryApiUrl: null
      role: primary
    gitaly:
      authToken: {}
      enabled: true
      external: []
      internal:
        names:
        - default
      service:
        externalPort: 8075
        internalPort: 8075
        name: gitaly
        tls:
          externalPort: 8076
          internalPort: 8076
        type: ClusterIP
      tls:
        enabled: false
    gitlab:
      license: {}
    gitlabBase:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-base
    gitlabVersion: 17.8.1
    hosts:
      domain: localhost
      externalIP: null
      gitlab: {}
      https: false
      kas: {}
      minio: {}
      pages: {}
      registry: {}
      smartcard: {}
      ssh: null
      tls: {}
    hpa:
      apiVersion: ""
    image: {}
    ingress:
      annotations: {}
      apiVersion: ""
      class: nginx
      configureCertmanager: false
      enabled: true
      path: /
      pathType: Prefix
      provider: nginx
      tls:
        enabled: false
      useNewIngressForCerts: false
    initialRootPassword: {}
    job:
      nameSuffixOverride: null
    kas:
      enabled: true
      service:
        apiExternalPort: 8153
      tls:
        enabled: false
        verify: true
    keda:
      enabled: false
    kubectl:
      image:
        repository: registry.gitlab.com/gitlab-org/build/cng/kubectl
      securityContext:
        fsGroup: 65534
        runAsUser: 65534
        seccompProfile:
          type: RuntimeDefault
    minio:
      credentials: {}
      enabled: true
    monitoring:
      enabled: false
    nodeAffinity: null
    oauth:
      gitlab-pages: {}
    pages:
      accessControl: false
      apiSecret: {}
      artifactsServer: true
      authSecret: {}
      enabled: false
      externalHttp: []
      externalHttps: []
      host: null
      https: null
      localStore:
        enabled: false
      namespaceInPath: false
      objectStore:
        bucket: gitlab-pages
        connection: {}
        enabled: true
      path: null
      port: null
    pdb:
      apiVersion: ""
    pod:
      labels: {}
    praefect:
      authToken: {}
      autoMigrate: true
      dbSecret: {}
      enabled: false
      ntpHost: pool.ntp.org
      psql:
        sslMode: disable
      replaceInternalGitaly: true
      service:
        externalPort: 8075
        internalPort: 8075
        name: praefect
        tls:
          externalPort: 8076
          internalPort: 8076
        type: ClusterIP
      tls:
        enabled: false
      virtualStorages:
      - gitalyReplicas: 3
        maxUnavailable: 1
        name: default
    priorityClassName: ""
    psql:
      ci: {}
      connectTimeout: null
      keepalives: null
      keepalivesCount: null
      keepalivesIdle: null
      keepalivesInterval: null
      main: {}
      password: {}
      ssl: {}
      tcpUserTimeout: null
    rails:
      bootsnap:
        enabled: false
      sessionStore:
        sessionCookieTokenPrefix: ""
    railsSecrets: {}
    redis:
      auth:
        enabled: true
      sentinelAuth:
        enabled: false
    registry:
      api:
        port: 5000
        protocol: http
        serviceName: registry
      bucket: registry
      certificate: {}
      enabled: true
      host: null
      httpSecret: {}
      notificationSecret: {}
      notifications: {}
      redis:
        cache:
          password: {}
        rateLimiting:
          password: {}
      tls:
        enabled: false
      tokenIssuer: gitlab-issuer
    runner:
      registrationToken: {}
    service:
      annotations: {}
      labels: {}
      ports:
        metrics: 30505
        webservice: 30305
        workhorse: 30405
      type: NodePort
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: false
      create: true
      enabled: false
    shell:
      authToken: {}
      hostKeys: {}
      tcp:
        proxyProtocol: false
    smtp:
      address: smtp.mailgun.org
      authentication: plain
      enabled: false
      open_timeout: 30
      openssl_verify_mode: peer
      password:
        key: password
        secret: ""
      pool: false
      port: 2525
      read_timeout: 60
      starttls_auto: false
      user_name: ""
    spamcheck:
      enabled: false
    time_zone: UTC
    tracing:
      connection:
        string: ""
      urlTemplate: ""
    traefik:
      apiVersion: ""
    webservice:
      workerTimeout: 60
    workhorse:
      serviceName: webservice-default
      tls:
        enabled: false
    zoekt:
      gateway:
        basicAuth: {}
      indexer:
        internalApi: {}
  health:
    storagedriver:
      enabled: false
      interval: 10s
      threshold: 3
  hpa:
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 300
    cpu:
      targetAverageUtilization: 75
      targetType: Utilization
    customMetrics: []
    maxReplicas: 10
    minReplicas: 2
  image:
    repository: registry.gitlab.com/gitlab-org/build/cng/gitlab-container-registry
    tag: v4.15.0-gitlab
  ingress:
    annotations: {}
    proxyBodySize: "0"
    proxyBuffering: "off"
    proxyReadTimeout: 900
    tls: {}
  init:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      runAsNonRoot: true
      runAsUser: 1000
    image: {}
    resources:
      requests:
        cpu: 50m
    script: |-
      if [ -e /config/accesskey ] ; then
        sed -i -e 's@ACCESS_KEY@'"$(cat /config/accesskey)"'@' -e 's@SECRET_KEY@'"$(cat /config/secretkey)"'@' /registry/config.yml
      fi
      # Place the `http.secret` value from the kubernetes secret
      sed -i -e 's@HTTP_SECRET@'"$(cat /config/httpSecret)"'@' /registry/config.yml
      # Populate sensitive registry notification secrets in the config file
      if [ -d /config/notifications ]; then
        for i in /config/notifications/*; do
          filename=$(basename $i);
          sed -i -e 's@'"${filename}"'@'"$(cat $i)"'@' /registry/config.yml;
        done
      fi
      # Insert any provided `storage` block from kubernetes secret
      if [ -d /config/storage ]; then
        # Copy contents of storage secret(s)
        mkdir -p /registry/storage
        cp -v -r -L /config/storage/* /registry/storage/
        # Ensure there is a new line in the end
        echo '' >> /registry/storage/config
        # Default `delete.enabled: true` if not present.
        ## Note: busybox grep doesn't support multiline, so we chain `egrep`.
        if ! $(egrep -A1 '^delete:\s*$' /registry/storage/config | egrep -q '\s{2,4}enabled:') ; then
          echo 'delete:' >> /registry/storage/config
          echo '  enabled: true' >> /registry/storage/config
        fi
        # Indent /registry/storage/config 2 spaces before inserting into config.yml
        sed -i 's/^/  /' /registry/storage/config
        # Insert into /registry/config.yml after `storage:`
        sed -i '/^storage:/ r /registry/storage/config' /registry/config.yml
        # Remove the now extraneous `config` file
        rm /registry/storage/config
      fi
      # Copy any middleware.storage if present
      if [ -d /config/middleware.storage ]; then
        cp -v -r -L /config/middleware.storage  /registry/middleware.storage
      fi
      # Set to known path, to used ConfigMap
      cat /config/certificate.crt > /registry/certificate.crt
      # Copy the optional profiling keyfile to the expected location
      if [ -f /config/profiling-key.json ]; then
        cp /config/profiling-key.json /registry/profiling-key.json
      fi
      # Insert Database password, if enabled
      if [ -f /config/database_password ] ; then
        sed -i -e 's@DB_PASSWORD_FILE@'"$(cat /config/database_password)"'@' /registry/config.yml
      fi
      # Insert Redis(cache) password, if enabled
      if [ -f /config/registry/redis-password ] ; then
        sed -i -e 's@REDIS_CACHE_PASSWORD@'"$(cat /config/registry/redis-password)"'@' /registry/config.yml
      fi
      # Insert Redis(rate-limiter) password, if enabled
      if [ -f /config/registry/redis-rateLimiting-password ] ; then
        sed -i -e 's@REDIS_RATE_LIMITING_PASSWORD@'"$(cat /config/registry/redis-rateLimiting-password)"'@' /registry/config.yml
      fi
      # Copy the database TLS connection files to the expected location and set permissions
      if [ -d /config/ssl ]; then
        cp -r /config/ssl/ /registry/ssl
        chmod 700 /registry/ssl
        chmod 600 /registry/ssl/*.pem
      fi
      # Copy TLS certificates if present
      if [ -d /config/tls ]; then
        cp -r /config/tls/ /registry/tls
        chmod 700 /registry/tls
        chmod 600 /registry/tls/*
      fi
  keda:
    cooldownPeriod: 300
    enabled: false
    pollingInterval: 30
  log:
    fields:
      service: registry
    level: info
  maintenance:
    readonly:
      enabled: false
    uploadpurging:
      age: 168h
      dryrun: false
      enabled: true
      interval: 24h
  maxUnavailable: 1
  metrics:
    enabled: false
    path: /metrics
    serviceMonitor:
      additionalLabels: {}
      enabled: false
      endpointConfig: {}
  middleware:
    storage: []
  minio:
    redirect: false
  networkpolicy:
    annotations: {}
    egress:
      enabled: false
      rules: []
    enabled: false
    ingress:
      enabled: false
      rules: []
  nodeSelector: {}
  podLabels: {}
  priorityClassName: ""
  profiling:
    stackdriver:
      credentials: {}
      enabled: false
  redis:
    cache:
      enabled: false
      password:
        enabled: false
    rateLimiting:
      enabled: false
      password:
        enabled: false
  relativeurls: false
  reporting:
    sentry:
      enabled: false
  resources:
    requests:
      cpu: 50m
      memory: 32Mi
  securityContext:
    fsGroup: 1000
    runAsUser: 1000
    seccompProfile:
      type: RuntimeDefault
  service:
    externalPort: 5000
    internalPort: 5000
    name: registry
    type: ClusterIP
  serviceAccount:
    create: false
  serviceLabels: {}
  storage: {}
  tls:
    clientCAs: []
    enabled: false
    minimumTLS: tls1.2
    verify: true
  tokenService: container_registry
  tolerations: []
  validation:
    disabled: true
    manifests:
      payloadsizelimit: 0
      referencelimit: 0
      urls:
        allow: []
        deny: []
shared-secrets:
  annotations: {}
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    runAsNonRoot: true
  enabled: true
  env: production
  podLabels: {}
  rbac:
    create: true
  resources:
    requests:
      cpu: 50m
  securityContext:
    fsGroup: 65534
    runAsUser: 65534
    seccompProfile:
      type: RuntimeDefault
  selfsign:
    caSubject: GitLab Helm Chart
    expiry: 3650d
    image:
      repository: registry.gitlab.com/gitlab-org/build/cng/cfssl-self-sign
    keyAlgorithm: rsa
    keySize: "4096"
  serviceAccount:
    create: true
    enabled: true
    name: null
  tolerations: []
traefik:
  install: false
  ports:
    gitlab-shell:
      expose: true
      exposedPort: 22
      port: 2222
upgradeCheck:
  annotations: {}
  configMapAnnotations: {}
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    runAsNonRoot: true
    runAsUser: 65534
  enabled: true
  image: {}
  priorityClassName: ""
  resources:
    requests:
      cpu: 50m
  securityContext:
    fsGroup: 65534
    runAsUser: 65534
    seccompProfile:
      type: RuntimeDefault
  tolerations: []

HOOKS:
---
# Source: gitlab/templates/shared-secrets/rbac-config.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gitlab-shared-secrets
  namespace: gitlab
  labels:
    app: gitlab
    chart: gitlab-8.8.1
    release: gitlab
    heritage: Helm
    
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
---
# Source: gitlab/templates/shared-secrets/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-shared-secrets
  namespace: gitlab
  labels:
    app: gitlab
    chart: gitlab-8.8.1
    release: gitlab
    heritage: Helm
    
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-3"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
data:
  generate-secrets: |
    # vim: set filetype=sh:
    
    namespace=gitlab
    release=gitlab
    env=production
    
    pushd $(mktemp -d)
    
    # Args pattern, length
    function gen_random(){
      head -c 4096 /dev/urandom | LC_CTYPE=C tr -cd $1 | head -c $2
    }
    
    # Args: length
    function gen_random_base64(){
      local len="$1"
      head -c "$len" /dev/urandom | base64 -w0
    }
    
    # Args: yaml file, search path
    function fetch_rails_value(){
      local value=$(yq --prettyPrint --no-colors ".${2}" $1)
    
      # Don't return null values
      if [ "${value}" != "null" ]; then echo "${value}"; fi
    }
    
    # Args: secretname
    function label_secret(){
      local secret_name=$1
    # Remove application labels if they exist
      kubectl --namespace=$namespace label \
        secret $secret_name $(echo 'app.kubernetes.io/name=gitlab' | sed -E 's/=[^ ]*/-/g')
    
      kubectl --namespace=$namespace label \
        --overwrite \
        secret $secret_name app=gitlab chart=gitlab-8.8.1 release=gitlab heritage=Helm 
    }
    
    # Args: secretname, args
    function generate_secret_if_needed(){
      local secret_args=( "${@:2}")
      local secret_name=$1
    
      if ! $(kubectl --namespace=$namespace get secret $secret_name > /dev/null 2>&1); then
        kubectl --namespace=$namespace create secret generic $secret_name ${secret_args[@]}
      else
        echo "secret \"$secret_name\" already exists."
    
        for arg in "${secret_args[@]}"; do
          local from=$(echo -n ${arg} | cut -d '=' -f1)
    
          if [ -z "${from##*literal*}" ]; then
            local key=$(echo -n ${arg} | cut -d '=' -f2)
            local desiredValue=$(echo -n ${arg} | cut -d '=' -f3-)
            local flags="--namespace=$namespace --allow-missing-template-keys=false"
    
            if ! $(kubectl $flags get secret $secret_name -ojsonpath="{.data.${key}}" > /dev/null 2>&1); then
              echo "key \"${key}\" does not exist. patching it in."
    
              if [ "${desiredValue}" != "" ]; then
                desiredValue=$(echo -n "${desiredValue}" | base64 -w 0)
              fi
    
              kubectl --namespace=$namespace patch secret ${secret_name} -p "{\"data\":{\"$key\":\"${desiredValue}\"}}"
            fi
          fi
        done
      fi
    
      label_secret $secret_name
    }
    
    # Initial root password
    generate_secret_if_needed "gitlab-gitlab-initial-root-password" --from-literal="password"=$(gen_random 'a-zA-Z0-9' 64)
    
    
    # Redis password
    generate_secret_if_needed "gitlab-redis-secret" --from-literal="secret"=$(gen_random 'a-zA-Z0-9' 64)
    
    
    # Postgres password
    generate_secret_if_needed "gitlab-postgresql-password" --from-literal="postgresql-password"=$(gen_random 'a-zA-Z0-9' 64) --from-literal=postgresql-postgres-password=$(gen_random 'a-zA-Z0-9' 64)
    
    
    # Gitlab shell
    generate_secret_if_needed "gitlab-gitlab-shell-secret" --from-literal="secret"=$(gen_random 'a-zA-Z0-9' 64)
    
    # Gitaly secret
    generate_secret_if_needed "gitlab-gitaly-secret" --from-literal="token"=$(gen_random 'a-zA-Z0-9' 64)
    
    # Minio secret
    generate_secret_if_needed "gitlab-minio-secret" --from-literal=accesskey=$(gen_random 'a-zA-Z0-9' 64) --from-literal=secretkey=$(gen_random 'a-zA-Z0-9' 64)
    
    
    # Gitlab runner secret
    generate_secret_if_needed "gitlab-gitlab-runner-secret" --from-literal=runner-registration-token=$(gen_random 'a-zA-Z0-9' 64) --from-literal=runner-token=""
    
    # GitLab Pages API secret
    
    
    # GitLab Pages auth secret for hashing cookie store when using access control
    
    
    # GitLab Pages OAuth secret
    
    
    # Gitlab-kas secret
    generate_secret_if_needed "gitlab-gitlab-kas-secret" --from-literal="kas_shared_secret"=$(gen_random 'a-zA-Z0-9' 32 | base64)
    
    # Gitlab-kas private API secret
    generate_secret_if_needed "gitlab-kas-private-api" --from-literal="kas_private_api_secret"=$(gen_random 'a-zA-Z0-9' 32 | base64)
    
    # Gitlab-kas WebSocket Token secret
    generate_secret_if_needed "gitlab-kas-websocket-token" --from-literal="kas_websocket_token_secret"=$(gen_random_base64 72)
    
    
    # Gitlab-suggested-reviewers secret
    generate_secret_if_needed "gitlab-gitlab-suggested-reviewers" --from-literal="suggested_reviewers_secret"=$(gen_random 'a-zA-Z0-9' 32 | base64)
    
    
    
    
    
    # Registry certificates
    mkdir -p certs
    openssl req -new -newkey rsa:4096 -subj "/CN=gitlab-issuer" -nodes -x509 -keyout certs/registry-example-com.key -out certs/registry-example-com.crt -days 3650
    generate_secret_if_needed "gitlab-registry-secret" --from-file=registry-auth.key=certs/registry-example-com.key --from-file=registry-auth.crt=certs/registry-example-com.crt
    
    # config/secrets.yaml
    if [ -n "$env" ]; then
      rails_secret="gitlab-rails-secret"
    
      # Fetch the values from the existing secret if it exists
      if $(kubectl --namespace=$namespace get secret $rails_secret > /dev/null 2>&1); then
        kubectl --namespace=$namespace get secret $rails_secret -o jsonpath="{.data.secrets\.yml}" | base64 --decode > secrets.yml
        secret_key_base=$(fetch_rails_value secrets.yml "${env}.secret_key_base")
        otp_key_base=$(fetch_rails_value secrets.yml "${env}.otp_key_base")
        db_key_base=$(fetch_rails_value secrets.yml "${env}.db_key_base")
        openid_connect_signing_key=$(fetch_rails_value secrets.yml "${env}.openid_connect_signing_key")
        encrypted_settings_key_base=$(fetch_rails_value secrets.yml "${env}.encrypted_settings_key_base")
    
        active_record_encryption_primary_keys=$(fetch_rails_value secrets.yml "${env}.active_record_encryption_primary_key")
        active_record_encryption_deterministic_keys=$(fetch_rails_value secrets.yml "${env}.active_record_encryption_deterministic_key")
        active_record_encryption_key_derivation_salt=$(fetch_rails_value secrets.yml "${env}.active_record_encryption_key_derivation_salt")
      fi;
    
      # Generate defaults for any unset secrets
      secret_key_base="${secret_key_base:-$(gen_random 'a-f0-9' 128)}" # equivalent to secureRandom.hex(64)
      otp_key_base="${otp_key_base:-$(gen_random 'a-f0-9' 128)}" # equivalent to secureRandom.hex(64)
      db_key_base="${db_key_base:-$(gen_random 'a-f0-9' 128)}" # equivalent to secureRandom.hex(64)
      openid_connect_signing_key="${openid_connect_signing_key:-$(openssl genrsa 2048)}"
      encrypted_settings_key_base="${encrypted_settings_key_base:-$(gen_random 'a-f0-9' 128)}" # equivalent to secureRandom.hex(64)
    
      # 1. We set the following two keys as an array to support keys rotation.
      #    The last key in the array is always used to encrypt data:
      #    https://github.com/rails/rails/blob/v7.0.8.4/activerecord/lib/active_record/encryption/key_provider.rb#L21
      #    while all the keys are used (in the order they're defined) to decrypt data:
      #    https://github.com/rails/rails/blob/v7.0.8.4/activerecord/lib/active_record/encryption/cipher.rb#L26.
      #    This allows to rotate keys by adding a new key as the last key, and start a re-encryption process that
      #    runs in the background: https://gitlab.com/gitlab-org/gitlab/-/issues/494976
      # 2. We use the same method and length as Rails' defaults:
      #    https://github.com/rails/rails/blob/v7.0.8.4/activerecord/lib/active_record/railties/databases.rake#L537-L540
      active_record_encryption_primary_keys=${active_record_encryption_primary_keys:-"- $(gen_random 'a-zA-Z0-9' 32)"}
      active_record_encryption_deterministic_keys=${active_record_encryption_deterministic_keys:-"- $(gen_random 'a-zA-Z0-9' 32)"}
      active_record_encryption_key_derivation_salt=${active_record_encryption_key_derivation_salt:-$(gen_random 'a-zA-Z0-9' 32)}
    
      # Update the existing secret
      cat << EOF > rails-secrets.yml
    apiVersion: v1
    kind: Secret
    metadata:
      name: $rails_secret
    type: Opaque
    stringData:
      secrets.yml: |-
        $env:
          secret_key_base: $secret_key_base
          otp_key_base: $otp_key_base
          db_key_base: $db_key_base
          encrypted_settings_key_base: $encrypted_settings_key_base
          openid_connect_signing_key: |
    $(echo "${openid_connect_signing_key}" | awk '{print "        " $0}')
          active_record_encryption_primary_key:
            $active_record_encryption_primary_keys
          active_record_encryption_deterministic_key:
            $active_record_encryption_deterministic_keys
          active_record_encryption_key_derivation_salt: $active_record_encryption_key_derivation_salt
    EOF
      kubectl --validate=false --namespace=$namespace apply -f rails-secrets.yml
      label_secret $rails_secret
    fi
    
    # Shell ssh host keys
    ssh-keygen -A
    mkdir -p host_keys
    cp /etc/ssh/ssh_host_* host_keys/
    generate_secret_if_needed "gitlab-gitlab-shell-host-keys" --from-file host_keys
    
    # Gitlab-workhorse secret
    generate_secret_if_needed "gitlab-gitlab-workhorse-secret" --from-literal="shared_secret"=$(gen_random 'a-zA-Z0-9' 32 | base64)
    
    # Registry http.secret secret
    generate_secret_if_needed "gitlab-registry-httpsecret" --from-literal="secret"=$(gen_random 'a-z0-9' 128 | base64 -w 0)
    
    # Container Registry notification_secret
    generate_secret_if_needed "gitlab-registry-notification" --from-literal="secret"=[\"$(gen_random 'a-zA-Z0-9' 32)\"]
    
    
    
    # Zoekt basic auth credentials
    generate_secret_if_needed gitlab-zoekt-basicauth  --from-literal=gitlab_username=gitlab --from-literal=gitlab_password=$(gen_random 'a-zA-Z0-9' 64)
---
# Source: gitlab/templates/upgrade_check_hook.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-gitlab-upgrade-check
  namespace: gitlab
  labels:
    app: gitlab
    chart: gitlab-8.8.1
    release: gitlab
    heritage: Helm
    
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "-11"
    "helm.sh/hook-delete-policy": before-hook-creation
data:
  runcheck: |
    #!/bin/sh
    
    set -e
    
    notify() {
      echo "$1"
      echo -n "$1 " >> /dev/termination-log
    }
    
    greater_version()
    {
      test "$(printf '%s\n' "$@" | sort -V | tail -n 1)" = "$1";
    }
    
    is_semver()
    {
      printf '%s' "$1" | grep -Eq "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}"
      return "$?"
    }
    
    # For the PostgreSQL upgrade, you either need both secrets, or no secrets.
    # If there are no secrets, we will create them for you.
    # If the secrets aren't in either of these states, we assume you are upgrading from an older version
    # This is running ahead of version checks to ensure this always runs. This is to account for
    # installations outside of the official helm repo.
    secrets_dir="/etc/secrets/postgresql"
    if [ -d "${secrets_dir}" ]; then
      if [ ! "$(ls -A ${secrets_dir}/..data/)" = "" ]; then
        if [ ! -f "${secrets_dir}/postgresql-postgres-password" ] || [ ! -f "${secrets_dir}/postgresql-password" ]; then
          notify "You seem to be upgrading from a previous version of GitLab using the bundled PostgreSQL chart"
          notify "There are some manual steps which need to be performed in order to upgrade the database"
          notify "Please see the upgrade documentation for instructions on how to proceed:"
          notify "https://docs.gitlab.com/charts/installation/upgrade.html"
          exit 1
        fi
      fi
    fi
    MIN_VERSION=17.5
    CHART_MIN_VERSION=8.5
    
    # Remove 'v' prefix from GitLab version if present (set in Chart.yaml appVersions)
    GITLAB_VERSION=${GITLAB_VERSION#v}
    
    # Only run check for semver releases
    if ! is_semver "$GITLAB_VERSION"; then
      exit 0
    fi
    
    NEW_MAJOR_VERSION=$(echo $GITLAB_VERSION | awk -F "." '{print $1}')
    NEW_MINOR_VERSION=$(echo $GITLAB_VERSION | awk -F "." '{print $1"."$2}')
    
    NEW_CHART_MAJOR_VERSION=$(echo $CHART_VERSION | awk -F "." '{print $1}')
    NEW_CHART_MINOR_VERSION=$(echo $CHART_VERSION | awk -F "." '{print $1"."$2}')
    
    if [ ! -f /chart-info/gitlabVersion ]; then
      notify "It seems you are attempting an unsupported upgrade path."
      notify "Please follow the upgrade documentation at https://docs.gitlab.com/ee/update/#upgrade-paths"
      exit 1
    fi
    
    OLD_VERSION_STRING=$(cat /chart-info/gitlabVersion)
    OLD_VERSION_STRING=${OLD_VERSION_STRING#v}
    OLD_CHART_VERSION_STRING=$(cat /chart-info/gitlabChartVersion)
    
    # Skip check if old version wasn't semver
    if ! is_semver "$OLD_VERSION_STRING"; then
      exit 0
    fi
    
    OLD_MAJOR_VERSION=$(echo $OLD_VERSION_STRING | awk -F "." '{print $1}')
    OLD_MINOR_VERSION=$(echo $OLD_VERSION_STRING | awk -F "." '{print $1"."$2}')
    OLD_CHART_MAJOR_VERSION=$(echo $OLD_CHART_VERSION_STRING | awk -F "." '{print $1}')
    OLD_CHART_MINOR_VERSION=$(echo $OLD_CHART_VERSION_STRING | awk -F "." '{print $1"."$2}')
    
    # Checking Version
    if ( ! greater_version "$OLD_MINOR_VERSION" "$MIN_VERSION" ) || ( ! greater_version "$OLD_CHART_MINOR_VERSION" "$CHART_MIN_VERSION" ); then
      notify "It seems you are upgrading the GitLab Helm Chart from ${OLD_CHART_VERSION_STRING} (GitLab ${OLD_VERSION_STRING}) to ${CHART_VERSION} (GitLab ${GITLAB_VERSION})."
      notify "It is required to upgrade to the latest ${CHART_MIN_VERSION}.x version first before proceeding."
      # Link to upgrade docs if it is a major version jump
      if [ "${OLD_MAJOR_VERSION}" -lt "${NEW_MAJOR_VERSION}" ] || [ "${OLD_CHART_MAJOR_VERSION}" -lt "${NEW_CHART_MAJOR_VERSION}" ]; then
        notify "Please follow the upgrade documentation at https://docs.gitlab.com/charts/releases/8_0.html"
        notify "and upgrade to GitLab Helm Chart version ${CHART_MIN_VERSION}.x before upgrading to ${CHART_VERSION}."
      fi
      exit 1
    fi
---
# Source: gitlab/templates/shared-secrets/rbac-config.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gitlab-shared-secrets
  namespace: gitlab
  labels:
    app: shared-secrets
    chart: shared-secrets-8.8.1
    release: gitlab
    heritage: Helm
    
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "patch"]
---
# Source: gitlab/templates/shared-secrets/rbac-config.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: gitlab-shared-secrets
  namespace: gitlab
  labels:
    app: shared-secrets
    chart: shared-secrets-8.8.1
    release: gitlab
    heritage: Helm
    
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gitlab-shared-secrets
subjects:
  - kind: ServiceAccount
    name: gitlab-shared-secrets
    namespace: gitlab
---
# Source: gitlab/charts/gitlab/charts/webservice/templates/tests/test-runner.yaml
apiVersion: v1
kind: Pod
metadata:
  name: gitlab-webservice-test-runner-tq754
  namespace: gitlab
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed,before-hook-creation
  labels:
    app: webservice
    chart: webservice-8.8.1
    release: gitlab
    heritage: Helm
    
spec:
  containers:
  - name: test-runner
    image: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ee:v17.8.1
    command: ['sh', '/tests/test_login']
    volumeMounts:
      - name: tests
        mountPath: '/tests'
      - name: root-password
        readOnly: true
        mountPath: /initial_root_password
        subPath: initial_root_password
  volumes:
  - name: tests
    configMap:
      name: gitlab-webservice-tests
  - name: root-password
    secret:
      secretName: "gitlab-gitlab-initial-root-password"
      items:
        - key: "password"
          path: initial_root_password
  restartPolicy: Never
---
# Source: gitlab/templates/shared-secrets/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: gitlab-shared-secrets-8de75d1
  namespace: gitlab
  labels:
    app: gitlab
    chart: gitlab-8.8.1
    release: gitlab
    heritage: Helm
    
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  template:
    metadata:
      labels:
        app: gitlab
        chart: gitlab-8.8.1
        release: gitlab
        heritage: Helm
        
        
      annotations:
    spec:
      
      
      securityContext:
        runAsUser: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: gitlab-shared-secrets
      restartPolicy: Never
      
      containers:
        - name: gitlab
          image: registry.gitlab.com/gitlab-org/build/cng/kubectl:v17.8.1          
          command: ['/bin/bash', '/scripts/generate-secrets']
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
          volumeMounts:
            - name: scripts
              mountPath: /scripts
            - name: ssh
              mountPath: /etc/ssh
          resources:
            requests:
              cpu: 50m
      volumes:
      - name: scripts
        configMap:
          name: gitlab-shared-secrets
      - name: ssh
        emptyDir: {}
---
# Source: gitlab/templates/shared-secrets/self-signed-cert-job.yml
apiVersion: batch/v1
kind: Job
metadata:
  name: gitlab-shared-secrets-8de75d1-selfsign
  namespace: gitlab
  labels:
    app: gitlab
    chart: gitlab-8.8.1
    release: gitlab
    heritage: Helm
    
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  template:
    metadata:
      labels:
        app: gitlab
        release: gitlab
      annotations:
    spec:
      
      securityContext:
        runAsUser: 65534
        fsGroup: 65534
      serviceAccountName: gitlab-shared-secrets
      restartPolicy: Never
      
      initContainers:
      - name: cfssl-self-sign
        image: registry.gitlab.com/gitlab-org/build/cng/cfssl-self-sign:v17.8.1        
        env:
        - name: CA_SUBJECT
          value: "GitLab Helm Chart" # defaults to GitLab in container
        - name: CA_ORG
          value: "gitlab" # defaults to GitLab in container
        - name: CA_ORG_UNIT
          value: "gitlab" # defaults to Cloud Native in container
        - name: CERT_SUBJECT
          value: "localhost" # defaults to GitLab in container
        - name: CERT_DOMAIN
          value: "localhost" # defaults to example.com in container
        - name: EXPIRY
          value: "3650d" # defaults to 8076h in container
        - name: ALGORITHM
          value: "rsa" # defaults to ecdsa in container
        - name: KEY_SIZE
          value: "4096" # defaults to 256 inside container
        volumeMounts:
        - name: certs-path
          mountPath: /output
        resources:
          requests:
            cpu: 50m
      containers:
      - name: kubectl
        image: registry.gitlab.com/gitlab-org/build/cng/kubectl:v17.8.1        
        command:
        - /bin/bash
        - -exc
        - |
          certname=gitlab-wildcard-tls
          # create wildcard certificate secret
          kubectl create secret tls $certname \
            --cert=/output/wildcard.pem --key=/output/wildcard-key.pem || true
          kubectl --namespace=$namespace label \
            secret $certname  $(echo 'app.kubernetes.io/name=gitlab' | sed -E 's/=[^ ]*/-/g')
          kubectl --namespace=$namespace label --overwrite \
            secret $certname app=gitlab chart=gitlab-8.8.1 release=gitlab heritage=Helm 
          # create CA certificate secret
          kubectl create secret generic ${certname}-ca \
            --from-file=cfssl_ca=/output/ca.pem || true
          kubectl --namespace=$namespace label \
            secret ${certname}-ca  $(echo 'app.kubernetes.io/name=gitlab' | sed -E 's/=[^ ]*/-/g')
          kubectl --namespace=$namespace label --overwrite \
            secret ${certname}-ca app=gitlab chart=gitlab-8.8.1 release=gitlab heritage=Helm 
          # create certificate chain for GitLab Runner
          cat /output/ca.pem /output/wildcard.pem > /tmp/gitlab.localhost.crt
          kubectl create secret generic ${certname}-chain \
            --from-file=/tmp/gitlab.localhost.crt || true
          kubectl --namespace=$namespace label \
            secret ${certname}-chain  $(echo 'app.kubernetes.io/name=gitlab' | sed -E 's/=[^ ]*/-/g')
          kubectl --namespace=$namespace label --overwrite \
            secret ${certname}-chain app=gitlab chart=gitlab-8.8.1 release=gitlab heritage=Helm 
        volumeMounts:
        - name: certs-path
          mountPath: /output
        resources:
          requests:
            cpu: 50m
      volumes:
      - name: certs-path
        emptyDir: {}
---
# Source: gitlab/templates/upgrade_check_hook.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: gitlab-gitlab-upgrade-check
  namespace: gitlab
  labels:
    app: gitlab
    chart: gitlab-8.8.1
    release: gitlab
    heritage: Helm
    
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  backoffLimit: 2
  template:
    metadata:
      labels:
        app: gitlab
        release: gitlab

    spec:
      
      
      securityContext:
        runAsUser: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      restartPolicy: Never
      
      containers:
        - name: run-check
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-base:v17.8.1"
          command: ['/bin/sh', '/scripts/runcheck']          
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 65534
          env:
            - name: GITLAB_VERSION
              value: '17.8.1'
            - name: CHART_VERSION
              value: '8.8.1'
          volumeMounts:
            - name: chart-info
              mountPath: /chart-info
            - name: scripts
              mountPath: /scripts
            - name: postgresql-secret
              mountPath: /etc/secrets/postgresql
          resources:
            requests:
              cpu: 50m
      volumes:
      - name: chart-info
        configMap:
          name: gitlab-gitlab-chart-info
          optional: true
      - name: scripts
        configMap:
          name: gitlab-gitlab-upgrade-check
      - name: postgresql-secret
        secret:
          secretName: "gitlab-postgresql-password"
          optional: true
MANIFEST:
---
# Source: gitlab/charts/gitlab/charts/gitaly/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gitlab-gitaly
  namespace: gitlab
  labels:
    app: gitaly
    chart: gitaly-8.8.1
    release: gitlab
    heritage: Helm
    
spec:
  maxUnavailable:  1
  selector:
    matchLabels:
      app: gitaly
      release: gitlab
---
# Source: gitlab/charts/gitlab/charts/gitlab-shell/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gitlab-gitlab-shell
  namespace: gitlab
  labels:
    app: gitlab-shell
    chart: gitlab-shell-8.8.1
    release: gitlab
    heritage: Helm
    
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: gitlab-shell
      release: gitlab
---
# Source: gitlab/charts/gitlab/charts/kas/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gitlab-kas
  namespace: gitlab
  labels:
    app: kas
    chart: kas-8.8.1
    release: gitlab
    heritage: Helm
    
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: kas
      release: gitlab
---
# Source: gitlab/charts/gitlab/charts/sidekiq/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gitlab-sidekiq-all-in-1-v1
  namespace: gitlab
  labels:
    app: sidekiq
    chart: sidekiq-8.8.1
    release: gitlab
    heritage: Helm
    
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: sidekiq
      release: gitlab
      
      queue-pod-name: all-in-1
---
# Source: gitlab/charts/gitlab/charts/webservice/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gitlab-webservice-default
  namespace: gitlab
  labels:
    app: webservice
    chart: webservice-8.8.1
    release: gitlab
    heritage: Helm
    gitlab.com/webservice-name: default
    
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: webservice
      release: gitlab
      
      
      gitlab.com/webservice-name: default
---
# Source: gitlab/charts/minio/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gitlab-minio-v1
  namespace: gitlab
  labels:
    app: minio
    chart: minio-0.4.3
    release: gitlab
    heritage: Helm
    
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: minio
      release: gitlab
      component: app
---
# Source: gitlab/charts/registry/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gitlab-registry-v1
  namespace: gitlab
  labels:
    app: registry
    chart: registry-0.7.0
    release: gitlab
    heritage: Helm
    
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: registry
      release: gitlab
---
# Source: gitlab/charts/redis/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: gitlab-redis
  namespace: "gitlab"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.13.2
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/managed-by: Helm
---
# Source: gitlab/charts/gitlab/charts/gitaly/templates/configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-gitaly
  namespace: gitlab
  labels:
    app: gitaly
    chart: gitaly-8.8.1
    release: gitlab
    heritage: Helm
    
data:
  configure: |
    set -e
    mkdir -p /init-secrets/gitaly /init-secrets/shell
    cp -v -r -L /init-config/.gitlab_shell_secret  /init-secrets/shell/.gitlab_shell_secret
    cp -v -r -L /init-config/gitaly_token  /init-secrets/gitaly/gitaly_token
  config.toml.tpl: |
    # The directory where Gitaly's executables are stored
    bin_dir = "/usr/local/bin"

    # listen on a TCP socket. This is insecure (no authentication)
    listen_addr = "0.0.0.0:8075"

    # Directory where internal sockets reside
    # note: no value will result in a `/tmp/gitlab-internal-*` path
    # internal_socket_dir = "/home/git"

    # If metrics collection is enabled, inform gitaly about that
    prometheus_listen_addr = "0.0.0.0:9236"

    # Graceful shutdown timeout, how long to wait for in-flight requests to complete
    graceful_restart_timeout = "25s"

    # Storage configuration
    {% $storages := coll.Slice  "default" %}
    {% $index := index (.Env.HOSTNAME | strings.Split "-" | coll.Reverse) 0 | conv.ToInt64 %}
    {% if len $storages | lt $index %}
    [[storage]]
    name = "{% index $storages $index %}"
    path = "/home/git/repositories"
    {% else %}
    {% printf "Storage for node %d is not present in the storageNames array. Did you use kubectl to scale up? You need to solely use helm for this purpose." $index | fail %}
    {% end %}

    [logging]
    format = "json"
    dir = "/var/log/gitaly"

    [auth]
    token = {% file.Read "/etc/gitlab-secrets/gitaly/gitaly_token" | strings.TrimSpace | data.ToJSON %}

    [git]
    use_bundled_binaries = true
    ignore_gitconfig = true

    [gitlab-shell]
    # The directory where gitlab-shell is installed
    dir = "/srv/gitlab-shell"

    [gitlab]
    # location of shared secret for GitLab Shell / API interaction
    secret_file = "/etc/gitlab-secrets/shell/.gitlab_shell_secret"
    # URL of API
    url = "http://gitlab-webservice-default.gitlab.svc:8181/"

    [gitlab.http-settings]
    # read_timeout = 300
    # user = someone
    # password = somepass
    # ca_file = /etc/ssl/cert.pem
    # ca_path = /etc/pki/tls/certs

    [hooks]
    # directory containing custom hooks
    custom_hooks_dir = "/home/git/custom_hooks"
---
# Source: gitlab/charts/gitlab/charts/gitlab-exporter/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-gitlab-exporter
  namespace: gitlab
  labels:
    app: gitlab-exporter
    chart: gitlab-exporter-8.8.1
    release: gitlab
    heritage: Helm
    
data:
  gitlab-exporter.yml.erb: |
    server:
      name: webrick
      listen_address: 0.0.0.0
      listen_port: 9168
      

    probes:
      db_common: &db_common
        methods:
          - probe_db
        opts:
          connection_string: dbname=gitlabhq_production user=gitlab host=gitlab-postgresql.gitlab.svc port=5432 password='<%= File.read('/etc/gitlab/postgres/psql-password-main').strip.gsub(/[\'\\]/) { |esc| '\\' + esc } %>'
      database:
        multiple: true
        ci_builds:
          class_name: Database::CiBuildsProber
          <<: *db_common
        tuple_stats:
          class_name: Database::TuplesProber
          <<: *db_common
        rows_count:
          class_name: Database::RowCountProber
          <<: *db_common
      database_bloat:
        class_name: Database::BloatProber
        <<: *db_common

      sidekiq: &sidekiq
        methods:
          - probe_queues
          - probe_workers
          - probe_retries
          - probe_stats
        opts:
          redis_url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@gitlab-redis-master.gitlab.svc:6379/0
          redis_enable_client: false
          probe_non_namespaced: true

      ruby: &ruby
        methods:
          - probe_gc
        opts:
          quantiles: false

      metrics:
        multiple: true
        ruby:
          <<: *ruby
        sidekiq:
          <<: *sidekiq
        ci_builds:
          class_name: Database::CiBuildsProber
          <<: *db_common
        tuple_stats:
          class_name: Database::TuplesProber
          <<: *db_common
        rows_count:
          class_name: Database::RowCountProber
          <<: *db_common

  configure: |
    # BEGIN gitlab.scripts.configure.secrets
    set -e
    config_dir="/init-config"
    secret_dir="/init-secrets"
    # optional
    for secret in redis redis-sentinel postgres gitlab-exporter ; do
      if [ -e "${config_dir}/${secret}" ]; then
        mkdir -p "${secret_dir}/${secret}"
        cp -f -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
      fi
    done
    # END gitlab.scripts.configure.secrets
# Leave this here - This line denotes end of block to the parser.
---
# Source: gitlab/charts/gitlab/charts/gitlab-shell/templates/configmap-sshd.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-gitlab-shell-sshd
  namespace: gitlab
  labels:
    app: gitlab-shell
    chart: gitlab-shell-8.8.1
    release: gitlab
    heritage: Helm
    
data:
  sshd_config: |
    #	$OpenBSD: sshd_config,v 1.101 2017/03/14 07:19:07 djm Exp $

    # This is the sshd server system-wide configuration file.  See
    # sshd_config(5) for more information.

    # This sshd was compiled with PATH=/bin:/usr/bin:/sbin:/usr/sbin

    # The strategy used for options in the default sshd_config shipped with
    # OpenSSH is to specify options with their default value where
    # possible, but leave them commented.  Uncommented options override the
    # default value.

    Port 2222
    #AddressFamily any
    #ListenAddress 0.0.0.0
    #ListenAddress ::

    #HostKey /etc/ssh/ssh_host_rsa_key
    #HostKey /etc/ssh/ssh_host_dsa_key
    #HostKey /etc/ssh/ssh_host_ecdsa_key
    #HostKey /etc/ssh/ssh_host_ed25519_key

    # Ciphers and keying
    #RekeyLimit default none

    # Logging
    #SyslogFacility AUTH
    LogLevel ERROR

    # Authentication:

    PermitRootLogin no
    #StrictModes yes
    #MaxAuthTries 6
    #MaxSessions 10

    #PubkeyAuthentication yes

    #AuthorizedPrincipalsFile none

    # For this to work you will also need host keys in /etc/ssh/ssh_known_hosts
    #HostbasedAuthentication no
    # Change to yes if you don't trust ~/.ssh/known_hosts for
    # HostbasedAuthentication
    #IgnoreUserKnownHosts no
    # Don't read the user's ~/.rhosts and ~/.shosts files
    #IgnoreRhosts yes

    #PermitEmptyPasswords no

    # Change to no to disable s/key passwords
    #ChallengeResponseAuthentication yes

    # Kerberos options
    #KerberosAuthentication no
    #KerberosOrLocalPasswd yes
    #KerberosTicketCleanup yes
    #KerberosGetAFSToken no

    # GSSAPI options
    #GSSAPIAuthentication no
    #GSSAPICleanupCredentials yes

    # Set this to 'yes' to enable PAM authentication, account processing,
    # and session processing. If this is enabled, PAM authentication will
    # be allowed through the ChallengeResponseAuthentication and
    # PasswordAuthentication.  Depending on your PAM configuration,
    # PAM authentication via ChallengeResponseAuthentication may bypass
    # the setting of "PermitRootLogin without-password".
    # If you just want the PAM account and session checks to run without
    # PAM authentication, then enable this but set PasswordAuthentication
    # and ChallengeResponseAuthentication to 'no'.
    #UsePAM no

    #AllowAgentForwarding yes
    #AllowTcpForwarding yes
    #GatewayPorts no
    #X11Forwarding no
    #X11DisplayOffset 10
    #X11UseLocalhost yes
    #PermitTTY yes
    #PrintMotd yes
    #PrintLastLog yes
    #TCPKeepAlive yes
    #UseLogin no
    #PermitUserEnvironment no
    #Compression delayed
    ClientAliveInterval 0
    #ClientAliveCountMax 3
    #UseDNS no
    PidFile /srv/sshd/sshd.pid
    #PermitTunnel no
    #ChrootDirectory none
    #VersionAddendum none

    # no default banner path
    #Banner none

    # override default of no subsystems
    # Subsystem	sftp	/usr/lib/ssh/sftp-server

    # the following are HPN related configuration options
    # tcp receive buffer polling. disable in non autotuning kernels
    #TcpRcvBufPoll yes

    # disable hpn performance boosts
    #HPNDisabled no

    # buffer size for hpn to non-hpn connections
    #HPNBufferSize 2048


    # Example of overriding settings on a per-user basis
    #Match User anoncvs
    #	X11Forwarding no
    #	AllowTcpForwarding no
    #	PermitTTY no
    #	ForceCommand cvs server

    # The default is to check both .ssh/authorized_keys and .ssh/authorized_keys2
    # but this is overridden so installations will only check .ssh/authorized_keys
    AuthorizedKeysFile	.ssh/authorized_keys

    AuthorizedKeysCommand /authorized_keys %u %k
    AuthorizedKeysCommandUser git

    PasswordAuthentication no

    AllowUsers git

    # Enable the use of Git protcol v2
    AcceptEnv GIT_PROTOCOL

    # Hard disable all forwarding
    DisableForwarding yes

    # Specifies the maximum number of concurrent unauthenticated connections to the SSH daemon.
    # See `man sshd_config(5)`
    
    MaxStartups 10:30:100
    

    # Specifies amount of time athat the server will disconnect after if the user has not successfully logged in
    LoginGraceTime 60

    # Includes
    Include /etc/ssh/sshd_config.d/*.conf

# Leave this here - This line denotes end of block to the parser.
---
# Source: gitlab/charts/gitlab/charts/gitlab-shell/templates/configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-gitlab-shell
  namespace: gitlab
  labels:
    app: gitlab-shell
    chart: gitlab-shell-8.8.1
    release: gitlab
    heritage: Helm
    
data:
  configure: |
    # BEGIN gitlab.scripts.configure.secrets
    set -e
    config_dir="/init-config"
    secret_dir="/init-secrets"
    # required
    for secret in shell ; do
      mkdir -p "${secret_dir}/${secret}"
      cp -f -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
    done
    # END gitlab.scripts.configure.secrets
    mkdir -p /${secret_dir}/ssh
    cp -v -r -L /${config_dir}/ssh_host_* /${secret_dir}/ssh/
    chmod 0400 /${secret_dir}/ssh/ssh_host_*
  config.yml.tpl: |
    # GitLab user. git by default
    user: git

    # Url to gitlab instance. Used for api calls. Should end with a slash.
    gitlab_url: "http://gitlab-webservice-default.gitlab.svc:8181/"

    secret_file: /etc/gitlab-secrets/shell/.gitlab_shell_secret

    # File used as authorized_keys for gitlab user
    auth_file: "/home/git/.ssh/authorized_keys"

    # Log file.
    # Default is gitlab-shell.log in the root directory.
    log_file: "/var/log/gitlab-shell/gitlab-shell.log"

    log_format: json

    # Audit usernames.
    # Set to true to see real usernames in the logs instead of key ids, which is easier to follow, but
    # incurs an extra API call on every gitlab-shell command.
    audit_usernames: false

    
    lfs:
      pure_ssh_protocol: false
    pat:
      enabled: true
      allowed_scopes:
        []
  krb5.conf: |
    
# Leave this here - This line denotes end of block to the parser.
---
# Source: gitlab/charts/gitlab/charts/gitlab-shell/templates/nginx-tcp-configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-nginx-ingress-tcp
  namespace: gitlab
  labels:
    app: gitlab-shell
    chart: gitlab-shell-8.8.1
    release: gitlab
    heritage: Helm
    
data:
  "22": "gitlab/gitlab-gitlab-shell:22::"
---
# Source: gitlab/charts/gitlab/charts/kas/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-kas
  namespace: gitlab
  labels:
    app: kas
    chart: kas-8.8.1
    release: gitlab
    heritage: Helm
    
data:
  # See https://gitlab.com/gitlab-org/cluster-integration/gitlab-agent/-/blob/master/pkg/kascfg/kascfg_proto_docs.md#gitlab-agent-kascfg-ConfigurationFile
  config.yaml: |
    agent:
      kubernetes_api:
        listen:
          address: :8154
        url_path_prefix: /k8s-proxy
        websocket_token_secret_file: /etc/kas/.gitlab_kas_websocket_token_secret
      listen:
        address: :8150
        websocket: true
    api:
      listen:
        address: :8153
        authentication_secret_file: /etc/kas/.gitlab_kas_secret
    gitlab:
      address: http://gitlab-webservice-default.gitlab.svc:8181
      authentication_secret_file: /etc/kas/.gitlab_kas_secret
      external_url: http://gitlab.localhost
    observability:
      listen:
        address: :8151
      liveness_probe:
        url_path: /liveness
      readiness_probe:
        url_path: /readiness
    private_api:
      listen:
        address: :8155
        authentication_secret_file: /etc/kas/.gitlab_kas_private_api_secret
    redis:
      database_index: 0
      password_file: /etc/kas/redis/redis-password
      server:
        address: gitlab-redis-master.gitlab.svc:6379
---
# Source: gitlab/charts/gitlab/charts/migrations/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-migrations
  namespace: gitlab
  labels:
    app: migrations
    chart: migrations-8.8.1
    release: gitlab
    heritage: Helm
    
data:
  pages_redirect_uri: http://projects.pages.localhost/auth
  installation_type: |
    gitlab-helm-chart
  database.yml.erb: |
    
    production:
      main:
        adapter: postgresql
        encoding: unicode
        database: gitlabhq_production
        username: gitlab
        password: <%= File.read('/etc/gitlab/postgres/psql-password-main').strip.to_json %>
        host: "gitlab-postgresql.gitlab.svc"
        port: 5432
        connect_timeout: 
        keepalives: 
        keepalives_idle: 
        keepalives_interval: 
        keepalives_count: 
        tcp_user_timeout: 
        application_name: 
        prepared_statements: false
        database_tasks: true
        
        
      ci:
        adapter: postgresql
        encoding: unicode
        database: gitlabhq_production
        username: gitlab
        password: <%= File.read('/etc/gitlab/postgres/psql-password-ci').strip.to_json %>
        host: "gitlab-postgresql.gitlab.svc"
        port: 5432
        connect_timeout: 
        keepalives: 
        keepalives_idle: 
        keepalives_interval: 
        keepalives_count: 
        tcp_user_timeout: 
        application_name: 
        prepared_statements: false
        database_tasks: false
        
        
  resque.yml.erb: |
    production:
      url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@gitlab-redis-master.gitlab.svc:6379/0
      
      id:
  
  
  
  
  cable.yml.erb: |
    production:
      url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@gitlab-redis-master.gitlab.svc:6379/0
      
      id:
      adapter: redis
  
  
  
  
  
  
  
  gitlab.yml.erb: |
    production: &base
      gitlab:
        host: gitlab.localhost
      gitaly:
        client_path: /home/git/gitaly/bin
        token: <%= File.read('/etc/gitlab/gitaly/gitaly_token').strip.to_json %>
      repositories:
        storages: # You must have at least a `default` storage path.
          default:
            path: /var/opt/gitlab/repo
            gitaly_address: tcp://gitlab-gitaly-0.gitlab-gitaly.gitlab.svc:8075
          
      
      sidekiq:
        log_format: json
      
  configure: |
    # BEGIN gitlab.scripts.configure.secrets
    set -e
    config_dir="/init-config"
    secret_dir="/init-secrets"
    # required
    for secret in rails-secrets migrations gitaly ; do
      mkdir -p "${secret_dir}/${secret}"
      cp -f -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
    done
    # optional
    for secret in redis redis-sentinel minio objectstorage postgres ldap duo omniauth smtp kas pages oauth-secrets mailroom gitlab-exporter microsoft_graph_mailer suggested_reviewers zoekt clickhouse ; do
      if [ -e "${config_dir}/${secret}" ]; then
        mkdir -p "${secret_dir}/${secret}"
        cp -f -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
      fi
    done
    # END gitlab.scripts.configure.secrets
    
    
# Leave this here - This line denotes end of block to the parser.
---
# Source: gitlab/charts/gitlab/charts/sidekiq/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-sidekiq
  namespace: gitlab
  labels:
    app: sidekiq
    chart: sidekiq-8.8.1
    release: gitlab
    heritage: Helm
    
data:
  installation_type: |
    gitlab-helm-chart
  database.yml.erb: |
    
    production:
      main:
        adapter: postgresql
        encoding: unicode
        database: gitlabhq_production
        username: gitlab
        password: <%= File.read('/etc/gitlab/postgres/psql-password-main').strip.to_json %>
        host: "gitlab-postgresql.gitlab.svc"
        port: 5432
        connect_timeout: 
        keepalives: 
        keepalives_idle: 
        keepalives_interval: 
        keepalives_count: 
        tcp_user_timeout: 
        application_name: 
        prepared_statements: false
        database_tasks: true
        
        
      ci:
        adapter: postgresql
        encoding: unicode
        database: gitlabhq_production
        username: gitlab
        password: <%= File.read('/etc/gitlab/postgres/psql-password-ci').strip.to_json %>
        host: "gitlab-postgresql.gitlab.svc"
        port: 5432
        connect_timeout: 
        keepalives: 
        keepalives_idle: 
        keepalives_interval: 
        keepalives_count: 
        tcp_user_timeout: 
        application_name: 
        prepared_statements: false
        database_tasks: false
        
        
  session_store.yml.erb: |
    production:
        session_cookie_token_prefix: ""
  krb5.conf: |
    
  smtp_settings.rb: |
    
  resque.yml.erb: |
    production:
      url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@gitlab-redis-master.gitlab.svc:6379/0
      
      id:
  
  
  
  
  cable.yml.erb: |
    production:
      url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@gitlab-redis-master.gitlab.svc:6379/0
      
      id:
      adapter: redis
  
  
  
  
  
  
  
  gitlab.yml.erb: |
    production: &base
      gitlab:
        host: gitlab.localhost
        https: false
        max_request_duration_seconds: 57
        impersonation_enabled: 
        application_settings_cache_seconds: 60
        usage_ping_enabled: true
        seat_link_enabled: true
        username_changing_enabled: true
        issue_closing_pattern: 
        default_theme: 
        default_projects_features:
          issues: true
          merge_requests: true
          wiki: true
          snippets: true
          builds: true
          container_registry: true
        graphql_timeout: 
        webhook_timeout: 
        trusted_proxies:
        time_zone: "UTC"        
        email_from: "gitlab@localhost"
        email_display_name: "GitLab"
        email_reply_to: "noreply@localhost"
        email_subject_suffix: ""
      
      gravatar:
        plain_url: 
        ssl_url: 
      extra:
        
        
        
        
        
        
      artifacts:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-artifacts
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: minio.localhost
            endpoint: http://gitlab-minio-svc.gitlab.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      lfs:
        enabled: true
        object_store:
          enabled: true
          remote_directory: git-lfs
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: minio.localhost
            endpoint: http://gitlab-minio-svc.gitlab.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      uploads:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-uploads
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: minio.localhost
            endpoint: http://gitlab-minio-svc.gitlab.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      packages:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-packages
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: minio.localhost
            endpoint: http://gitlab-minio-svc.gitlab.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      external_diffs:
        enabled: false
        when: 
        object_store:
          enabled: false
          remote_directory: gitlab-mr-diffs
          proxy_download: true
      terraform_state:
        enabled: false
        object_store:
          enabled: false
          remote_directory: gitlab-terraform-state
          proxy_download: true
      ci_secure_files:
        enabled: false
        object_store:
          enabled: false
          remote_directory: gitlab-ci-secure-files
          proxy_download: true
      dependency_proxy:
        enabled: false
        object_store:
          enabled: false
          remote_directory: gitlab-dependency-proxy
          proxy_download: true
      
      sentry:
        enabled: false
        dsn: 
        clientside_dsn: 
        environment: 
      
      sidekiq:
        log_format: json
      pages:
        enabled: false
        access_control: false
        artifacts_server: true
        path: /srv/gitlab/shared/pages
        host: pages.localhost
        port: 80
        https: false
        secret_file: /etc/gitlab/pages/secret
        external_http: false
        external_https: false
        object_store:
          enabled: true
          remote_directory: gitlab-pages
          connection:
            provider: AWS
            region: us-east-1
            host: minio.localhost
            endpoint: http://gitlab-minio-svc.gitlab.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
        local_store:
          enabled: false
          path: 
        namespace_in_path: false
      mattermost:
        enabled: false
      ## Registry Integration
      registry:
        enabled: true
        host: registry.localhost
        api_url: http://gitlab-registry.gitlab.svc:5000
        key: /etc/gitlab/registry/gitlab-registry.key
        issuer: gitlab-issuer
        notification_secret: <%= YAML.load_file("/etc/gitlab/registry/notificationSecret").flatten.first %>
      gitlab_ci:
      ldap:
        enabled: false
      
      omniauth:
        enabled: false
        sync_profile_from_provider: []
        sync_profile_attributes: ["email"]
        allow_single_sign_on: ["saml"]
        block_auto_created_users: true
        auto_link_ldap_user: false
        auto_link_saml_user: false
        external_providers: []
      kerberos:
        enabled: false
        keytab: /etc/krb5.keytab
        use_dedicated_port: false
        port: 8443
        https: true
        simple_ldap_linking_allowed_realms: []
      
      duo_auth:
        enabled: false
        hostname: 
        integration_key: 
        secret_key: 
      
      duo_auth:
        enabled: false
        hostname: 
        integration_key: 
        secret_key: 
      shared:
      gitaly:
        client_path: /home/git/gitaly/bin
        token: <%= File.read('/etc/gitlab/gitaly/gitaly_token').strip.to_json %>
      repositories:
        storages: # You must have at least a `default` storage path.
          default:
            path: /var/opt/gitlab/repo
            gitaly_address: tcp://gitlab-gitaly-0.gitlab-gitaly.gitlab.svc:8075
          
      backup:
        path: "tmp/backups"   # Relative paths are relative to Rails.root (default: tmp/backups/)
      gitlab_kas:
        enabled: true
        secret_file: /etc/gitlab/kas/.gitlab_kas_secret
        external_url: "ws://kas.localhost"
        internal_url: "grpc://gitlab-kas.gitlab.svc:8153"
      suggested_reviewers:
        secret_file: /etc/gitlab/suggested_reviewers/.gitlab_suggested_reviewers_secret
      # Zoekt secrets are present, load them.
      zoekt:
        username_file: /etc/gitlab/zoekt/.gitlab_zoekt_username
        password_file: /etc/gitlab/zoekt/.gitlab_zoekt_password
      gitlab_shell:
        path: /home/git/gitlab-shell/
        hooks_path: /home/git/gitlab-shell/hooks/
        upload_pack: true
        receive_pack: true
        ssh_port: 22
      workhorse:
      git:
        bin_path: /usr/bin/git
      webpack:
      monitoring:
        ip_whitelist:
          - 127.0.0.0/8
        sidekiq_exporter:
          enabled: true
          address: 0.0.0.0
          port: 3807
          log_enabled: false
        sidekiq_health_checks:
          enabled: true
          address: 0.0.0.0
          port: 3808
  configure: |
    # BEGIN gitlab.scripts.configure.secrets
    set -e
    config_dir="/init-config"
    secret_dir="/init-secrets"
    # required
    for secret in gitaly registry rails-secrets ; do
      mkdir -p "${secret_dir}/${secret}"
      cp -f -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
    done
    # optional
    for secret in redis redis-sentinel minio objectstorage postgres ldap duo omniauth smtp kas pages oauth-secrets mailroom gitlab-exporter microsoft_graph_mailer suggested_reviewers zoekt clickhouse ; do
      if [ -e "${config_dir}/${secret}" ]; then
        mkdir -p "${secret_dir}/${secret}"
        cp -f -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
      fi
    done
    # END gitlab.scripts.configure.secrets
    
    
# Leave this here - This line denotes end of block to the parser.
---
# Source: gitlab/charts/gitlab/charts/toolbox/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-toolbox
  namespace: gitlab
  labels:
    app: toolbox
    chart: toolbox-8.8.1
    release: gitlab
    heritage: Helm
    
data:
  database.yml.erb: |
    
    production:
      main:
        adapter: postgresql
        encoding: unicode
        database: gitlabhq_production
        username: gitlab
        password: <%= File.read('/etc/gitlab/postgres/psql-password-main').strip.to_json %>
        host: "gitlab-postgresql.gitlab.svc"
        port: 5432
        connect_timeout: 
        keepalives: 
        keepalives_idle: 
        keepalives_interval: 
        keepalives_count: 
        tcp_user_timeout: 
        application_name: 
        prepared_statements: false
        database_tasks: true
        
        
      ci:
        adapter: postgresql
        encoding: unicode
        database: gitlabhq_production
        username: gitlab
        password: <%= File.read('/etc/gitlab/postgres/psql-password-ci').strip.to_json %>
        host: "gitlab-postgresql.gitlab.svc"
        port: 5432
        connect_timeout: 
        keepalives: 
        keepalives_idle: 
        keepalives_interval: 
        keepalives_count: 
        tcp_user_timeout: 
        application_name: 
        prepared_statements: false
        database_tasks: false
        
        
  session_store.yml.erb: |
    production:
        session_cookie_token_prefix: ""
  krb5.conf: |
    
  smtp_settings.rb: |
    
  resque.yml.erb: |
    production:
      url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@gitlab-redis-master.gitlab.svc:6379/0
      
      id:
  
  
  
  
  cable.yml.erb: |
    production:
      url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@gitlab-redis-master.gitlab.svc:6379/0
      
      id:
      adapter: redis
  
  
  
  
  
  
  
  gitlab.yml.erb: |
    production: &base
      gitlab:
        host: gitlab.localhost
        https: false
        max_request_duration_seconds: 57
        impersonation_enabled: 
        application_settings_cache_seconds: 60
        usage_ping_enabled: true
        seat_link_enabled: true
        username_changing_enabled: true
        issue_closing_pattern: 
        default_theme: 
        default_projects_features:
          issues: true
          merge_requests: true
          wiki: true
          snippets: true
          builds: true
          container_registry: true
        graphql_timeout: 
        webhook_timeout: 
        trusted_proxies:
        time_zone: "UTC"        
        email_from: "gitlab@localhost"
        email_display_name: "GitLab"
        email_reply_to: "noreply@localhost"
        email_subject_suffix: ""
      
      artifacts:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-artifacts
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: minio.localhost
            endpoint: http://gitlab-minio-svc.gitlab.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      lfs:
        enabled: true
        object_store:
          enabled: true
          remote_directory: git-lfs
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: minio.localhost
            endpoint: http://gitlab-minio-svc.gitlab.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      uploads:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-uploads
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: minio.localhost
            endpoint: http://gitlab-minio-svc.gitlab.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      packages:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-packages
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: minio.localhost
            endpoint: http://gitlab-minio-svc.gitlab.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      external_diffs:
        enabled: false
        when: 
        object_store:
          enabled: false
          remote_directory: gitlab-mr-diffs
          proxy_download: true
      terraform_state:
        enabled: false
        object_store:
          enabled: false
          remote_directory: gitlab-terraform-state
          proxy_download: true
      ci_secure_files:
        enabled: false
        object_store:
          enabled: false
          remote_directory: gitlab-ci-secure-files
          proxy_download: true
      dependency_proxy:
        enabled: false
        object_store:
          enabled: false
          remote_directory: gitlab-dependency-proxy
          proxy_download: true
      
      sidekiq:
        log_format: json
      
      pages:
        enabled: false
        access_control: false
        artifacts_server: true
        path: /srv/gitlab/shared/pages
        host: pages.localhost
        port: 80
        https: false
        secret_file: /etc/gitlab/pages/secret
        external_http: false
        external_https: false
        object_store:
          enabled: true
          remote_directory: gitlab-pages
          connection:
            provider: AWS
            region: us-east-1
            host: minio.localhost
            endpoint: http://gitlab-minio-svc.gitlab.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
        local_store:
          enabled: false
          path: 
        namespace_in_path: false
      mattermost:
        enabled: false
      ## Registry Integration
      registry:
        enabled: true
        host: registry.localhost
        api_url: http://gitlab-registry.gitlab.svc:5000
        key: /etc/gitlab/registry/gitlab-registry.key
        issuer: gitlab-issuer
        notification_secret: <%= YAML.load_file("/etc/gitlab/registry/notificationSecret").flatten.first %>
      gitlab_ci:
      ldap:
        enabled: false
      
      omniauth:
        enabled: false
        sync_profile_from_provider: []
        sync_profile_attributes: ["email"]
        allow_single_sign_on: ["saml"]
        block_auto_created_users: true
        auto_link_ldap_user: false
        auto_link_saml_user: false
        external_providers: []
      kerberos:
        enabled: false
        keytab: /etc/krb5.keytab
        use_dedicated_port: false
        port: 8443
        https: true
        simple_ldap_linking_allowed_realms: []
      
      duo_auth:
        enabled: false
        hostname: 
        integration_key: 
        secret_key: 
      shared:
      gitaly:
        client_path: /home/git/gitaly/bin
        token: <%= File.read('/etc/gitlab/gitaly/gitaly_token').strip.to_json %>
      repositories:
        storages: # You must have at least a `default` storage path.
          default:
            path: /var/opt/gitlab/repo
            gitaly_address: tcp://gitlab-gitaly-0.gitlab-gitaly.gitlab.svc:8075
          
      backup:
        path: "tmp/backups"   # Relative paths are relative to Rails.root (default: tmp/backups/)
      gitlab_kas:
        enabled: true
        secret_file: /etc/gitlab/kas/.gitlab_kas_secret
        external_url: "ws://kas.localhost"
        internal_url: "grpc://gitlab-kas.gitlab.svc:8153"
      suggested_reviewers:
        secret_file: /etc/gitlab/suggested_reviewers/.gitlab_suggested_reviewers_secret
      # Zoekt secrets are present, load them.
      zoekt:
        username_file: /etc/gitlab/zoekt/.gitlab_zoekt_username
        password_file: /etc/gitlab/zoekt/.gitlab_zoekt_password
      gitlab_shell:
        path: /home/git/gitlab-shell/
        hooks_path: /home/git/gitlab-shell/hooks/
        upload_pack: true
        receive_pack: true
        ssh_port: 22
        secret_file: /etc/gitlab/shell/.gitlab_shell_secret
      workhorse:
      git:
        bin_path: /usr/bin/git
      webpack:
      monitoring:
        ip_whitelist:
          - 127.0.0.0/8
        sidekiq_exporter:
      extra:
  configure: |
    # BEGIN gitlab.scripts.configure.secrets
    set -e
    config_dir="/init-config"
    secret_dir="/init-secrets"
    # required
    for secret in shell gitaly registry rails-secrets ; do
      mkdir -p "${secret_dir}/${secret}"
      cp -f -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
    done
    # optional
    for secret in redis redis-sentinel minio objectstorage postgres ldap duo omniauth smtp kas pages oauth-secrets mailroom gitlab-exporter microsoft_graph_mailer suggested_reviewers zoekt clickhouse ; do
      if [ -e "${config_dir}/${secret}" ]; then
        mkdir -p "${secret_dir}/${secret}"
        cp -f -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
      fi
    done
    # END gitlab.scripts.configure.secrets
    
    
    if [ ! -f "/${secret_dir}/objectstorage/.s3cfg" ]; then
    cat <<EOF > "/${secret_dir}/.s3cfg"
    [default]
    access_key = $(cat /init-secrets/minio/accesskey)
    secret_key = $(cat /init-secrets/minio/secretkey)
    bucket_location = us-east-1
    host_base = minio.localhost
    host_bucket = minio.localhost/%(bucket)
    default_mime_type = binary/octet-stream
    enable_multipart = True
    multipart_max_chunks = 10000
    multipart_chunk_size_mb = 128
    recursive = True
    recv_chunk = 65536
    send_chunk = 65536
    server_side_encryption = False
    signature_v2 = True
    socket_timeout = 300
    use_mime_magic = False
    verbosity = WARNING
    website_endpoint = http://minio.localhost
    EOF
    else
      mv "/${secret_dir}/objectstorage/.s3cfg" "/${secret_dir}/.s3cfg"
    fi
  configure-gsutil: |
    if [ -e "$GOOGLE_APPLICATION_CREDENTIALS" ]; then
      # The following script is used to configure gsutil when creating backups
      # It provides inputs to the `gsutil config -e` prompt as follows:
      # 1) Path to service account JSON key file
      # 2) Do not set permissions for key file
      # 3) GCP Project ID
      # 4) Decline anonymous usage statistics
      printf "$GOOGLE_APPLICATION_CREDENTIALS\nN\n\nN\n" | gsutil config -e
    else
      # If the backup config is not configured, assume that
      # Application Default Credentials are used with a service account.
      # This enables GKE Workload Identity Federation to work.
      echo '[GoogleCompute]\nservice_account = default' > ~/.boto
    fi
---
# Source: gitlab/charts/gitlab/charts/webservice/templates/configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-webservice
  namespace: gitlab
  labels:
    app: webservice
    chart: webservice-8.8.1
    release: gitlab
    heritage: Helm
    
data:
  installation_type: |
    gitlab-helm-chart
  database.yml.erb: |
    
    production:
      main:
        adapter: postgresql
        encoding: unicode
        database: gitlabhq_production
        username: gitlab
        password: <%= File.read('/etc/gitlab/postgres/psql-password-main').strip.to_json %>
        host: "gitlab-postgresql.gitlab.svc"
        port: 5432
        connect_timeout: 
        keepalives: 
        keepalives_idle: 
        keepalives_interval: 
        keepalives_count: 
        tcp_user_timeout: 
        application_name: 
        prepared_statements: false
        database_tasks: true
        
        
      ci:
        adapter: postgresql
        encoding: unicode
        database: gitlabhq_production
        username: gitlab
        password: <%= File.read('/etc/gitlab/postgres/psql-password-ci').strip.to_json %>
        host: "gitlab-postgresql.gitlab.svc"
        port: 5432
        connect_timeout: 
        keepalives: 
        keepalives_idle: 
        keepalives_interval: 
        keepalives_count: 
        tcp_user_timeout: 
        application_name: 
        prepared_statements: false
        database_tasks: false
        
        
  session_store.yml.erb: |
    production:
        session_cookie_token_prefix: ""
  krb5.conf: |
    
  smtp_settings.rb: |
    
  resque.yml.erb: |
    production:
      url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@gitlab-redis-master.gitlab.svc:6379/0
      
      id:
  
  
  
  
  cable.yml.erb: |
    production:
      url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@gitlab-redis-master.gitlab.svc:6379/0
      
      id:
      adapter: redis
  
  
  
  
  
  
  
  gitlab.yml.erb: |
    production: &base
      gitlab:
        host: gitlab.localhost
        https: false
        max_request_duration_seconds: 57
        impersonation_enabled: 
        application_settings_cache_seconds: 60
        usage_ping_enabled: true
        seat_link_enabled: true
        username_changing_enabled: true
        issue_closing_pattern: 
        default_theme: 
        default_color_mode: 
        default_syntax_highlighting_theme: 
        default_projects_features:
          issues: true
          merge_requests: true
          wiki: true
          snippets: true
          builds: true
          container_registry: true
        graphql_timeout: 
        webhook_timeout: 
        trusted_proxies:
        time_zone: "UTC"        
        email_from: "gitlab@localhost"
        email_display_name: "GitLab"
        email_reply_to: "noreply@localhost"
        email_subject_suffix: ""
      
      gravatar:
        plain_url: 
        ssl_url: 
      extra:
        
        
        
        
        
        
      artifacts:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-artifacts
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: minio.localhost
            endpoint: http://gitlab-minio-svc.gitlab.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      lfs:
        enabled: true
        object_store:
          enabled: true
          remote_directory: git-lfs
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: minio.localhost
            endpoint: http://gitlab-minio-svc.gitlab.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      uploads:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-uploads
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: minio.localhost
            endpoint: http://gitlab-minio-svc.gitlab.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      packages:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-packages
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: minio.localhost
            endpoint: http://gitlab-minio-svc.gitlab.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      external_diffs:
        enabled: false
        when: 
        object_store:
          enabled: false
          remote_directory: gitlab-mr-diffs
          proxy_download: true
      terraform_state:
        enabled: false
        object_store:
          enabled: false
          remote_directory: gitlab-terraform-state
          proxy_download: true
      ci_secure_files:
        enabled: false
        object_store:
          enabled: false
          remote_directory: gitlab-ci-secure-files
          proxy_download: true
      dependency_proxy:
        enabled: false
        object_store:
          enabled: false
          remote_directory: gitlab-dependency-proxy
          proxy_download: true
      
      sentry:
        enabled: false
        dsn: 
        clientside_dsn: 
        environment: 
      gitlab_docs:
        enabled: false
        host: ""
      
      sidekiq:
        log_format: json
      pages:
        enabled: false
        access_control: false
        artifacts_server: true
        path: /srv/gitlab/shared/pages
        host: pages.localhost
        port: 80
        https: false
        secret_file: /etc/gitlab/pages/secret
        external_http: false
        external_https: false
        object_store:
          enabled: true
          remote_directory: gitlab-pages
          connection:
            provider: AWS
            region: us-east-1
            host: minio.localhost
            endpoint: http://gitlab-minio-svc.gitlab.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
        local_store:
          enabled: false
          path: 
        namespace_in_path: false
      mattermost:
        enabled: false
      gitlab_ci:
      ldap:
        enabled: false
      
      omniauth:
        enabled: false
        sync_profile_from_provider: []
        sync_profile_attributes: ["email"]
        allow_single_sign_on: ["saml"]
        block_auto_created_users: true
        auto_link_ldap_user: false
        auto_link_saml_user: false
        external_providers: []
      kerberos:
        enabled: false
        keytab: /etc/krb5.keytab
        use_dedicated_port: false
        port: 8443
        https: true
        simple_ldap_linking_allowed_realms: []
      
      duo_auth:
        enabled: false
        hostname: 
        integration_key: 
        secret_key: 
      shared:
      gitaly:
        client_path: /home/git/gitaly/bin
        token: <%= File.read('/etc/gitlab/gitaly/gitaly_token').strip.to_json %>
      repositories:
        storages: # You must have at least a `default` storage path.
          default:
            path: /var/opt/gitlab/repo
            gitaly_address: tcp://gitlab-gitaly-0.gitlab-gitaly.gitlab.svc:8075
          
      backup:
        path: "tmp/backups"   # Relative paths are relative to Rails.root (default: tmp/backups/)
      gitlab_kas:
        enabled: true
        secret_file: /etc/gitlab/kas/.gitlab_kas_secret
        external_url: "ws://kas.localhost"
        internal_url: "grpc://gitlab-kas.gitlab.svc:8153"
      suggested_reviewers:
        secret_file: /etc/gitlab/suggested_reviewers/.gitlab_suggested_reviewers_secret
      # Zoekt secrets are present, load them.
      zoekt:
        username_file: /etc/gitlab/zoekt/.gitlab_zoekt_username
        password_file: /etc/gitlab/zoekt/.gitlab_zoekt_password
      gitlab_shell:
        path: /home/git/gitlab-shell/
        hooks_path: /home/git/gitlab-shell/hooks/
        upload_pack: true
        receive_pack: true
        ssh_port: 22
        secret_file: /etc/gitlab/shell/.gitlab_shell_secret
      workhorse:
        secret_file: /etc/gitlab/gitlab-workhorse/secret
      git:
        bin_path: /usr/bin/git
      webpack:
      monitoring:
        ip_whitelist:
          - 0.0.0.0/0
        web_exporter:
          enabled: true
          address: 0.0.0.0
          port: 8083
        sidekiq_exporter:
      shutdown:
        blackout_seconds: <%= ENV["SHUTDOWN_BLACKOUT_SECONDS"] %>
      rack_attack:
        git_basic_auth:
      ## Registry Integration
      registry:
        enabled: true
        host: registry.localhost
        api_url: http://gitlab-registry.gitlab.svc:5000
        key: /etc/gitlab/registry/gitlab-registry.key
        issuer: gitlab-issuer
        notification_secret: <%= YAML.load_file("/etc/gitlab/registry/notificationSecret").flatten.first %>
      smartcard:
        enabled: false
        ca_file: '/etc/gitlab/rails-secrets/smartcard-ca.crt'
        client_certificate_required_host: smartcard.localhost
        client_certificate_required_port: 443
        san_extensions: false
        required_for_git_access: false
  configure: |
    # BEGIN gitlab.scripts.configure.secrets
    set -e
    config_dir="/init-config"
    secret_dir="/init-secrets"
    # required
    for secret in shell gitaly registry rails-secrets gitlab-workhorse ; do
      mkdir -p "${secret_dir}/${secret}"
      cp -f -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
    done
    # optional
    for secret in redis redis-sentinel minio objectstorage postgres ldap duo omniauth smtp kas pages oauth-secrets mailroom gitlab-exporter microsoft_graph_mailer suggested_reviewers zoekt clickhouse ; do
      if [ -e "${config_dir}/${secret}" ]; then
        mkdir -p "${secret_dir}/${secret}"
        cp -f -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
      fi
    done
    # END gitlab.scripts.configure.secrets
---
# Source: gitlab/charts/gitlab/charts/webservice/templates/configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-workhorse-default
  namespace: gitlab
  labels:
    app: webservice
    chart: webservice-8.8.1
    release: gitlab
    heritage: Helm
    
data:
  installation_type: |
    gitlab-helm-chart
  workhorse-config.toml.tpl: |
    shutdown_timeout = "61s"
    [redis]
    DB = 0
    URL = "redis://gitlab-redis-master.gitlab.svc:6379"
    Password = {% file.Read "/etc/gitlab/redis/redis-password" | strings.TrimSpace | data.ToJSON %}
    {%- $supported_providers := slice "AWS" "AzureRM" "Google" -%}
    {%- $connection := coll.Dict "provider" "" -%}
    {%- if file.Exists "/etc/gitlab/minio/accesskey" %}
      {%- $aws_access_key_id := file.Read "/etc/gitlab/minio/accesskey" | strings.TrimSpace -%}
      {%- $aws_secret_access_key := file.Read "/etc/gitlab/minio/secretkey" | strings.TrimSpace -%}
      {%- $connection = coll.Dict "provider" "AWS" "aws_access_key_id" $aws_access_key_id "aws_secret_access_key" $aws_secret_access_key -%}
    {%- end %}
    {%- if file.Exists "/etc/gitlab/objectstorage/object_store" %}
      {%- $connection = file.Read "/etc/gitlab/objectstorage/object_store" | strings.TrimSpace | data.YAML -%}
    {%- end %}
    {%- if has $supported_providers $connection.provider %}
    [object_storage]
    provider = "{% $connection.provider %}"
    {%-   if eq $connection.provider "AWS" %}
    {%-     $connection = coll.Merge $connection (coll.Dict "aws_access_key_id" "" "aws_secret_access_key" "" ) %}
    # AWS / S3 object storage configuration.
    [object_storage.s3]
    # access/secret can be blank!
    aws_access_key_id = {% $connection.aws_access_key_id | strings.TrimSpace | data.ToJSON %}
    aws_secret_access_key = {% $connection.aws_secret_access_key | strings.TrimSpace | data.ToJSON %}
    {%-   else if eq $connection.provider "AzureRM" %}
    {%- $connection = coll.Merge $connection (coll.Dict "azure_storage_account_name" "" "azure_storage_account_name" "" ) %}
    # Azure Blob storage configuration.
    [object_storage.azurerm]
    azure_storage_account_name = {% $connection.azure_storage_account_name | strings.TrimSpace | data.ToJSON %}
    azure_storage_access_key = {% $connection.azure_storage_access_key | strings.TrimSpace | data.ToJSON %}
    {%-   else if eq $connection.provider "Google" %}
    # Google storage configuration.
    [object_storage.google]
    {% $connection | coll.Omit "provider" | data.ToTOML %}
    {%-   end %}
    {%- end %}
    [image_resizer]
    max_scaler_procs = 2
    max_filesize = 250000
    [[listeners]]
    network = "tcp"
    addr = "0.0.0.0:8181"
  configure: |
      set -e
      mkdir -p /init-secrets-workhorse/gitlab-workhorse
      cp -v -r -L /init-config/gitlab-workhorse/secret /init-secrets-workhorse/gitlab-workhorse/secret
      mkdir -p /init-secrets-workhorse/redis
      cp -v -r -L /init-config/redis/redis-password /init-secrets-workhorse/redis/
      if [ -d /init-config/minio ]; then
        mkdir -p /init-secrets-workhorse/minio
        cp -v -r -L /init-config/minio/* /init-secrets-workhorse/minio/
      fi

# Leave this here - This line denotes end of block to the parser.
---
# Source: gitlab/charts/gitlab/charts/webservice/templates/tests/tests.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-webservice-tests
  namespace: gitlab
  labels:
    app: webservice
    chart: webservice-8.8.1
    release: gitlab
    heritage: Helm
    
data:
  test_login: |
    set -e
    echo 'Start Test'
    endpoint="http://gitlab.localhost"
    cookie_read="-c /tmp/test_login.cookie"
    cookie_readwrite="$cookie_read -b /tmp/test_login.cookie"

    signin_url="$endpoint/users/sign_in"
    echo "Login to create a session: $signin_url"
    csrf=$(curl -L $signin_url --fail -s $cookie_read | grep -Po '<meta.*name="csrf-token".*content="\K[a-zA-Z0-9\+=\-\/]*')
    curl -X POST $signin_url -s $cookie_readwrite -F "authenticity_token=$csrf" -F 'user[login]=root' -F "user[password]=$(cat /initial_root_password)"

    profile_url="$endpoint/-/profile"
    echo "Confirm session valid: $profile_url"
    profile_status=$(curl -L -s -o /tmp/profile_output -w "%{http_code}" $cookie_readwrite $profile_url)

    if [ "$profile_status" != "200" ]; then
      echo "Error: Session Invalid"
      cat /tmp/profile_output
      exit 1
    fi

    echo 'Test Passed'
    exit 0

# Leave this here - This line denotes end of block to the parser.
---
# Source: gitlab/charts/minio/templates/minioconfig_configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-minio-config-cm
  namespace: gitlab
  labels:
    app: minio
    chart: minio-0.4.3
    release: gitlab
    heritage: Helm
    
data:
  initialize: |-
    #!/bin/sh
    # minio/mc container has Busybox Ash, be sure to be POSIX compliant and avoid Bash-isms
    set -e ; # Have script exit in the event of a failed command.
    
    # connectToMinio
    # Use a check-sleep-check loop to wait for Minio service to be available
    connectToMinio() {
      set -e ; # fail if we can't read the keys.
      ACCESS=$(cat /config/accesskey) ; SECRET=$(cat /config/secretkey) ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to Minio server: http://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="mc config host add myminio http://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS -eq 0 ] ;
      do
        sleep 1 ; # 1 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }
    
    # checkBucketExists ($bucket)
    # Check if the bucket exists, by using the exit code of `mc ls`
    checkBucketExists() {
      BUCKET=$1
      CMD=$(/usr/bin/mc ls myminio/$BUCKET > /dev/null 2>&1)
      return $?
    }
    
    # createBucket ($bucket, $policy, $purge)
    # Ensure bucket exists, purging if asked to
    createBucket() {
      BUCKET=$1
      POLICY=$2
      PURGE=$3
    
    
      # Purge the bucket, if set & exists
      # Since PURGE is user input, check explicitly for `true`
      if [ $PURGE = true ]; then
        if checkBucketExists $BUCKET ; then
          echo "Purging bucket '$BUCKET'."
          set +e ; # don't exit if this fails
          /usr/bin/mc rm -r --force myminio/$BUCKET
          set -e ; # reset `e` as active
        else
          echo "Bucket '$BUCKET' does not exist, skipping purge."
        fi
      fi
    
      # Create the bucket if it does not exist
      if ! checkBucketExists $BUCKET ; then
        echo "Creating bucket '$BUCKET'"
        /usr/bin/mc mb myminio/$BUCKET
      else
        echo "Bucket '$BUCKET' already exists."
      fi
    
      # At this point, the bucket should exist, skip checking for existance
      # Set policy on the bucket
      echo "Setting policy of bucket '$BUCKET' to '$POLICY'."
      /usr/bin/mc policy $POLICY myminio/$BUCKET
    }
    
    connectToMinio
    createBucket registry none false
    createBucket git-lfs none false
    createBucket runner-cache none false
    createBucket gitlab-uploads none false
    createBucket gitlab-artifacts none false
    createBucket gitlab-backups none false
    createBucket gitlab-packages none false
    createBucket tmp none false
    createBucket gitlab-mr-diffs none false
    createBucket gitlab-terraform-state none false
    createBucket gitlab-ci-secure-files none false
    createBucket gitlab-dependency-proxy none false
    createBucket gitlab-pages none false
    
  configure: |-
    sed -e 's@ACCESS_KEY@'"$(cat /config/accesskey)"'@' -e 's@SECRET_KEY@'"$(cat /config/secretkey)"'@' /config/config.json > /minio/config.json
  config.json: |-
    {
      "version": "20",
      "credential": {
        "accessKey": "ACCESS_KEY",
        "secretKey": "SECRET_KEY"
      },
      "region": "us-east-1",
      "browser": "on",
      "domain": "",
      "logger": {
        "console": {
          "enable": true
        },
        "file": {
          "enable": false,
          "fileName": ""
        }
      },
      "notify": {
        "amqp": {
          "1": {
            "enable": false,
            "url": "",
            "exchange": "",
            "routingKey": "",
            "exchangeType": "",
            "deliveryMode": 0,
            "mandatory": false,
            "immediate": false,
            "durable": false,
            "internal": false,
            "noWait": false,
            "autoDeleted": false
          }
        },
        "nats": {
          "1": {
            "enable": false,
            "address": "",
            "subject": "",
            "username": "",
            "password": "",
            "token": "",
            "secure": false,
            "pingInterval": 0,
            "streaming": {
              "enable": false,
              "clusterID": "",
              "clientID": "",
              "async": false,
              "maxPubAcksInflight": 0
            }
          }
        },
        "elasticsearch": {
          "1": {
            "enable": false,
            "format": "namespace",
            "url": "",
            "index": ""
          }
        },
        "redis": {
          "1": {
            "enable": false,
            "format": "namespace",
            "address": "",
            "password": "",
            "key": ""
          }
        },
        "postgresql": {
          "1": {
            "enable": false,
            "format": "namespace",
            "connectionString": "",
            "table": "",
            "host": "",
            "port": "",
            "user": "",
            "password": "",
            "database": ""
          }
        },
        "kafka": {
          "1": {
            "enable": false,
            "brokers": null,
            "topic": ""
          }
        },
        "webhook": {
          "1": {
            "enable": false,
            "endpoint": ""
          }
        },
        "mysql": {
          "1": {
            "enable": false,
            "format": "namespace",
            "dsnString": "",
            "table": "",
            "host": "",
            "port": "",
            "user": "",
            "password": "",
            "database": ""
          }
        },
        "mqtt": {
          "1": {
            "enable": false,
            "broker": "",
            "topic": "",
            "qos": 0,
            "clientId": "",
            "username": "",
            "password": ""
          }
        }
      }
    }
# Blank line to signal end of Block
---
# Source: gitlab/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-redis-configuration
  namespace: "gitlab"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.13.2
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/managed-by: Helm
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: gitlab/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-redis-health
  namespace: "gitlab"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.13.2
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/managed-by: Helm
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: gitlab/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-redis-scripts
  namespace: "gitlab"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.13.2
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/managed-by: Helm
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: gitlab/charts/registry/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-registry
  namespace: gitlab
  labels:
    app: registry
    chart: registry-0.7.0
    release: gitlab
    heritage: Helm
    
data:
  configure: |-
    if [ -e /config/accesskey ] ; then
      sed -i -e 's@ACCESS_KEY@'"$(cat /config/accesskey)"'@' -e 's@SECRET_KEY@'"$(cat /config/secretkey)"'@' /registry/config.yml
    fi
    # Place the `http.secret` value from the kubernetes secret
    sed -i -e 's@HTTP_SECRET@'"$(cat /config/httpSecret)"'@' /registry/config.yml
    # Populate sensitive registry notification secrets in the config file
    if [ -d /config/notifications ]; then
      for i in /config/notifications/*; do
        filename=$(basename $i);
        sed -i -e 's@'"${filename}"'@'"$(cat $i)"'@' /registry/config.yml;
      done
    fi
    # Insert any provided `storage` block from kubernetes secret
    if [ -d /config/storage ]; then
      # Copy contents of storage secret(s)
      mkdir -p /registry/storage
      cp -v -r -L /config/storage/* /registry/storage/
      # Ensure there is a new line in the end
      echo '' >> /registry/storage/config
      # Default `delete.enabled: true` if not present.
      ## Note: busybox grep doesn't support multiline, so we chain `egrep`.
      if ! $(egrep -A1 '^delete:\s*$' /registry/storage/config | egrep -q '\s{2,4}enabled:') ; then
        echo 'delete:' >> /registry/storage/config
        echo '  enabled: true' >> /registry/storage/config
      fi
      # Indent /registry/storage/config 2 spaces before inserting into config.yml
      sed -i 's/^/  /' /registry/storage/config
      # Insert into /registry/config.yml after `storage:`
      sed -i '/^storage:/ r /registry/storage/config' /registry/config.yml
      # Remove the now extraneous `config` file
      rm /registry/storage/config
    fi
    # Copy any middleware.storage if present
    if [ -d /config/middleware.storage ]; then
      cp -v -r -L /config/middleware.storage  /registry/middleware.storage
    fi
    # Set to known path, to used ConfigMap
    cat /config/certificate.crt > /registry/certificate.crt
    # Copy the optional profiling keyfile to the expected location
    if [ -f /config/profiling-key.json ]; then
      cp /config/profiling-key.json /registry/profiling-key.json
    fi
    # Insert Database password, if enabled
    if [ -f /config/database_password ] ; then
      sed -i -e 's@DB_PASSWORD_FILE@'"$(cat /config/database_password)"'@' /registry/config.yml
    fi
    # Insert Redis(cache) password, if enabled
    if [ -f /config/registry/redis-password ] ; then
      sed -i -e 's@REDIS_CACHE_PASSWORD@'"$(cat /config/registry/redis-password)"'@' /registry/config.yml
    fi
    # Insert Redis(rate-limiter) password, if enabled
    if [ -f /config/registry/redis-rateLimiting-password ] ; then
      sed -i -e 's@REDIS_RATE_LIMITING_PASSWORD@'"$(cat /config/registry/redis-rateLimiting-password)"'@' /registry/config.yml
    fi
    # Copy the database TLS connection files to the expected location and set permissions
    if [ -d /config/ssl ]; then
      cp -r /config/ssl/ /registry/ssl
      chmod 700 /registry/ssl
      chmod 600 /registry/ssl/*.pem
    fi
    # Copy TLS certificates if present
    if [ -d /config/tls ]; then
      cp -r /config/tls/ /registry/tls
      chmod 700 /registry/tls
      chmod 600 /registry/tls/*
    fi
  config.yml.tpl: |
    version: 0.1
    log:
      fields:
        service: registry
      level: info
    http:
      addr: :5000
      # `host` is not configurable
      # `prefix` is not configurable
      debug:
        addr: :5001
        prometheus:
          enabled: false
          path: /metrics
      draintimeout: 0
      headers:
        X-Content-Type-Options: [nosniff]
      secret: "HTTP_SECRET"
      relativeurls: false
    health:
      storagedriver:
        enabled: false
        interval: 10s
        threshold: 3
    auth:
      token:
        realm: http://gitlab.localhost/jwt/auth
        service: container_registry
        issuer: gitlab-issuer
        # This is provided from the initContainer execution, at a known path.
        rootcertbundle: /etc/docker/registry/certificate.crt
        autoredirect: false
    validation:
      disabled: true
      manifests:
        referencelimit: 0
        payloadsizelimit: 0
        urls:
          allow:
          deny:
    
    notifications:
    reporting:
    profiling:
    storage:
      maintenance:
        readonly:
          enabled: false
        uploadpurging:
          enabled: true
          age: 168h
          interval: 24h
          dryrun: false
      s3:
        accesskey: "ACCESS_KEY"
        secretkey: "SECRET_KEY"
        region: us-east-1
        regionendpoint: http://gitlab-minio-svc.gitlab.svc:9000
        bucket: registry
        secure: true
        v4auth: true
        rootdirectory: /
      cache:
        blobdescriptor: 'inmemory'
      delete:
        enabled: true
      redirect:
        disable: true
    middleware:
    
    gc:
      disabled: false
    redis:

  # minimal configuration, in order to do database migrations
  migrations-config.yml.tpl: |
    version: 0.1
    log:
      fields:
        service: registry
      level: info
---
# Source: gitlab/templates/chart-info.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-gitlab-chart-info
  namespace: gitlab
  labels:
    app: gitlab
    chart: gitlab-8.8.1
    release: gitlab
    heritage: Helm
    
data:
  gitlabVersion: "17.8.1"
  gitlabChartVersion: "8.8.1"
---
# Source: gitlab/templates/initdb-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-postgresql-init-db
  namespace: gitlab
  labels:
    app: gitlab
    chart: gitlab-8.8.1
    release: gitlab
    heritage: Helm
    
data:
  init_revision.sh: |
    if [[ ! -f "$POSTGRESQL_VOLUME_DIR/.gitlab_1_scripts_initialized" ]] ; then
      rm -f "$POSTGRESQL_VOLUME_DIR/.user_scripts_initialized"
      touch "$POSTGRESQL_VOLUME_DIR/.gitlab_1_scripts_initialized"
    fi
  enable_extensions.sh: |
    [[ -n "${POSTGRES_POSTGRES_PASSWORD_FILE:-}" ]] && POSTGRES_POSTGRES_PASSWORD=$(cat ${POSTGRES_POSTGRES_PASSWORD_FILE})
    PGPASSWORD=${POSTGRES_POSTGRES_PASSWORD} psql -d gitlabhq_production -U postgres -c 'CREATE EXTENSION IF NOT EXISTS pg_trgm; CREATE EXTENSION IF NOT EXISTS btree_gist;'
# Leave this here - This line denotes end of block to the parser.
---
# Source: gitlab/charts/gitlab/charts/toolbox/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: gitlab-toolbox-tmp
  namespace: gitlab
  labels:
    app: toolbox
    chart: toolbox-8.8.1
    release: gitlab
    heritage: Helm
    
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "10Gi"
  selector:
---
# Source: gitlab/charts/minio/templates/minio_pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: gitlab-minio
  namespace: gitlab
  labels:
    app: minio
    chart: minio-0.4.3
    release: gitlab
    heritage: Helm
    
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "10Gi"
  selector:
---
# Source: gitlab/charts/gitlab/charts/gitaly/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-gitaly
  namespace: gitlab
  labels:
    app: gitaly
    chart: gitaly-8.8.1
    release: gitlab
    heritage: Helm
    
    
  annotations:
    
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 8075
      # This port is NOT prefixed with `grpc` due to
      # https://gitlab.com/gitlab-org/charts/gitlab/-/issues/3822
      name: tcp-gitaly
      targetPort: grpc-gitaly
    - port: 9236
      name: http-metrics
      targetPort: http-metrics
  selector:
    app: gitaly
    release: gitlab
---
# Source: gitlab/charts/gitlab/charts/gitlab-exporter/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-gitlab-exporter
  namespace: gitlab
  labels:
    app: gitlab-exporter
    chart: gitlab-exporter-8.8.1
    release: gitlab
    heritage: Helm
    
    
  annotations:
    
spec:
  type: ClusterIP
  ports:
    - port: 9168
      targetPort: http-metrics
      protocol: TCP
      name: http-metrics
  selector:
    app: gitlab-exporter
    release: gitlab
---
# Source: gitlab/charts/gitlab/charts/gitlab-shell/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-gitlab-shell
  namespace: gitlab
  labels:
    app: gitlab-shell
    chart: gitlab-shell-8.8.1
    release: gitlab
    heritage: Helm
    
    
  annotations:
    
spec:
  type: ClusterIP
  ports:
    - port: 22
      targetPort: 2222
      protocol: TCP
      name: ssh
  selector:
    app: gitlab-shell
    release: gitlab
---
# Source: gitlab/charts/gitlab/charts/kas/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-kas
  namespace: gitlab
  labels:
    app: kas
    chart: kas-8.8.1
    release: gitlab
    heritage: Helm
    
    
  annotations:
    
spec:
  type: "ClusterIP"
  ports:
    - port: 8150
      targetPort: 8150
      protocol: TCP
      name: tcp-kas-external-api
    - port: 8153
      targetPort: 8153
      protocol: TCP
      name: tcp-kas-internal-api
    - port: 8154
      targetPort: 8154
      protocol: TCP
      name: tcp-kas-k8s-api
    - port: 8151
      targetPort: http-metrics
      protocol: TCP
      name: http-metrics
  selector:
    app: kas
    release: gitlab
---
# Source: gitlab/charts/gitlab/charts/webservice/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-webservice-default
  namespace: gitlab
  labels:
    app: webservice
    chart: webservice-8.8.1
    release: gitlab
    heritage: Helm
    
    gitlab.com/webservice-name: default
    
  annotations:
    
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http-webservice
      protocol: TCP
      name: http-webservice
    - port: 8181
      targetPort: http-workhorse
      protocol: TCP
      name: http-workhorse
    - port: 8083
      targetPort: http-metrics-ws
      protocol: TCP
      name: http-metrics-ws
  selector:
    app: webservice
    release: gitlab
    
    gitlab.com/webservice-name: default
---
# Source: gitlab/charts/minio/templates/minio_svc.yaml
kind: Service
apiVersion: v1
metadata:
  name: gitlab-minio-svc
  namespace: gitlab
  labels:
    app: minio
    chart: minio-0.4.3
    release: gitlab
    heritage: Helm
    
  annotations:
    
spec:
  type: ClusterIP
  selector:
    app: minio
    release: gitlab
    component: app
  ports:
    - name: http
      port: 9000
      targetPort: 9000
      protocol: TCP
---
# Source: gitlab/charts/postgresql/templates/primary/metrics-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-postgresql-metrics
  namespace: "gitlab"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.5.2
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
  annotations:
    gitlab.com/prometheus_port: "9187"
    gitlab.com/prometheus_scrape: "true"
    prometheus.io/port: "9187"
    prometheus.io/scrape: "true"
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http-metrics
      port: 9187
      targetPort: http-metrics
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: primary
---
# Source: gitlab/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-postgresql-hl
  namespace: "gitlab"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.5.2
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: primary
---
# Source: gitlab/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-postgresql
  namespace: "gitlab"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.5.2
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: primary
---
# Source: gitlab/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-redis-headless
  namespace: "gitlab"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.13.2
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/managed-by: Helm
  annotations:
    
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: gitlab
---
# Source: gitlab/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-redis-master
  namespace: "gitlab"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.13.2
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: master
---
# Source: gitlab/charts/redis/templates/metrics-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-redis-metrics
  namespace: "gitlab"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.13.2
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
spec:
  type: ClusterIP
  ports:
    - name: http-metrics
      port: 9121
      protocol: TCP
      targetPort: metrics
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: gitlab
---
# Source: gitlab/charts/registry/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-registry
  namespace: gitlab
  labels:
    app: registry
    chart: registry-0.7.0
    release: gitlab
    heritage: Helm
    
    
  annotations:
    
spec:
  type: ClusterIP
  ports:
  - port: 5000
    targetPort: http
    protocol: TCP
    name: http-registry
  selector:
    app: registry
    release: gitlab
---
# Source: gitlab/charts/gitlab/charts/gitlab-exporter/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab-gitlab-exporter
  namespace: gitlab
  labels:
    app: gitlab-exporter
    chart: gitlab-exporter-8.8.1
    release: gitlab
    heritage: Helm
    
  annotations:
    
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gitlab-exporter
      release: gitlab
      
  template:
    metadata:
      labels:
        app: gitlab-exporter
        chart: gitlab-exporter-8.8.1
        release: gitlab
        heritage: Helm
        
        
      annotations:
        checksum/config: ed170f2db79e60fea2c92028d795f5a5e7c8eca868fbcee3b43d67f313444b8b
        gitlab.com/prometheus_scrape: "true"
        gitlab.com/prometheus_port: "9168"
        gitlab.com/prometheus_path: /metrics
        prometheus.io/scrape: "true"
        prometheus.io/port: "9168"
        prometheus.io/path: /metrics

    spec:
      
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      
      affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 1
                podAffinityTerm:
                  topologyKey: "kubernetes.io/hostname"
                  labelSelector:
                    matchLabels:
                        app: gitlab-exporter
                        release: gitlab
                        
                        
      automountServiceAccountToken: false
      
      initContainers:
        
        - name: certificates
          image: registry.gitlab.com/gitlab-org/build/cng/certificates:v17.8.1    
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
          env:
          
          - name: TZ
            value: "UTC"
          
          - name: MALLOC_CONF
            value: "dirty_decay_ms:0,muzzy_decay_ms:0"
          - name: RUBY_GC_HEAP_FREE_SLOTS_MAX_RATIO
            value: "0.111"
          - name: RUBY_GC_HEAP_FREE_SLOTS_MIN_RATIO
            value: "0.055"
          - name: RUBY_GC_HEAP_INIT_SLOTS
            value: "80000"
          
          volumeMounts:
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs
            readOnly: false
          - name: etc-pki-ca-trust-extracted-pem
            mountPath: /etc/pki/ca-trust/extracted/pem
            readOnly: false
          resources:
            requests:
              cpu: 50m
        - name: configure
          command: ['sh', '/config/configure']
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-base:v17.8.1"                    
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
          env:
          
          - name: TZ
            value: "UTC"
          
          - name: MALLOC_CONF
            value: "dirty_decay_ms:0,muzzy_decay_ms:0"
          - name: RUBY_GC_HEAP_FREE_SLOTS_MAX_RATIO
            value: "0.111"
          - name: RUBY_GC_HEAP_FREE_SLOTS_MIN_RATIO
            value: "0.055"
          - name: RUBY_GC_HEAP_INIT_SLOTS
            value: "80000"
          
          volumeMounts:
          
          
          - name: gitlab-exporter-config
            mountPath: /config
            readOnly: true
          - name: init-gitlab-exporter-secrets
            mountPath: /init-config
            readOnly: true
          - name: gitlab-exporter-secrets
            mountPath: /init-secrets
            readOnly: false
          resources:
            requests:
              cpu: 50m      
      containers:
        
        - name: gitlab-exporter
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-exporter:15.1.0"                    
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1000
          env:
            
            - name: TZ
              value: "UTC"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab-exporter/templates'
            - name: CONFIG_DIRECTORY
              value: '/etc/gitlab-exporter'
            
            - name: MALLOC_CONF
              value: "dirty_decay_ms:0,muzzy_decay_ms:0"
            - name: RUBY_GC_HEAP_FREE_SLOTS_MAX_RATIO
              value: "0.111"
            - name: RUBY_GC_HEAP_FREE_SLOTS_MIN_RATIO
              value: "0.055"
            - name: RUBY_GC_HEAP_INIT_SLOTS
              value: "80000"
            
          ports:
          - containerPort: 9168
            name: http-metrics
          volumeMounts:
            - name: gitlab-exporter-config
              mountPath: /var/opt/gitlab-exporter/templates/gitlab-exporter.yml.erb
              subPath: gitlab-exporter.yml.erb
            - name: gitlab-exporter-secrets
              mountPath: '/etc/gitlab'
              readOnly: true
            
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
            - name: etc-pki-ca-trust-extracted-pem
              mountPath: /etc/pki/ca-trust/extracted/pem
              readOnly: true
          livenessProbe:
            exec:
              command:
                - pgrep
                - -f
                - gitlab-exporter
          readinessProbe:
            exec:
              command:
                - pgrep
                - -f
                - gitlab-exporter
          lifecycle:
            preStop:
              exec:
                command: ["/bin/bash", "-c", "pkill -f 'gitlab-exporter'"]
          resources:
            requests:
              cpu: 75m
              memory: 100M
      volumes:
      
      
      - name: gitlab-exporter-config
        configMap:
          name: gitlab-gitlab-exporter
      - name: init-gitlab-exporter-secrets
        projected:
          defaultMode: 0400
          sources:
          - secret:
              name: "gitlab-postgresql-password"
              items:
                - key: "postgresql-password"
                  path: postgres/psql-password-ci
          - secret:
              name: "gitlab-postgresql-password"
              items:
                - key: "postgresql-password"
                  path: postgres/psql-password-main
          - secret:
              name: "gitlab-redis-secret"
              items:
                - key: "secret"
                  path: redis/redis-password
          
          

      - name: gitlab-exporter-secrets
        emptyDir:
          medium: "Memory"
      
      - name: etc-ssl-certs
        emptyDir:
          medium: "Memory"
      - name: etc-pki-ca-trust-extracted-pem
        emptyDir:
          medium: "Memory"
---
# Source: gitlab/charts/gitlab/charts/gitlab-shell/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab-gitlab-shell
  namespace: gitlab
  labels:
    app: gitlab-shell
    chart: gitlab-shell-8.8.1
    release: gitlab
    heritage: Helm
    
  annotations:
    
spec:
  selector:
    matchLabels:
      app: gitlab-shell
      release: gitlab
      
  template:
    metadata:
      labels:
        app: gitlab-shell
        chart: gitlab-shell-8.8.1
        release: gitlab
        heritage: Helm
        
        
      annotations:
        checksum/config: 0c3d66c547deffd9f95dda96a36ab4713aa029bf63d8d01018a7afecc51da8d0
        checksum/config-sshd: 61dbb3ff9c3954072a4faa30be745a0e23c86b2d26512875f433006a99c7ecd0
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      
      initContainers:
        
        - name: certificates
          image: registry.gitlab.com/gitlab-org/build/cng/certificates:v17.8.1    
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
          env:
          
          - name: TZ
            value: "UTC"
          
          
          volumeMounts:
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs
            readOnly: false
          - name: etc-pki-ca-trust-extracted-pem
            mountPath: /etc/pki/ca-trust/extracted/pem
            readOnly: false
          resources:
            requests:
              cpu: 50m
        - name: configure
          command: ['sh', '/config/configure']
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-base:v17.8.1"                    
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
          env:
          
          - name: TZ
            value: "UTC"
          
          
          volumeMounts:
          
          - name: shell-config
            mountPath: /config
            readOnly: true
          - name: shell-init-secrets
            mountPath: /init-config
            readOnly: true
          - name: shell-secrets
            mountPath: /init-secrets
            readOnly: false
          resources:
            requests:
              cpu: 50m
      
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault      
      
      affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 1
                podAffinityTerm:
                  topologyKey: "kubernetes.io/hostname"
                  labelSelector:
                    matchLabels:
                        app: gitlab-shell
                        release: gitlab
                        
                        
      automountServiceAccountToken: false
      containers:
        
        - name: gitlab-shell
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-shell:v14.39.0"                    
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1000
          ports:
            - containerPort: 2222
              name: ssh
          env:
            - name: GITALY_FEATURE_DEFAULT_ON
              value: "1"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/etc/gitlab-shell'
            - name: CONFIG_DIRECTORY
              value: '/srv/gitlab-shell'
            - name: KEYS_DIRECTORY
              value: '/etc/gitlab-secrets/ssh'
            - name: SSH_DAEMON
              value: "openssh"
            
            
            
            - name: TZ
              value: "UTC"
          volumeMounts:
            - name: shell-config
              mountPath: '/etc/gitlab-shell'
            - name: shell-secrets
              mountPath: '/etc/gitlab-secrets'
              readOnly: true
            - name: shell-config
              mountPath: '/etc/krb5.conf'
              subPath: krb5.conf
              readOnly: true
            - name: sshd-config
              mountPath: /etc/ssh/sshd_config
              subPath: sshd_config
              readOnly: true
            
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
            - name: etc-pki-ca-trust-extracted-pem
              mountPath: /etc/pki/ca-trust/extracted/pem
              readOnly: true
          livenessProbe:
            exec:
              command:
              - /scripts/healthcheck
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            tcpSocket:
              port: 2222
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 2
          resources:
            requests:
              cpu: 0
              memory: 6M
      terminationGracePeriodSeconds: 30
      volumes:
      
      - name: shell-config
        configMap:
          name: gitlab-gitlab-shell
      - name: sshd-config
        configMap:
          name: gitlab-gitlab-shell-sshd
      - name: shell-init-secrets
        projected:
          defaultMode: 0440
          sources:
            - secret:
                name: "gitlab-gitlab-shell-host-keys"
            - secret:
                name: "gitlab-gitlab-shell-secret"
                items:
                  - key: "secret"
                    path: shell/.gitlab_shell_secret
      # Actual config dirs that will be used in the container
      - name: shell-secrets
        emptyDir:
          medium: "Memory"
      
      - name: etc-ssl-certs
        emptyDir:
          medium: "Memory"
      - name: etc-pki-ca-trust-extracted-pem
        emptyDir:
          medium: "Memory"
---
# Source: gitlab/charts/gitlab/charts/kas/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab-kas
  namespace: gitlab
  labels:
    app: kas
    chart: kas-8.8.1
    release: gitlab
    heritage: Helm
    
  annotations:
    
spec:
  selector:
    matchLabels:
      app: kas
      release: gitlab
      
  template:
    metadata:
      labels:
        app: kas
        chart: kas-8.8.1
        release: gitlab
        heritage: Helm
        
        
      annotations:
        checksum/config: f4e358593bbc0c9e94f7ce09d5c51237e110e5856bcd0473bc7adc655b2542d2
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        gitlab.com/prometheus_scrape: "true"
        gitlab.com/prometheus_port: "8151"
        gitlab.com/prometheus_path: /metrics
        prometheus.io/scrape: "true"
        prometheus.io/port: "8151"
        prometheus.io/path: /metrics
    spec:
      
      automountServiceAccountToken: false
      
      affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 1
                podAffinityTerm:
                  topologyKey: "kubernetes.io/hostname"
                  labelSelector:
                    matchLabels:
                        app: kas
                        release: gitlab
                        
                        
      
      securityContext:
        runAsUser: 65532
        runAsGroup: 65532
        fsGroup: 65532
        seccompProfile:
          type: RuntimeDefault      
      
      initContainers:
        - name: certificates
          image: registry.gitlab.com/gitlab-org/build/cng/certificates:v17.8.1    
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
          env:
          
          - name: TZ
            value: "UTC"
          
          
          volumeMounts:
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs
            readOnly: false
          - name: etc-pki-ca-trust-extracted-pem
            mountPath: /etc/pki/ca-trust/extracted/pem
            readOnly: false
          resources:
            requests:
              cpu: 50m
      containers:
        
        - name: kas
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-kas:v17.8.1"                    
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 65532
          args:
            - "--configuration-file=/etc/kas/config.yaml"
          env:
            - name: OWN_PRIVATE_API_HOST
              value: gitlab-kas.gitlab.svc
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: OWN_PRIVATE_API_URL
              value: "grpc://$(POD_IP):8155"
            
            
            
            - name: TZ
              value: "UTC"
          ports:
            - containerPort: 8150
              name: kas
            - containerPort: 8154
              name: kas-k8s-api
            - containerPort: 8155
              name: kas-private-api
            - containerPort: 8151
              name: http-metrics
          readinessProbe:
            httpGet:
              path: /readiness
              port: 8151
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /liveness
              port: 8151
            initialDelaySeconds: 15
            periodSeconds: 20
          resources:
            requests:
              cpu: 100m
              memory: 100M
          volumeMounts:
            - name: init-etc-kas
              mountPath: /etc/kas
              readOnly: true
            
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
            - name: etc-pki-ca-trust-extracted-pem
              mountPath: /etc/pki/ca-trust/extracted/pem
              readOnly: true
      terminationGracePeriodSeconds: 300
      volumes:
      
      
      - name: etc-ssl-certs
        emptyDir:
          medium: "Memory"
      - name: etc-pki-ca-trust-extracted-pem
        emptyDir:
          medium: "Memory"
      - name: init-etc-kas
        projected:
          defaultMode: 0440
          sources:
            - configMap:
                name: gitlab-kas
            - secret:
                name: "gitlab-gitlab-kas-secret"
                items:
                  - key: "kas_shared_secret"
                    path: .gitlab_kas_secret
            - secret:
                name: "gitlab-kas-private-api"
                items:
                  - key: "kas_private_api_secret"
                    path: .gitlab_kas_private_api_secret
            - secret:
                name: "gitlab-kas-websocket-token"
                items:
                  - key: "kas_websocket_token_secret"
                    path: .gitlab_kas_websocket_token_secret
            
            
            
            
            - secret:
                name: "gitlab-redis-secret"
                items:
                  - key: "secret"
                    path: redis/redis-password
---
# Source: gitlab/charts/gitlab/charts/sidekiq/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab-sidekiq-all-in-1-v2
  namespace: gitlab
  labels:
    app: sidekiq
    chart: sidekiq-8.8.1
    release: gitlab
    heritage: Helm
    
    queue-pod-name: all-in-1
  annotations:
    
spec:
  selector:
    matchLabels:
      app: sidekiq
      release: gitlab
      
      queue-pod-name: all-in-1
  template:
    metadata:
      labels:
        app: sidekiq
        chart: sidekiq-8.8.1
        release: gitlab
        heritage: Helm
        
        
        queue-pod-name: all-in-1
      annotations:
        checksum/configmap: 948321fd345927d8bd655689db048af80eeb716e2946c9ede0a30233ebb304ff
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        gitlab.com/prometheus_scrape: "true"
        gitlab.com/prometheus_port: "3807"
        gitlab.com/prometheus_path: /metrics
        prometheus.io/scrape: "true"
        prometheus.io/port: "3807"
        prometheus.io/path: /metrics
    spec:
      
      
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app: sidekiq
                  release: gitlab
                  
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 30
      initContainers:
        
        - name: certificates
          image: registry.gitlab.com/gitlab-org/build/cng/certificates:v17.8.1    
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1000
          env:
          
          - name: TZ
            value: "UTC"
          
          
          volumeMounts:
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs
            readOnly: false
          - name: etc-pki-ca-trust-extracted-pem
            mountPath: /etc/pki/ca-trust/extracted/pem
            readOnly: false
          resources:
            requests:
              cpu: 50m
        - name: configure
          command: ['sh', '/config/configure']
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-base:v17.8.1"                    
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1000
          env:
          
          - name: TZ
            value: "UTC"
          
          
          volumeMounts:
          
          
          
          
          - name: sidekiq-config
            mountPath: /config
            readOnly: true
          - name: init-sidekiq-secrets
            mountPath: /init-config
            readOnly: true
          - name: sidekiq-secrets
            mountPath: /init-secrets
            readOnly: false
          resources:
            requests:
              cpu: 50m
        - name: dependencies
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ee:v17.8.1"                    
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1000
          args:
            - /scripts/wait-for-deps
          env:
            - name: GITALY_FEATURE_DEFAULT_ON
              value: "1"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab/templates'
            - name: CONFIG_DIRECTORY
              value: '/srv/gitlab/config'
            - name: SIDEKIQ_CONCURRENCY
              value: "20"
            - name: SIDEKIQ_TIMEOUT
              value: "25"
            
            
            
            - name: TZ
              value: "UTC"
          volumeMounts:
          
          
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs/
            readOnly: true
          - name: etc-pki-ca-trust-extracted-pem
            mountPath: /etc/pki/ca-trust/extracted/pem
            readOnly: true
          - name: sidekiq-config
            mountPath: '/var/opt/gitlab/templates'
            readOnly: true
          - name: sidekiq-secrets
            mountPath: '/etc/gitlab'
            readOnly: true
          - name: sidekiq-secrets
            mountPath: /srv/gitlab/config/secrets.yml
            subPath: rails-secrets/secrets.yml
            readOnly: true
          resources:
            requests:
              cpu: 50m      
      containers:
        
        - name: sidekiq
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-sidekiq-ee:v17.8.1"                    
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1000
          env:
            - name: prometheus_multiproc_dir
              value: /metrics
            - name: GITALY_FEATURE_DEFAULT_ON
              value: "1"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab/templates'
            - name: CONFIG_DIRECTORY
              value: '/srv/gitlab/config'
            - name: SIDEKIQ_CONCURRENCY
              value: "20"
            - name: SIDEKIQ_TIMEOUT
              value: "25"
            - name: SIDEKIQ_QUEUES
              value: 
            - name: SIDEKIQ_DAEMON_MEMORY_KILLER
              value: "1"
            - name: SIDEKIQ_MEMORY_KILLER_CHECK_INTERVAL
              value: "3"
            - name: SIDEKIQ_MEMORY_KILLER_MAX_RSS
              value: "2000000"
            - name: SIDEKIQ_MEMORY_KILLER_GRACE_TIME
              value: "900"
            - name: SIDEKIQ_MEMORY_KILLER_SHUTDOWN_WAIT
              value: "30"
            
            
            
            
            - name: TZ
              value: "UTC"
          ports:
          - containerPort: 3807
            name: http-metrics
          volumeMounts:
          
          
          - name: sidekiq-metrics
            mountPath: '/metrics'
          - name: sidekiq-config
            mountPath: '/var/opt/gitlab/templates'
            readOnly: true
          - name: sidekiq-secrets
            mountPath: '/etc/gitlab'
            readOnly: true
          - name: sidekiq-secrets
            mountPath: /srv/gitlab/config/secrets.yml
            subPath: rails-secrets/secrets.yml
          - name: sidekiq-config
            mountPath: '/etc/krb5.conf'
            subPath: krb5.conf
          
          - name: sidekiq-config
            mountPath: '/srv/gitlab/config/initializers/smtp_settings.rb'
            subPath: smtp_settings.rb
          - name: sidekiq-config
            mountPath: '/srv/gitlab/INSTALLATION_TYPE'
            subPath: installation_type
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs/
            readOnly: true
          - name: etc-pki-ca-trust-extracted-pem
            mountPath: /etc/pki/ca-trust/extracted/pem
            readOnly: true
          livenessProbe:
            httpGet:
              path: /liveness
              port: 3808
            initialDelaySeconds: 20
            periodSeconds: 60
            timeoutSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /readiness
              port: 3808
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 3
          lifecycle:
            preStop:
              exec:
                command: ["/bin/bash", "-c", "pkill -f 'sidekiq'"]
          resources:
            requests:
              cpu: 900m
              memory: 2G
      volumes:
      
      
      
      
      
      - name: sidekiq-metrics
        emptyDir:
          medium: "Memory"
      - name: sidekiq-config
        projected:
          sources:
            - configMap:
                name: gitlab-sidekiq
      - name: init-sidekiq-secrets
        projected:
          defaultMode: 0400
          sources:
          - secret:
              name: "gitlab-rails-secret"
              items:
                - key: secrets.yml
                  path: rails-secrets/secrets.yml
          - secret:
              name: "gitlab-gitaly-secret"
              items:
                - key: "token"
                  path: gitaly/gitaly_token
          
          
          
          
          - secret:
              name: "gitlab-redis-secret"
              items:
                - key: "secret"
                  path: redis/redis-password
          
          - secret:
              name: "gitlab-postgresql-password"
              items:
                - key: "postgresql-password"
                  path: postgres/psql-password-ci
          - secret:
              name: "gitlab-postgresql-password"
              items:
                - key: "postgresql-password"
                  path: postgres/psql-password-main
          - secret:
              name: "gitlab-registry-secret"
              items:
                - key: registry-auth.key
                  path: registry/gitlab-registry.key
          - secret:
              name: "gitlab-registry-notification"
              items:
                - key: "secret"
                  path: registry/notificationSecret
          
          # mount secret for kas
          - secret:
              name: "gitlab-gitlab-kas-secret"
              items:
                - key: "kas_shared_secret"
                  path: kas/.gitlab_kas_secret
          # mount secret for suggested reviewers
          - secret:
              name: "gitlab-gitlab-suggested-reviewers"
              items:
                - key: "suggested_reviewers_secret"
                  path: suggested_reviewers/.gitlab_suggested_reviewers_secret
          # mount secret for zoekt
          - secret:
              name: gitlab-zoekt-basicauth
              optional: true
              items:
                - key: gitlab_username
                  path: zoekt/.gitlab_zoekt_username
                - key: gitlab_password
                  path: zoekt/.gitlab_zoekt_password
          # mount secret for minio
          - secret:
              name: "gitlab-minio-secret"
              items:
                - key: accesskey
                  path: minio/accesskey
                - key: secretkey
                  path: minio/secretkey
          # mount secret for object_store
          # mount secret for lfs
          # mount secret for artifacts
          # mount secret for uploads
          # mount secret for packages
          # mount secret for external_diffs
          # mount secret for terraform_state
          # mount secret for ci_secure_files
          # mount secret for dependency_proxy
          # mount secret for pages
          # mount secrets for LDAP
          
          
          # mount secrets for microsoftGraphMailer
          # mount secrets for SMTP
      - name: sidekiq-secrets
        emptyDir:
          medium: "Memory"
      
      - name: etc-ssl-certs
        emptyDir:
          medium: "Memory"
      - name: etc-pki-ca-trust-extracted-pem
        emptyDir:
          medium: "Memory"
---
# Source: gitlab/charts/gitlab/charts/toolbox/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab-toolbox
  namespace: gitlab
  labels:
    app: toolbox
    chart: toolbox-8.8.1
    release: gitlab
    heritage: Helm
    
  annotations:
    
spec:
  replicas: 1
  selector:
    matchLabels:
      app: toolbox
      release: gitlab
      
  strategy: 
    type: Recreate
  template:
    metadata:
      labels:
        app: toolbox
        chart: toolbox-8.8.1
        release: gitlab
        heritage: Helm
        
        
      annotations:
        checksum/config: c49751587fe5ac105d01a2566db7905f83989cf2665907d58cd6a012bc801438
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      automountServiceAccountToken: false
      
      initContainers:
        
        - name: certificates
          image: registry.gitlab.com/gitlab-org/build/cng/certificates:v17.8.1    
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1000
          env:
          
          - name: TZ
            value: "UTC"
          
          
          volumeMounts:
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs
            readOnly: false
          - name: etc-pki-ca-trust-extracted-pem
            mountPath: /etc/pki/ca-trust/extracted/pem
            readOnly: false
          resources:
            requests:
              cpu: 50m
        - name: configure
          command: ['sh', '/config/configure']
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-base:v17.8.1"                    
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1000
          env:
          
          - name: TZ
            value: "UTC"
          
          
          volumeMounts:
          
          
          
          - name: toolbox-config
            mountPath: /config
            readOnly: true
          - name: init-toolbox-secrets
            mountPath: /init-config
            readOnly: true
          - name: toolbox-secrets
            mountPath: /init-secrets
            readOnly: false
          resources:
            requests:
              cpu: 50m      
      
      affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 1
                podAffinityTerm:
                  topologyKey: "kubernetes.io/hostname"
                  labelSelector:
                    matchLabels:
                        app: gitaly
                        release: gitlab
      containers:
        
        - name: toolbox
          args:
            - /bin/bash
            - -c
            - cp -v -r -L /etc/gitlab/.s3cfg $HOME/.s3cfg && while sleep 3600; do :; done # alpine sleep has no infinity
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee:v17.8.1"                    
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1000
          env:
            - name: ARTIFACTS_BUCKET_NAME
              value: gitlab-artifacts
            - name: REGISTRY_BUCKET_NAME
              value: registry
            - name: LFS_BUCKET_NAME
              value: git-lfs
            - name: UPLOADS_BUCKET_NAME
              value: gitlab-uploads
            - name: PACKAGES_BUCKET_NAME
              value: gitlab-packages
            - name: EXTERNAL_DIFFS_BUCKET_NAME
              value: gitlab-mr-diffs
            - name: TERRAFORM_STATE_BUCKET_NAME
              value: gitlab-terraform-state
            - name: CI_SECURE_FILES_BUCKET_NAME
              value: gitlab-ci-secure-files
            - name: BACKUP_BUCKET_NAME
              value: gitlab-backups
            - name: BACKUP_BACKEND
              value: s3
            - name: TMP_BUCKET_NAME
              value: tmp
            - name: PAGES_BUCKET_NAME
              value: gitlab-pages
            - name: GITALY_FEATURE_DEFAULT_ON
              value: "1"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab/templates'
            - name: CONFIG_DIRECTORY
              value: '/srv/gitlab/config'
            
            
            
            - name: TZ
              value: "UTC"
          volumeMounts:
            
            - name: toolbox-config
              mountPath: '/var/opt/gitlab/templates'
            - name: toolbox-config
              mountPath: '/etc/krb5.conf'
              subPath: krb5.conf
            
            - name: toolbox-config
              mountPath: '/srv/gitlab/config/initializers/smtp_settings.rb'
              subPath: smtp_settings.rb
            - name: toolbox-secrets
              mountPath: '/etc/gitlab'
              readOnly: true
            - name: toolbox-secrets
              mountPath: /srv/gitlab/config/secrets.yml
              subPath: rails-secrets/secrets.yml
            - name: toolbox-tmp
              mountPath: '/srv/gitlab/tmp'
              readOnly: false
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
            - name: etc-pki-ca-trust-extracted-pem
              mountPath: /etc/pki/ca-trust/extracted/pem
              readOnly: true
          resources:
            requests:
              cpu: 50m
              memory: 350M
      volumes:
      
      
      
      
      - name: toolbox-config
        projected:
          sources:
            - configMap:
                name: gitlab-toolbox
      - name: toolbox-tmp
        persistentVolumeClaim:
          claimName: gitlab-toolbox-tmp
      - name: init-toolbox-secrets
        projected:
          defaultMode: 0400
          sources:
          - secret:
              name: "gitlab-rails-secret"
              items:
                - key: secrets.yml
                  path: rails-secrets/secrets.yml
          - secret:
              name: "gitlab-gitlab-shell-secret"
              items:
                - key: "secret"
                  path: shell/.gitlab_shell_secret
          - secret:
              name: "gitlab-gitaly-secret"
              items:
                - key: "token"
                  path: gitaly/gitaly_token
          
          
          
          
          - secret:
              name: "gitlab-redis-secret"
              items:
                - key: "secret"
                  path: redis/redis-password
          
          - secret:
              name: "gitlab-postgresql-password"
              items:
                - key: "postgresql-password"
                  path: postgres/psql-password-ci
          - secret:
              name: "gitlab-postgresql-password"
              items:
                - key: "postgresql-password"
                  path: postgres/psql-password-main
          - secret:
              name: "gitlab-registry-secret"
              items:
                - key: registry-auth.key
                  path: registry/gitlab-registry.key
          - secret:
              name: "gitlab-registry-notification"
              items:
                - key: "secret"
                  path: registry/notificationSecret
          
          # mount secret for kas
          - secret:
              name: "gitlab-gitlab-kas-secret"
              items:
                - key: "kas_shared_secret"
                  path: kas/.gitlab_kas_secret
          # mount secret for suggested reviewers
          - secret:
              name: "gitlab-gitlab-suggested-reviewers"
              items:
                - key: "suggested_reviewers_secret"
                  path: suggested_reviewers/.gitlab_suggested_reviewers_secret
          # mount secret for zoekt
          - secret:
              name: gitlab-zoekt-basicauth
              optional: true
              items:
                - key: gitlab_username
                  path: zoekt/.gitlab_zoekt_username
                - key: gitlab_password
                  path: zoekt/.gitlab_zoekt_password
          # mount secret for minio
          - secret:
              name: "gitlab-minio-secret"
              items:
                - key: accesskey
                  path: minio/accesskey
                - key: secretkey
                  path: minio/secretkey
          # mount secret for object_store
          # mount secret for artifacts
          # mount secret for lfs
          # mount secret for uploads
          # mount secret for packages
          # mount secret for external_diffs
          # mount secret for terraform_state
          # mount secret for ci_secure_files
          # mount secret for dependency_proxy
          # mount secret for pages
          # mount secrets for LDAP
          
          
          # mount secrets for microsoftGraphMailer
          # mount secrets for SMTP
      - name: toolbox-secrets
        emptyDir:
          medium: "Memory"
      
      - name: etc-ssl-certs
        emptyDir:
          medium: "Memory"
      - name: etc-pki-ca-trust-extracted-pem
        emptyDir:
          medium: "Memory"
---
# Source: gitlab/charts/gitlab/charts/webservice/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab-webservice-default
  namespace: gitlab
  labels:
    app: webservice
    chart: webservice-8.8.1
    release: gitlab
    heritage: Helm
    gitlab.com/webservice-name: default
    
  annotations:
    
spec:
  # Don't provide replicas when HPA are present
  # replicas: 2
  selector:
    matchLabels:
      app: webservice
      release: gitlab
      
      
      gitlab.com/webservice-name: default
  template:
    metadata:
      labels:
        app: webservice
        chart: webservice-8.8.1
        release: gitlab
        heritage: Helm
        gitlab.com/webservice-name: default
        
        
        
      annotations:
        checksum/config: 33220ad251299a96bbf9104be664d42641bbaad5e9023c4d209b3c999cdc0088
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        gitlab.com/prometheus_scrape: "true"
        gitlab.com/prometheus_port: "8083"
        gitlab.com/prometheus_path: /metrics
        prometheus.io/scrape: "true"
        prometheus.io/port: "8083"
        prometheus.io/path: /metrics
    spec:
      
      
      
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app: webservice
                  release: gitlab
                  
                  gitlab.com/webservice-name: default
      automountServiceAccountToken: false
      initContainers:
        
        - name: certificates
          image: registry.gitlab.com/gitlab-org/build/cng/certificates:v17.8.1    
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1000
          env:
          
          - name: TZ
            value: "UTC"
          
          
          volumeMounts:
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs
            readOnly: false
          - name: etc-pki-ca-trust-extracted-pem
            mountPath: /etc/pki/ca-trust/extracted/pem
            readOnly: false
          resources:
            requests:
              cpu: 50m
        - name: configure
          command: ['sh']
          args: [ '-c', 'sh -x /config-webservice/configure ; sh -x /config-workhorse/configure ; mkdir -p -m 3770 /tmp/gitlab']
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-base:v17.8.1"                    
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1000
          env:
            
            - name: TZ
              value: "UTC"
            
            
          volumeMounts:
          
          
          
          - name: webservice-config
            mountPath: /config-webservice
            readOnly: true
          - name: workhorse-config
            mountPath: /config-workhorse
            readOnly: true
          - name: init-webservice-secrets
            mountPath: /init-config
            readOnly: true
          - name: webservice-secrets
            mountPath: /init-secrets
            readOnly: false
          - name: workhorse-secrets
            mountPath: /init-secrets-workhorse
            readOnly: false
          - name: shared-tmp
            mountPath: /tmp
            readOnly: false
          resources:
            requests:
              cpu: 50m
        - name: dependencies
          image: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ee:v17.8.1                    
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1000
          args:
            - /scripts/wait-for-deps
          env:
            
            - name: TZ
              value: "UTC"
            - name: GITALY_FEATURE_DEFAULT_ON
              value: "1"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab/templates'
            - name: CONFIG_DIRECTORY
              value: '/srv/gitlab/config'
            - name: WORKHORSE_ARCHIVE_CACHE_DISABLED
              value: "1"
            
            
          volumeMounts:
            
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
            - name: etc-pki-ca-trust-extracted-pem
              mountPath: /etc/pki/ca-trust/extracted/pem
              readOnly: true
            - name: webservice-config
              mountPath: '/var/opt/gitlab/templates'
            - name: webservice-secrets
              mountPath: '/etc/gitlab'
              readOnly: true
            - name: webservice-secrets
              mountPath: /srv/gitlab/config/secrets.yml
              subPath: rails-secrets/secrets.yml
              readOnly: true
          resources:
            requests:
              cpu: 50m      
      containers:
        
        - name: webservice
          image: registry.gitlab.com/gitlab-org/build/cng/gitlab-webservice-ee:v17.8.1                    
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1000
          ports:
            - containerPort: 8080
              name: http-webservice
            - containerPort: 8083
              name: http-metrics-ws
          env:
            
            - name: TZ
              value: "UTC"
            - name: GITLAB_WEBSERVER
              value: puma
            - name: TMPDIR
              value: "/tmp/gitlab"
            - name: GITALY_FEATURE_DEFAULT_ON
              value: "1"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab/templates'
            - name: CONFIG_DIRECTORY
              value: '/srv/gitlab/config'
            - name: prometheus_multiproc_dir
              value: /metrics
            - name: WORKER_PROCESSES
              value: "2"
            - name: WORKER_TIMEOUT
              value: "60"
            - name: INTERNAL_PORT
              value: "8080"
            - name: PUMA_THREADS_MIN
              value: "4"
            - name: PUMA_THREADS_MAX
              value: "4"
            - name: PUMA_WORKER_MAX_MEMORY
              value: ""
            - name: DISABLE_PUMA_WORKER_KILLER
              value: "true"
            - name: SHUTDOWN_BLACKOUT_SECONDS
              value: "10"
            
            - name: WORKHORSE_ARCHIVE_CACHE_DISABLED
              value: "true"
            
            
          volumeMounts:
            - name: webservice-metrics
              mountPath: '/metrics'
            - name: webservice-config
              mountPath: '/var/opt/gitlab/templates'
            - name: webservice-secrets
              mountPath: '/etc/gitlab'
              readOnly: true
            - name: webservice-secrets
              mountPath: /srv/gitlab/config/secrets.yml
              subPath: rails-secrets/secrets.yml
            - name: webservice-config
              mountPath: '/etc/krb5.conf'
              subPath: krb5.conf
            
            - name: webservice-config
              mountPath: '/srv/gitlab/config/initializers/smtp_settings.rb'
              subPath: smtp_settings.rb
            - name: webservice-config
              mountPath: '/srv/gitlab/INSTALLATION_TYPE'
              subPath: installation_type
            - name: shared-upload-directory
              mountPath: /srv/gitlab/public/uploads/tmp
              readOnly: false
            - name: shared-tmp
              mountPath: '/tmp'
              readOnly: false
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
            - name: etc-pki-ca-trust-extracted-pem
              mountPath: /etc/pki/ca-trust/extracted/pem
              readOnly: true
            
          livenessProbe:
            httpGet:
              path: /-/liveness
              port: 8080
            initialDelaySeconds: 20
            periodSeconds: 60
            timeoutSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /-/readiness
              port: 8080
            initialDelaySeconds: 0
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 2
          lifecycle:
            preStop:
              exec:
                command: ["/bin/bash", "-c", "pkill -SIGINT -o ruby"]
          resources:
            requests:
              cpu: 300m
              memory: 2.5G
        - name: gitlab-workhorse
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-workhorse-ee:v17.8.1"          
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1000
          ports:
            - containerPort: 8181
              name: http-workhorse
          env:
            
            - name: TZ
              value: "UTC"
            - name: TMPDIR
              value: "/tmp/gitlab"
            - name: GITLAB_WORKHORSE_AUTH_BACKEND
              value: "http://localhost:8080"
            - name: GITLAB_WORKHORSE_EXTRA_ARGS
              value: ""
            - name: GITLAB_WORKHORSE_LISTEN_PORT
              value: "8181"
            - name: GITLAB_WORKHORSE_LOG_FORMAT
              value: "json"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab/templates'
            - name: CONFIG_DIRECTORY
              value: '/srv/gitlab/config'
            - name: SHUTDOWN_BLACKOUT_SECONDS
              value: "10"
            
            
            
          volumeMounts:
            - name: workhorse-config
              mountPath: '/var/opt/gitlab/templates'
            - name: workhorse-secrets
              mountPath: '/etc/gitlab'
              readOnly: true
            - name: shared-upload-directory
              mountPath: /srv/gitlab/public/uploads/tmp
              readOnly: false
            - name: shared-tmp
              mountPath: '/tmp'
              readOnly: false
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
            - name: etc-pki-ca-trust-extracted-pem
              mountPath: /etc/pki/ca-trust/extracted/pem
              readOnly: true
            
            
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/bash
                - -c
                - sleep $SHUTDOWN_BLACKOUT_SECONDS
          livenessProbe:
            exec:
              command:
              - /scripts/healthcheck
            initialDelaySeconds: 20
            periodSeconds: 60
            timeoutSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
              - /scripts/healthcheck
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 3
          resources:
            requests:
              cpu: 100m
              memory: 100M
      volumes:
      
      
      
      
      - name: shared-tmp
        emptyDir: {}
      - name: webservice-metrics
        emptyDir:
          medium: "Memory"
      - name: webservice-config
        configMap:
          name: gitlab-webservice
      - name: workhorse-config
        configMap:
            name: gitlab-workhorse-default
      - name: init-webservice-secrets
        projected:
          defaultMode: 0400
          sources:
          - secret:
              name: "gitlab-rails-secret"
              items:
                - key: secrets.yml
                  path: rails-secrets/secrets.yml
          - secret:
              name: "gitlab-gitlab-shell-secret"
              items:
                - key: "secret"
                  path: shell/.gitlab_shell_secret
          # mount secrets for microsoftGraphMailer
          # mount secrets for incomingEmail
          # mount secrets for serviceDeskEmail
          - secret:
              name: "gitlab-gitaly-secret"
              items:
                - key: "token"
                  path: gitaly/gitaly_token
          
          
          
          
          - secret:
              name: "gitlab-redis-secret"
              items:
                - key: "secret"
                  path: redis/redis-password
          
          - secret:
              name: "gitlab-postgresql-password"
              items:
                - key: "postgresql-password"
                  path: postgres/psql-password-ci
          - secret:
              name: "gitlab-postgresql-password"
              items:
                - key: "postgresql-password"
                  path: postgres/psql-password-main
          - secret:
              name: "gitlab-registry-secret"
              items:
                - key: registry-auth.key
                  path: registry/gitlab-registry.key
          - secret:
              name: "gitlab-registry-notification"
              items:
                - key: "secret"
                  path: registry/notificationSecret
          - secret:
              name: "gitlab-gitlab-workhorse-secret"
              items:
                - key: "shared_secret"
                  path: gitlab-workhorse/secret
          
          # mount secret for kas
          - secret:
              name: "gitlab-gitlab-kas-secret"
              items:
                - key: "kas_shared_secret"
                  path: kas/.gitlab_kas_secret
          # mount secret for suggested reviewers
          - secret:
              name: "gitlab-gitlab-suggested-reviewers"
              items:
                - key: "suggested_reviewers_secret"
                  path: suggested_reviewers/.gitlab_suggested_reviewers_secret
          # mount secret for zoekt
          - secret:
              name: gitlab-zoekt-basicauth
              optional: true
              items:
                - key: gitlab_username
                  path: zoekt/.gitlab_zoekt_username
                - key: gitlab_password
                  path: zoekt/.gitlab_zoekt_password
          # mount secret for minio
          - secret:
              name: "gitlab-minio-secret"
              items:
                - key: accesskey
                  path: minio/accesskey
                - key: secretkey
                  path: minio/secretkey
          # mount secret for object_store
          # mount secret for artifacts
          # mount secret for lfs
          # mount secret for uploads
          # mount secret for packages
          # mount secret for external_diffs
          # mount secret for terraform_state
          # mount secret for ci_secure_files
          # mount secret for dependency_proxy
          # mount secret for pages
          # mount secrets for LDAP
          
          
          # mount secrets for SMTP
      - name: webservice-secrets
        emptyDir:
          medium: "Memory"
      - name: workhorse-secrets
        emptyDir:
          medium: "Memory"
      - name: shared-upload-directory
        emptyDir: {}
      
      - name: etc-ssl-certs
        emptyDir:
          medium: "Memory"
      - name: etc-pki-ca-trust-extracted-pem
        emptyDir:
          medium: "Memory"
---
# Source: gitlab/charts/minio/templates/minio_deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab-minio
  namespace: gitlab
  labels:
    app: minio
    chart: minio-0.4.3
    release: gitlab
    heritage: Helm
    
  annotations:
    
spec:
  selector:
    matchLabels:
      app: minio
      release: "gitlab"
      component: app
  strategy: 
    type: Recreate
  template:
    metadata:
      name: gitlab-minio
      labels:
        component: app
        app: minio
        chart: minio-0.4.3
        release: gitlab
        heritage: Helm
        
        
      annotations:
    spec:
      automountServiceAccountToken: false
      
      
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      
      volumes:
        - name: podinfo
          downwardAPI:
            items:
              - path: "labels"
                fieldRef:
                  fieldPath: metadata.labels
        - name: export
          persistentVolumeClaim:
            claimName: gitlab-minio
        - name: minio-configuration
          projected:
            sources:
            - configMap:
                name: gitlab-minio-config-cm
            - secret:
                name: "gitlab-minio-secret"
        - name: minio-server-config
          emptyDir:
            medium: "Memory"
      initContainers:
        - name: configure
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-base:v17.8.1"                    
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
          command: ["sh", "/config/configure"]
          volumeMounts:
            - name: minio-configuration
              mountPath: /config
            - name: minio-server-config
              mountPath: /minio
          env:
            
            - name: TZ
              value: "UTC"
          resources:
            requests:
              cpu: 50m      
      containers:
        - name: minio
          image: minio/minio:RELEASE.2017-12-28T01-21-00Z          
          args: ["-C", "/tmp/.minio", "--quiet", "server", "/export"]          
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1000
          env:
          
          - name: TZ
            value: "UTC"
          volumeMounts:
            - name: export
              mountPath: /export
            - name: minio-server-config
              # this path altered from upstream, for use with `securityContext`/UID 1000
              mountPath: "/tmp/.minio"
            - name: podinfo
              mountPath: /podinfo
              readOnly: false
          ports:
            - name: service
              containerPort: 9000
          livenessProbe:
            tcpSocket:
              port: 9000
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
---
# Source: gitlab/charts/registry/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab-registry
  namespace: gitlab
  labels:
    app: registry
    chart: registry-0.7.0
    release: gitlab
    heritage: Helm
    
  annotations:
    
spec:
  # Don't provide replicas when HPA are present
  # replicas: 2
  selector:
    matchLabels:
      app: registry
      release: gitlab
  template:
    metadata:
      labels:
        app: registry
        chart: registry-0.7.0
        release: gitlab
        heritage: Helm
        
        
      annotations:
        checksum/configmap: 14a9ab43ff628af3520b53b60964523cadf51b68d0940f80f09ec04301401253
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      
      
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      
      affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 1
                podAffinityTerm:
                  topologyKey: "kubernetes.io/hostname"
                  labelSelector:
                    matchLabels:
                      app: registry
                      release: gitlab
      automountServiceAccountToken: false
      
      initContainers:
        - name: certificates
          image: registry.gitlab.com/gitlab-org/build/cng/certificates:v17.8.1    
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1000
          env:
          
          - name: TZ
            value: "UTC"
          
          
          volumeMounts:
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs
            readOnly: false
          - name: etc-pki-ca-trust-extracted-pem
            mountPath: /etc/pki/ca-trust/extracted/pem
            readOnly: false
          resources:
            requests:
              cpu: 50m
        - name: configure
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-base:v17.8.1"                    
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1000
          args: ["sh", "/config/configure"]
          volumeMounts:
            - name: registry-secrets
              mountPath: /config
            - name: registry-server-config-templates
              mountPath: /templates
              readOnly: true
            - name: registry-server-config
              mountPath: /registry
          resources:
            requests:
              cpu: 50m
          env:
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: /templates
            - name: CONFIG_DIRECTORY
              value: /registry
            
            
            
            - name: TZ
              value: "UTC"      
      containers:
        - name: registry
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-container-registry:v4.15.0-gitlab"                    
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1000
          env:
          
          - name: TZ
            value: "UTC"
          
          
          volumeMounts:
          - name: registry-server-config
            mountPath: /etc/docker/registry/
            readOnly: true
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs/
            readOnly: true
          - name: etc-pki-ca-trust-extracted-pem
            mountPath: /etc/pki/ca-trust/extracted/pem
            readOnly: true
          ports:
            - containerPort: 5000
              name: http
            - containerPort: 5001
              name: debug
          livenessProbe:
            httpGet:
              path: /debug/health
              port: debug
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /debug/health
              port: debug
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          resources:
            requests:
              cpu: 50m
              memory: 32Mi
          lifecycle:
            preStop:
              exec:
                command: ["/bin/bash", "-c", "sleep 5"]
      terminationGracePeriodSeconds: 30
      volumes:
      - name: registry-server-config-templates
        configMap:
          name: gitlab-registry
          items:
            - key: config.yml.tpl
              path: config.yml.tpl
      # Actual config dirs that will be used in the container
      - name: registry-server-config
        emptyDir:
          medium: "Memory"
      - name: registry-secrets
        projected:
          sources:
          - configMap:
              name: gitlab-registry
          - secret:
              name: "gitlab-registry-secret"
              items:
                  - key: registry-auth.crt
                    path: certificate.crt
          - secret:
              name: "gitlab-registry-httpsecret"
              items:
                - key: "secret"
                  path: httpSecret
          - secret:
              name: "gitlab-minio-secret"
          
          
          
          
      
      - name: etc-ssl-certs
        emptyDir:
          medium: "Memory"
      - name: etc-pki-ca-trust-extracted-pem
        emptyDir:
          medium: "Memory"
---
# Source: gitlab/charts/gitlab/charts/gitlab-shell/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: gitlab-gitlab-shell
  namespace: gitlab
  labels:
    app: gitlab-shell
    chart: gitlab-shell-8.8.1
    release: gitlab
    heritage: Helm
    
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: gitlab-gitlab-shell
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: AverageValue
          averageValue: 100m
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
---
# Source: gitlab/charts/gitlab/charts/kas/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: gitlab-kas
  namespace: gitlab
  labels:
    app: kas
    chart: kas-8.8.1
    release: gitlab
    heritage: Helm
    
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: gitlab-kas
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: AverageValue
          averageValue: 100m
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
---
# Source: gitlab/charts/gitlab/charts/sidekiq/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: gitlab-sidekiq-all-in-1-v2
  namespace: gitlab
  labels:
    app: sidekiq
    chart: sidekiq-8.8.1
    release: gitlab
    heritage: Helm
    
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: gitlab-sidekiq-all-in-1-v2
  minReplicas: 1
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: AverageValue
          averageValue: 350m
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
---
# Source: gitlab/charts/gitlab/charts/webservice/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: gitlab-webservice-default
  namespace: gitlab
  labels:
    app: webservice
    chart: webservice-8.8.1
    release: gitlab
    heritage: Helm
    gitlab.com/webservice-name: default
    
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: gitlab-webservice-default
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: AverageValue
          averageValue: 1
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
---
# Source: gitlab/charts/registry/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: gitlab-registry
  namespace: gitlab
  labels:
    app: registry
    chart: registry-0.7.0
    release: gitlab
    heritage: Helm
    
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: gitlab-registry
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 75
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
---
# Source: gitlab/charts/gitlab/charts/gitaly/templates/statefulset.yml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: gitlab-gitaly
  namespace: gitlab
  labels:
    app: gitaly
    chart: gitaly-8.8.1
    release: gitlab
    heritage: Helm
    
spec:
  selector:
    matchLabels:
      app: gitaly
      release: gitlab
      
  serviceName: gitlab-gitaly
  replicas: 1
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app: gitaly
        chart: gitaly-8.8.1
        release: gitlab
        heritage: Helm
        
        
      annotations:
        checksum/config: ee96f2c6cd600965d1566a755ad0993042ead9f7b67131916b16a72e653c96bd
        gitlab.com/prometheus_scrape: "true"
        gitlab.com/prometheus_port: "9236"
        gitlab.com/prometheus_path: /metrics
        prometheus.io/scrape: "true"
        prometheus.io/port: "9236"
        prometheus.io/path: /metrics
    spec:
      
      terminationGracePeriodSeconds: 30
      initContainers:
        
        - name: certificates
          image: registry.gitlab.com/gitlab-org/build/cng/certificates:v17.8.1    
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
          env:
          
          - name: TZ
            value: "UTC"
          
          
          volumeMounts:
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs
            readOnly: false
          - name: etc-pki-ca-trust-extracted-pem
            mountPath: /etc/pki/ca-trust/extracted/pem
            readOnly: false
          resources:
            requests:
              cpu: 50m
        - name: configure
          command: ['sh', '/config/configure']
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-base:v17.8.1"                    
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
          env:
            
            - name: TZ
              value: "UTC"
            
            
          volumeMounts:
            
            - name: gitaly-config
              mountPath: /config
              readOnly: true
            - name: init-gitaly-secrets
              mountPath: /init-config
              readOnly: true
            - name: gitaly-secrets
              mountPath: /init-secrets
              readOnly: false
          resources:
            requests:
              cpu: 50m
      
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      
      affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 1
                podAffinityTerm:
                  topologyKey: "kubernetes.io/hostname"
                  labelSelector:
                    matchLabels:
                        app: gitaly
                        release: gitlab
                        
                              
      automountServiceAccountToken: false
      containers:
        
        - name: gitaly
          image: "registry.gitlab.com/gitlab-org/build/cng/gitaly:v17.8.1"                    
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1000
          ports:
            - containerPort: 8075
              name: grpc-gitaly
            - containerPort: 9236
              name: http-metrics
          env:
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/etc/gitaly/templates'
            - name: CONFIG_DIRECTORY
              value: '/etc/gitaly'
            - name: GITALY_CONFIG_FILE
              value: '/etc/gitaly/config.toml'
            - name: SSL_CERT_DIR
              value: '/etc/ssl/certs'
            
            
            
            
            - name: TZ
              value: "UTC"
          volumeMounts:
            
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
            - name: etc-pki-ca-trust-extracted-pem
              mountPath: /etc/pki/ca-trust/extracted/pem
              readOnly: true
            - name: gitaly-config
              mountPath: '/etc/gitaly/templates'
            - name: gitaly-secrets
              mountPath: '/etc/gitlab-secrets'
              readOnly: true
            - name: repo-data
              mountPath: '/home/git/repositories'
          startupProbe:
            exec:
              command:
              - /scripts/healthcheck
            initialDelaySeconds: 1
            periodSeconds:  1
            timeoutSeconds:  1
            successThreshold:  1
            failureThreshold: 60
          livenessProbe:
            exec:
              command:
              - /scripts/healthcheck
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
              - /scripts/healthcheck
            initialDelaySeconds: 0
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          resources:
            requests:
              cpu: 100m
              memory: 200Mi
      
      volumes:
        
        - name: gitaly-config
          configMap:
            name: gitlab-gitaly
        - name: gitaly-secrets
          emptyDir:
            medium: "Memory"
        - name: init-gitaly-secrets
          projected:
            defaultMode: 0440
            sources:
            - secret:
                name: "gitlab-gitaly-secret"
                items:
                  - key: "token"
                    path: "gitaly_token"
            - secret:
                name: "gitlab-gitlab-shell-secret"
                items:
                  - key: "secret"
                    path: ".gitlab_shell_secret"
        
        - name: etc-ssl-certs
          emptyDir:
            medium: "Memory"
        - name: etc-pki-ca-trust-extracted-pem
          emptyDir:
            medium: "Memory"

  
  volumeClaimTemplates:
    - metadata:
        name: repo-data
        labels:
          app: gitaly
          release: gitlab
        annotations:
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "50Gi"
        selector:
---
# Source: gitlab/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: gitlab-postgresql
  namespace: "gitlab"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.5.2
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: gitlab-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: gitlab
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: gitlab-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-12.5.2
        app.kubernetes.io/instance: gitlab
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
        postgresql.gitlab/init-revision: "1"
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: gitlab
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:14.8.0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "gitlab"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "gitlab-postgresql-password"
                  key: postgresql-postgres-password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "gitlab-postgresql-password"
                  key: "postgresql-password"
            - name: POSTGRES_DB
              value: "gitlabhq_production"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "gitlab" -d "dbname=gitlabhq_production" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "gitlab" -d "dbname=gitlabhq_production" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d/
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
            - mountPath: /docker-entrypoint-preinitdb.d/init_revision.sh
              name: custom-init-scripts
              subPath: init_revision.sh
        - name: metrics
          image: docker.io/bitnami/postgres-exporter:0.12.0-debian-11-r86
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: DATA_SOURCE_URI
              value: 127.0.0.1:5432/gitlabhq_production?sslmode=disable
            - name: DATA_SOURCE_PASS
              valueFrom:
                secretKeyRef:
                  name: "gitlab-postgresql-password"
                  key: "postgresql-password"
            - name: DATA_SOURCE_USER
              value: "gitlab"
          ports:
            - name: http-metrics
              containerPort: 9187
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              port: http-metrics
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              port: http-metrics
          volumeMounts:
          resources:
            limits: {}
            requests: {}
      volumes:
        - name: custom-init-scripts
          configMap:
            name: gitlab-postgresql-init-db
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: gitlab/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: gitlab-redis-master
  namespace: "gitlab"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.13.2
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: gitlab
      app.kubernetes.io/component: master
  serviceName: gitlab-redis-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-16.13.2
        app.kubernetes.io/instance: gitlab
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: d84c45ea590e51dfb1e054b2c0d2c7a0b22af786ff1571947f80095cb1a4c241
        checksum/health: 7724db1d152b2d626f9955e618ad311d12987a9337f20e080bccad5f21554041
        checksum/scripts: a7b8cbc423e035fbed614bf3e5db9a41b4c0d43cbf12946907fa6cc661b74335
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        prometheus.io/port: "9121"
        prometheus.io/scrape: "true"
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: gitlab-redis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: gitlab
                    app.kubernetes.io/component: master
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/bitnami/redis:6.2.16-debian-12-r1
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD_FILE
              value: "/opt/bitnami/redis/secrets/redis-password"
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-password
              mountPath: /opt/bitnami/redis/secrets/
            - name: redis-data
              mountPath: /data
              subPath: 
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
        - name: metrics
          image: docker.io/bitnami/redis-exporter:1.46.0-debian-11-r8
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
            - -c
            - |
              if [[ -f '/secrets/redis-password' ]]; then
              export REDIS_PASSWORD=$(cat /secrets/redis-password)
              fi
              redis_exporter
          env:
            - name: REDIS_ALIAS
              value: gitlab-redis
            - name: REDIS_USER
              value: default
          ports:
            - name: metrics
              containerPort: 9121
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: redis-password
              mountPath: /secrets/
      volumes:
        - name: start-scripts
          configMap:
            name: gitlab-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: gitlab-redis-health
            defaultMode: 0755
        - name: redis-password
          secret:
            secretName: "gitlab-redis-secret"
            items:
            - key: "secret"
              path: redis-password
        - name: config
          configMap:
            name: gitlab-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: gitlab
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: gitlab/charts/gitlab/charts/migrations/templates/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: gitlab-migrations-977f218
  namespace: gitlab
  labels:
    app: migrations
    chart: migrations-8.8.1
    release: gitlab
    heritage: Helm
    
spec:
  activeDeadlineSeconds: 3600
  backoffLimit: 6
  template:
    metadata:
      labels:
        app: migrations
        chart: migrations-8.8.1
        release: gitlab
        heritage: Helm
        
        
    spec:
      
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      automountServiceAccountToken: false
      
      initContainers:
        
        - name: certificates
          image: registry.gitlab.com/gitlab-org/build/cng/certificates:v17.8.1    
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
          env:
          
          - name: TZ
            value: "UTC"
          
          
          volumeMounts:
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs
            readOnly: false
          - name: etc-pki-ca-trust-extracted-pem
            mountPath: /etc/pki/ca-trust/extracted/pem
            readOnly: false
          resources:
            requests:
              cpu: 50m
        - name: configure
          command: ['sh', '/config/configure']
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-base:v17.8.1"                    
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
          env:
          
          - name: TZ
            value: "UTC"
          
          
          volumeMounts:
          
          
          
          - name: migrations-config
            mountPath: /config
            readOnly: true
          - name: init-migrations-secrets
            mountPath: /init-config
            readOnly: true
          - name: migrations-secrets
            mountPath: /init-secrets
            readOnly: false
          resources:
            requests:
              cpu: 50m
      restartPolicy: OnFailure      
      containers:
        
        - name: migrations
          image: "registry.gitlab.com/gitlab-org/build/cng/gitlab-toolbox-ee:v17.8.1"
          args:
            - /scripts/wait-for-deps
            - /scripts/db-migrate                    
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1000
          env:
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab/templates'
            - name: CONFIG_DIRECTORY
              value: '/srv/gitlab/config'
            - name: BYPASS_SCHEMA_VERSION
              value: 'true'
            
            
            
            - name: TZ
              value: "UTC"
          volumeMounts:
            - name: migrations-config
              mountPath: '/var/opt/gitlab/templates'
            - name: migrations-secrets
              mountPath: '/etc/gitlab'
              readOnly: true
            - name: migrations-secrets
              mountPath: /srv/gitlab/config/secrets.yml
              subPath: rails-secrets/secrets.yml
            - name: migrations-secrets
              mountPath: /srv/gitlab/config/initial_root_password
              subPath: migrations/initial_root_password
            - name: migrations-secrets
              mountPath: /srv/gitlab/config/gitlab_shared_runners_registration_token
              subPath: migrations/gitlab_shared_runners_registration_token
            
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
            - name: etc-pki-ca-trust-extracted-pem
              mountPath: /etc/pki/ca-trust/extracted/pem
              readOnly: true
          resources:
            requests:
              cpu: 250m
              memory: 200Mi
      volumes:
      
      
      
      - name: migrations-config
        configMap:
          name: gitlab-migrations
      - name: init-migrations-secrets
        projected:
          defaultMode: 0400
          sources:
          
          - secret:
              name: "gitlab-rails-secret"
              items:
                - key: secrets.yml
                  path: rails-secrets/secrets.yml
          - secret:
              name: "gitlab-gitaly-secret"
              items:
                - key: "token"
                  path: gitaly/gitaly_token
          
          
          
          
          - secret:
              name: "gitlab-redis-secret"
              items:
                - key: "secret"
                  path: redis/redis-password
          
          - secret:
              name: "gitlab-postgresql-password"
              items:
                - key: "postgresql-password"
                  path: postgres/psql-password-ci
          - secret:
              name: "gitlab-postgresql-password"
              items:
                - key: "postgresql-password"
                  path: postgres/psql-password-main
          - secret:
              name: "gitlab-gitlab-initial-root-password"
              items:
                - key: "password"
                  path: migrations/initial_root_password
          - secret:
              name: "gitlab-gitlab-runner-secret"
              items:
                - key: runner-registration-token
                  path: migrations/gitlab_shared_runners_registration_token
      - name: migrations-secrets
        emptyDir:
          medium: "Memory"
      
      - name: etc-ssl-certs
        emptyDir:
          medium: "Memory"
      - name: etc-pki-ca-trust-extracted-pem
        emptyDir:
          medium: "Memory"
---
# Source: gitlab/charts/minio/templates/create-buckets-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: gitlab-minio-create-buckets-ed451a6
  namespace: gitlab
  labels:
    app: minio
    chart: minio-0.4.3
    release: gitlab
    heritage: Helm
    
spec:
  activeDeadlineSeconds: 600
  template:
    metadata:
      labels:
        component: create-buckets
        app: minio
        chart: minio-0.4.3
        release: gitlab
        heritage: Helm
        
        

    spec:
      automountServiceAccountToken: false
      restartPolicy: OnFailure
      
      
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      
      volumes:
        - name: minio-configuration
          projected:
            sources:
            - configMap:
                name: gitlab-minio-config-cm
            - secret:
                name: "gitlab-minio-secret"      
      containers:
      - name: minio-mc
        image: minio/mc:RELEASE.2018-07-13T00-53-22Z        
        command: ["/bin/sh", "/config/initialize"]        
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000
        env:
          - name: HOME
            value: "/tmp"
          - name: MINIO_ENDPOINT
            value: gitlab-minio-svc.gitlab.svc
          - name: MINIO_PORT
            value: "9000"
        volumeMounts:
          - name: minio-configuration
            mountPath: /config
        resources:
          requests:
            cpu: 50m
---
# Source: gitlab/charts/gitlab/charts/kas/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gitlab-kas
  namespace: gitlab
  labels:
    app: kas
    chart: kas-8.8.1
    release: gitlab
    heritage: Helm
    
  annotations:
    
    kubernetes.io/ingress.provider: "nginx"
    nginx.ingress.kubernetes.io/proxy-buffering: "off"
    nginx.ingress.kubernetes.io/custom-http-errors: ""
    
spec:
  ingressClassName: "nginx"
  rules:
    - host: kas.localhost
      http:
        paths:
          - path: "/k8s-proxy/"
            pathType: Prefix
            backend:
              service:
                name: gitlab-kas
                port:
                  number: 8154
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: gitlab-kas
                port:
                  number: 8150
  tls: []
---
# Source: gitlab/charts/gitlab/charts/webservice/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gitlab-webservice-default
  namespace: gitlab
  labels:
    app: webservice
    chart: webservice-8.8.1
    release: gitlab
    heritage: Helm
    gitlab.com/webservice-name: default
    
  annotations:
    
    kubernetes.io/ingress.provider: "nginx"
    nginx.ingress.kubernetes.io/proxy-body-size: "512m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "15"
    
    nginx.ingress.kubernetes.io/service-upstream: "true"
spec:
  ingressClassName: "nginx"
  rules:
    - host: gitlab.localhost
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                  name: gitlab-webservice-default
                  port:
                    number: 8181
  tls: []
---
# Source: gitlab/charts/minio/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gitlab-minio
  namespace: gitlab
  labels:
    app: minio
    chart: minio-0.4.3
    release: gitlab
    heritage: Helm
    
  annotations:
    
    kubernetes.io/ingress.provider: "nginx"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "900"
    nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
    nginx.ingress.kubernetes.io/proxy-buffering: "off"
    
spec:
  ingressClassName: "nginx"
  rules:
    - host: minio.localhost
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                  name: gitlab-minio-svc
                  port:
                    number: 9000
  tls: []
---
# Source: gitlab/charts/registry/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gitlab-registry
  namespace: gitlab
  labels:
    app: registry
    chart: registry-0.7.0
    release: gitlab
    heritage: Helm
    
  annotations:
    
    kubernetes.io/ingress.provider: "nginx"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "900"
    nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
    nginx.ingress.kubernetes.io/proxy-buffering: "off"
    
spec:
  ingressClassName: "nginx"
  rules:
    - host: registry.localhost
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: gitlab-registry
                port:
                  number:  5000
  tls: []

NOTES:
=== CRITICAL
The following charts are included for evaluation purposes only. They will not be supported by GitLab Support
for production workloads. Use Cloud Native Hybrid deployments for production. For more information visit
https://docs.gitlab.com/charts/installation/index.html#use-the-reference-architectures.
- PostgreSQL
- Redis
- Gitaly
- MinIO

=== NOTICE
The minimum required version of PostgreSQL is now 14. See https://docs.gitlab.com/charts/installation/upgrade.html for more details.

=== WARNING
Automatic TLS certificate generation with cert-manager is disabled.
One or more of the components does not have a TLS certificate Secret configured.
As a result, Self-signed certificates were generated for these components.

You may retrieve the CA root for these certificates from the `gitlab-wildcard-tls-ca` secret, via the following command. It can then be imported to a web browser or system store.

  kubectl get secret gitlab-wildcard-tls-ca -ojsonpath='{.data.cfssl_ca}' | base64 --decode > gitlab.localhost.ca.pem

If you do not wish to use self-signed certificates, please set the following properties:
- global.ingress.tls.secretName
OR all of:
- global.ingress.tls.enabled (set to `true`)
- gitlab.webservice.ingress.tls.secretName
- registry.ingress.tls.secretName
- minio.ingress.tls.secretName
- gitlab.kas.ingress.tls.secretName


kubectl patch svc gitlab-webservice-default -n gitlab \
  -p '{"spec": {"type": "NodePort", "ports": [{"name": "http-webservice", "nodePort": 30305, "port": 8080}, {"name": "http-workhorse", "nodePort": 30405, "port": 8181}, {"name": "http-metrics-ws", "nodePort": 30505, "port": 8083}]}}'

kubectl patch svc gitlab-webservice-default -n gitlab  -p '{"spec": {"type": "NodePort", "ports": [{"name": "http-webservice", "nodePort": 30305, "port": 8080}, {"name": "http-workhorse", "nodePort": 30405, "port": 8181}, {"name": "http-metrics-ws", "nodePort": 30505, "port": 8083}]}}'